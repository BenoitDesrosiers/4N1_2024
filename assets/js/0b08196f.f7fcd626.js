"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[6356],{2745:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=i(5893),t=i(1151);const s={sidebar_position:910,draft:!1},a="Liste de tests d'int\xe9gration",l={id:"Tests int\xe9gration/test_integration",title:"Liste de tests d'int\xe9gration",description:"Voici une liste de tests d'int\xe9gration.",source:"@site/docs/90-Tests int\xe9gration/test_integration.md",sourceDirName:"90-Tests int\xe9gration",slug:"/Tests int\xe9gration/test_integration",permalink:"/4N1_2024/docs/Tests int\xe9gration/test_integration",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:910,frontMatter:{sidebar_position:910,draft:!1},sidebar:"NotesSidebar",previous:{title:"Introduction",permalink:"/4N1_2024/docs/Tests int\xe9gration/introduction"},next:{title:"Planification",permalink:"/4N1_2024/docs/Enseignant/a_planning"}},o={},u=[{value:"GestionCategorieVM",id:"gestioncategorievm",level:2},{value:"Test: Afficher une cat\xe9gorie pour une cat\xe9gorie existante",id:"test-afficher-une-cat\xe9gorie-pour-une-cat\xe9gorie-existante",level:3},{value:"Test: Ajouter une cat\xe9gorie",id:"test-ajouter-une-cat\xe9gorie",level:3},{value:"ListeCategoriesVM",id:"listecategoriesvm",level:2},{value:"Utilisateur non authentifi\xe9",id:"utilisateur-non-authentifi\xe9",level:3},{value:"Supprimer une cat\xe9gorie",id:"supprimer-une-cat\xe9gorie",level:3}];function c(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"liste-de-tests-dint\xe9gration",children:"Liste de tests d'int\xe9gration"}),"\n",(0,n.jsx)(r.p,{children:"Voici une liste de tests d'int\xe9gration."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 partir du ",(0,n.jsx)(r.strong,{children:"ViewModel"})," de type liste."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Obtenir la liste"}),"\n",(0,n.jsx)(r.li,{children:"Supprimer"}),"\n",(0,n.jsx)(r.li,{children:"Emp\xeacher la suppression s'il y a une d\xe9pendance"}),"\n",(0,n.jsx)(r.li,{children:"Tester la s\xe9curit\xe9"}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 partir du ",(0,n.jsx)(r.strong,{children:"ViewModel"})," de type ",(0,n.jsx)(r.strong,{children:"Gestion"}),"."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Obtenir l'item et il existe"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Obtenir l'item et il n'existe pas"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Ajouter"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Emp\xeacher l'ajout par la validation"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Modifier"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Emp\xeacher la modification par la validation"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Supprimer"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Emp\xeacher la suppression s'il y a une d\xe9pendance"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Tester la s\xe9curit\xe9"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.admonition,{type:"info",children:[(0,n.jsxs)(r.p,{children:["Pour le ",(0,n.jsx)(r.strong,{children:"TP 3"}),", vous devez faire 1 test d'int\xe9gration. Vous pouvez r\xe9utiliser les exemples de ce document et ajouter les \xe9l\xe9ments manquants. Seul le test ",(0,n.jsx)(r.strong,{children:"Utilisateur non authentifi\xe9"})," ne peut \xeatre r\xe9utilis\xe9."]}),(0,n.jsxs)(r.p,{children:["Notez aussi que les exemples sont incomplets pour le ",(0,n.jsx)(r.strong,{children:"TP 3"}),", car le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," en d\xe9monstration dans les notes de cours n'a pas toutes les fonctionnalit\xe9s (s\xe9curit\xe9, notification). Vous devrez donc les adapter."]})]}),"\n",(0,n.jsx)(r.h2,{id:"gestioncategorievm",children:"GestionCategorieVM"}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez le dossier ",(0,n.jsx)(r.strong,{children:"ViewModels"})," dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.ITest"})]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"GestionCategorieVMITest.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"ViewModels"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["La classe ",(0,n.jsx)(r.strong,{children:"UtilitaireBD"})," permet d'initialiser la base de donn\xe9es de test."]}),"\n",(0,n.jsxs)(r.p,{children:["L'interface ",(0,n.jsx)(r.strong,{children:"ICategorieService"})," est le service r\xe9el."]}),"\n",(0,n.jsxs)(r.p,{children:["Cette classe va utiliser des d\xe9pendances pour faire fonctionner les tests. Il faut inclure toutes les d\xe9pendances r\xe9elles dont le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," a besoin."]}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Pour le ",(0,n.jsx)(r.strong,{children:"TP 3"})," vous aurrez aussi besoin de ",(0,n.jsx)(r.strong,{children:"l'authenficitateur"}),"."]})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using FluentAssertions;\r\nusing SuperCarte.Core.Services;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.ITest.Aides;\r\nusing SuperCarte.WPF.ViewModels;\r\n\r\nnamespace SuperCarte.ITest.ViewModels;\r\n\r\n/// <summary>\r\n/// Test d\'int\xe9gration \xe0 partir de GestionCategorieVM \r\n/// </summary>\r\npublic class GestionCategorieVMITest\r\n{    \r\n    private readonly UtilitaireBD _utilitaireBD;    \r\n    private readonly ICategorieService _categorieService;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="utilitaireBD">Utilitaire de la BD</param>\r\n    /// <param name="categorieService">Service du module Categorie</param>\r\n    public GestionCategorieVMITest(UtilitaireBD utilitaireBD,\r\n        ICategorieService categorieService)\r\n\t{        \r\n        _utilitaireBD = utilitaireBD;        \r\n        _categorieService = categorieService;\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"test-afficher-une-cat\xe9gorie-pour-une-cat\xe9gorie-existante",children:"Test: Afficher une cat\xe9gorie pour une cat\xe9gorie existante"}),"\n",(0,n.jsx)(r.p,{children:"Pour r\xe9aliser ce test, il faut obtenir l'enregistrement de la base de donn\xe9es pour faire la comparaison avec les propri\xe9t\xe9s de liaison."}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["N'oubliez pas qu'il faut ajouter l'authentification dans les arrangements pour le ",(0,n.jsx)(r.strong,{children:"TP 3"}),". R\xe9f\xe9rez-vous \xe0 l'exemple ",(0,n.jsx)(r.strong,{children:"Utilisateur non authentifi\xe9"})," pour voir la m\xe9canique de l'authentification."]})}),"\n",(0,n.jsx)(r.admonition,{title:"IMPORTANT",type:"warning",children:(0,n.jsx)(r.p,{children:"Assurez-vous que votre chaine de connexion utilise une bd test car la bd sera r\xe9initialis\xe9e lors des tests"})}),"\n",(0,n.jsx)(r.p,{children:"Voici les arrangements:"}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 5, c'est la cl\xe9 de la cat\xe9gorie utilis\xe9e pour faire le test. Il est important que la cat\xe9gorie existe dans la base de donn\xe9es. Elle doit provenir du ",(0,n.jsx)(r.strong,{children:"seed"})," de la migration ou d'un ",(0,n.jsx)(r.strong,{children:"seed"})," contenu dans la classe ",(0,n.jsx)(r.strong,{children:"UtilitaireBD"}),". Pour simplifier les tests, tous les tests utiliseront les donn\xe9es du ",(0,n.jsx)(r.strong,{children:"seed"})," de la migration, mais g\xe9n\xe9ralement, il faut avoir des donn\xe9es de tests."]}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 8, la base de donn\xe9es est r\xe9initialis\xe9e."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 11, l'enregistrement de la cat\xe9gorie #1 est obtenu directement du contexte."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 14, le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," est cr\xe9\xe9. Il faut injecter les d\xe9pendances obtenues par le constructeur de la classe test ou par des simulacres."]}),"\n",(0,n.jsx)(r.p,{children:"Pour les actions, il faut assigner en param\xe8tre la cl\xe9 de la cat\xe9gorie et il faut ex\xe9cuter la commande (lignes 18 et 21)."}),"\n",(0,n.jsx)(r.p,{children:"Au niveau des assertions, il faut s'assurer que la cat\xe9gorie existe r\xe9ellement dans la base de donn\xe9es (ligne 25). Si la cat\xe9gorie n'existe pas, la v\xe9rification des propri\xe9t\xe9s pourrait donner un faux n\xe9gatif, car ce serait les valeurs par d\xe9faut qui seraient compar\xe9es."}),"\n",(0,n.jsx)(r.p,{children:"Aux lignes 28 \xe0 30, il faut s'assurer que les valeurs des propri\xe9t\xe9s de liaison sont identiques \xe0 celle de la base de donn\xe9es."}),"\n",(0,n.jsxs)(r.p,{children:["Ajoutez cette fonction dans ",(0,n.jsx)(r.strong,{children:"GestionCategorieVMITest.cs"}),":"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic async Task ObtenirCommande_CategorieExiste_ProprieteOK()\r\n{\r\n    //Arrangement (Arrange)\r\n    const int categorieId = 1;\r\n\r\n    ////Initialisation de la base de donn\xe9es test\r\n    _utilitaireBD.Initialiser();\r\n\r\n    ////Obtenir la cat\xe9gorie attendue\r\n    Categorie? categorieAttendue = _utilitaireBD.BDContext.CategorieTb.Where(c => c.CategorieId == categorieId).FirstOrDefault();\r\n\r\n    ////Cr\xe9ation du ViewModel\r\n    GestionCategorieVM gestionCategorieVM = new GestionCategorieVM(_categorieService);\r\n\r\n    //Action (Act)         \r\n    ////Assignation de la cat\xe9gorie \xe0 g\xe9rer\r\n    gestionCategorieVM.AssignerParametre(categorieId);\r\n\r\n    ////Ex\xe9cution de la commande pour obtenir\r\n    await gestionCategorieVM.ObtenirCommande.ExecuteAsync(null);\r\n            \r\n    //Assertion (Assert)        \r\n    ////La cat\xe9gorie \xe0 afficher existe dans la base de donn\xe9es\r\n    Assert.NotEqual((Categorie?)null, categorieAttendue); \r\n\r\n    ////Les propri\xe9t\xe9s de liaison sont identiques \xe0 celle de la base de donn\xe9es\r\n    Assert.Equal(categorieAttendue.CategorieId, gestionCategorieVM.CategorieId);\r\n    Assert.Equal(categorieAttendue.Nom, gestionCategorieVM.Nom);\r\n    Assert.Equal(categorieAttendue.Description, gestionCategorieVM.Description);\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Notez que rien n'est mock dans ce test. C'est donc le vrai code qui est ex\xe9cut\xe9 de bout en bout. Il y aura donc un acc\xe8s \xe0 la bd en lecture. Ces tests sont donc ",(0,n.jsx)(r.em,{children:"tr\xe8s lent"})," comparativement aux tests unitaires."]}),"\n",(0,n.jsx)(r.h3,{id:"test-ajouter-une-cat\xe9gorie",children:"Test: Ajouter une cat\xe9gorie"}),"\n",(0,n.jsxs)(r.p,{children:["Pour tester l'ajout, il faut assigner manuellement les propri\xe9t\xe9s de liaison du ",(0,n.jsx)(r.strong,{children:"ViewModel"}),". Les valeurs doivent \xeatre valides. Apr\xe8s l'ex\xe9cution, il faut r\xe9cup\xe9rer la cat\xe9gorie directement dans la base de donn\xe9es \xe0 partir de sa nouvelle cl\xe9. Il faut \xe9galement s'assurer que la cat\xe9gorie n'existait pas."]}),"\n",(0,n.jsxs)(r.p,{children:["Dans la classe ",(0,n.jsx)(r.strong,{children:"UtilitaireBD"}),", ajoutez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"CreerObjetCategorieValide()"}),". La m\xe9thode permet de cr\xe9er un objet ",(0,n.jsx)(r.strong,{children:"Categorie"}),". La librairie ",(0,n.jsx)(r.strong,{children:"AutoFixture"})," est utilis\xe9e pour la cr\xe9ation, car il faut s'assurer que toutes les propri\xe9t\xe9s ont une valeur."]}),"\n",(0,n.jsx)(r.admonition,{title:"Attention",type:"warning",children:(0,n.jsx)(r.p,{children:"Ici aussi, il faut faire attention aux faux positifs. Si un nouveau champ optionnel dans la base de donn\xe9es, ET qu'il y a une erreur dans le code pour cette propri\xe9t\xe9 ET que le test n'est pas mis \xe0 jour pour y mettre une valeur, le test donnera un faux positif car il ne d\xe9tectera pas cette erreur."})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'public Categorie CreerObjetCategorieValide()\r\n{\r\n    var fixture = new Fixture();\r\n\r\n    //Cr\xe9ation de l\'objet avec Autofixture pour s\'assurer que toutes les propri\xe9t\xe9s ont une valeur\r\n    Categorie categorie =\r\n        fixture.Build<Categorie>()\r\n            .Without(u => u.CategorieId)\r\n            .Without(u => u.CarteListe)\r\n            .Create();\r\n\r\n    //Assignation des valeurs valides\r\n    categorie.Nom = "Nom valide";\r\n    categorie.Description = "Description valide";\r\n\r\n    return categorie;\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"EnregistrerCommande_AjouterCategorieValide_ExisteBD()"})," dans la classe ",(0,n.jsx)(r.strong,{children:"GestionCategorieVMITest"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Voici les arrangements:"}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 6, la base de donn\xe9es est r\xe9initialis\xe9e."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 9, la cat\xe9gorie attendue pour la cr\xe9ation et cr\xe9er par l'utilitaire."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 12, la liste des ",(0,n.jsx)(r.strong,{children:"CategorieId"})," est obtenue pour s'assurer que le ",(0,n.jsx)(r.strong,{children:"CategorieId"})," obtenu apr\xe8s la cr\xe9ation n'existait pas d\xe9j\xe0."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 15, le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," est cr\xe9\xe9."]}),"\n",(0,n.jsx)(r.p,{children:"Voici les actions."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 19, il faut assigner la cl\xe9 ",(0,n.jsx)(r.strong,{children:"0"})," pour indiquer que c'est pour un ajout."]}),"\n",(0,n.jsx)(r.p,{children:"Aux lignes 22 et 23, il faut assigner les valeurs dans les propri\xe9t\xe9s de liaison \xe0 partir de la cat\xe9gorie attendue."}),"\n",(0,n.jsx)(r.p,{children:"Voici les assertions."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 33, il faut s'assurer que la cl\xe9 de la cat\xe9gorie obtenue n'est pas ",(0,n.jsx)(r.strong,{children:"0"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 36, il faut s'assurer que la cat\xe9gorie existe dans la base de donn\xe9es \xe0 partir de la cl\xe9 obtenue."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 39, il faut s'assurer que la cl\xe9 de la cat\xe9gorie n'existait pas dans la base de donn\xe9es."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 42, il faut s'assurer que la cat\xe9gorie cr\xe9\xe9e est identique \xe0 celle attendue."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic async Task EnregistrerCommande_AjouterCategorieValide_ExisteBD()\r\n{\r\n    //Arrangement (Arrange)\r\n    ////Initialisation de la base de donn\xe9es test\r\n    _utilitaireBD.Initialiser();\r\n\r\n    ////Objet categorie a ajout\xe9 dans la base de donn\xe9es\r\n    Categorie categorieAttendue = _utilitaireBD.CreerObjetCategorieValide();        \r\n\r\n    ////Obtenir la liste des CategorieId existant pour s'assurer que la cat\xe9gorie n'existe pas d\xe9j\xe0\r\n    List<int> lstCategorieIdInitial = _utilitaireBD.BDContext.CategorieTb.Select(c => c.CategorieId).ToList();        \r\n\r\n    ////Cr\xe9ation du ViewModel\r\n    GestionCategorieVM gestionCategorieVM = new GestionCategorieVM(_categorieService);\r\n\r\n    //Action (Act)         \r\n    ////Assignation de la cat\xe9gorie \xe0 cr\xe9er\r\n    gestionCategorieVM.AssignerParametre(0);\r\n    \r\n    ////Assignation des propri\xe9t\xe9s de liaison \xe0 partir de l'objet \xe0 cr\xe9er\r\n    gestionCategorieVM.Nom = categorieAttendue.Nom;\r\n    gestionCategorieVM.Description = categorieAttendue.Description;\r\n\r\n    ////Ex\xe9cution de la commande enregistrer\r\n    await gestionCategorieVM.EnregistrerCommande.ExecuteAsync(null);\r\n\r\n    ////Obtenir la cat\xe9gorie dans la base de donn\xe9es \xe0 partir de la cl\xe9 g\xe9n\xe9r\xe9e\r\n    Categorie? categorieAjoutee = _utilitaireBD.BDContext.CategorieTb.Where(c => c.CategorieId == gestionCategorieVM.CategorieId).FirstOrDefault();\r\n\r\n    //Assertion (Assert)\r\n    ////V\xe9rifie que la cl\xe9 g\xe9n\xe9r\xe9e n'est pas 0\r\n    Assert.NotEqual(gestionCategorieVM.CategorieId, 0);\r\n\r\n    ////V\xe9rifie que la cat\xe9gorie ajout\xe9e existe dans la base de donn\xe9es\r\n    Assert.NotEqual((Categorie?)null, categorieAjoutee);        \r\n\r\n    ////V\xe9rifie que la cl\xe9 de la cat\xe9gorie ajout\xe9e n'existait pas avant l'ajout\r\n    Assert.False(lstCategorieIdInitial.Contains(gestionCategorieVM.CategorieId));\r\n\r\n    ////V\xe9rifie que les propri\xe9t\xe9s sont identiques dans la base de donn\xe9es et l'objet cr\xe9\xe9\r\n    categorieAjoutee.Should().BeEquivalentTo(categorieAttendue, \r\n        options => options.Excluding(x => x.CategorieId)\r\n                          .Excluding(x => x.CarteListe));\r\n}\n"})}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Dans le ",(0,n.jsx)(r.strong,{children:"TP 3"}),", il faut \xe9galement s'assurer que la notification est effectu\xe9e \xe0 la fin de la sauvegarde. L'exemple ",(0,n.jsx)(r.strong,{children:"Utilisateur non authentifi\xe9"})," explique comment cr\xe9er un simulacre."]})}),"\n",(0,n.jsx)(r.h2,{id:"listecategoriesvm",children:"ListeCategoriesVM"}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"ListeCategorieVMITest.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"ViewModels"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["La classe ",(0,n.jsx)(r.strong,{children:"UtilitaireBD"})," permet d'initialiser la base de donn\xe9es de test."]}),"\n",(0,n.jsxs)(r.p,{children:["L'interface ",(0,n.jsx)(r.strong,{children:"ICategorieService"})," est le service r\xe9el."]}),"\n",(0,n.jsxs)(r.p,{children:["La classe ",(0,n.jsx)(r.strong,{children:"UtilitaireBD"})," permet d'initialiser la base de donn\xe9es de test."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Services;\r\nusing SuperCarte.ITest.Aides;\r\nusing SuperCarte.WPF.Aides;\r\n\r\nnamespace SuperCarte.ITest.ViewModels;\r\n\r\n/// <summary>\r\n/// Test d\'int\xe9gration \xe0 partir de ListeCategoriesVM \r\n/// </summary>\r\npublic class ListeCategoriesVMUTest\r\n{\r\n    private readonly UtilitaireBD _utilitaireBD;\r\n    private readonly ICategorieService _categorieService;\r\n    private readonly IAuthentificateur _authentificateur;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="utilitaireBD">Utilitaire de la BD</param>\r\n    /// <param name="categorieService">Service du module Categorie</param>\r\n    /// <param name="authentificateur">Classe d\'assistance pour l\'authentification</param>\r\n    public ListeCategoriesVMUTest(UtilitaireBD utilitaireBD,\r\n        ICategorieService categorieService,\r\n        IAuthentificateur authentificateur)\r\n    {\r\n        _utilitaireBD = utilitaireBD;\r\n        _categorieService = categorieService;\r\n        _authentificateur = authentificateur;\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"utilisateur-non-authentifi\xe9",children:"Utilisateur non authentifi\xe9"}),"\n",(0,n.jsx)(r.admonition,{title:"IMPORTANT",type:"warning",children:(0,n.jsx)(r.p,{children:"Vous ne pouvez pas reprendre ce test pour le TP 3, car il n'y a aucune variation."})}),"\n",(0,n.jsx)(r.p,{children:"Pour ce test, il faut s'assurer que les commandes ne sont pas cr\xe9\xe9es dans les VM lorsqu'un utilisateur n'est pas authentifi\xe9, ce qui aura comme cons\xe9quence que les boutons ne seront pas s\xe9lectionnables."}),"\n",(0,n.jsx)(r.p,{children:"\xc9galement, il faut s'assurer qu'il y a une notification envoy\xe9e \xe0 l'utilisateur."}),"\n",(0,n.jsxs)(r.p,{children:["Dans la classe ",(0,n.jsx)(r.strong,{children:"UtilitaireBD"}),", il faut ajouter les m\xe9thodes pour obtenir les informations d'un compte utilisateur."]}),"\n",(0,n.jsxs)(r.p,{children:["Les m\xe9thodes utilisent un ",(0,n.jsx)(r.strong,{children:"Tuple"})," comme type de retour. Un ",(0,n.jsx)(r.strong,{children:"Tuple"})," consiste en une structure de donn\xe9es simple. Ceci \xe9vite de cr\xe9er une nouvelle classe."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'/// <summary>\r\n/// Obtenir le nom de l\'utilisateur et le mot de passe d\'un utilisateur le r\xf4le Administrateur\r\n/// </summary>\r\n/// <returns>Tuple (nomUtilisater, motPasse)</returns>\r\npublic (string nomUtilisateur, string motPasse) ObtenirUtilisateurRoleAdministrateur()\r\n{\r\n    return ("fsthilaire", "Native3!");\r\n}\r\n\r\n/// <summary>\r\n/// Obtenir le nom de l\'utilisateur et le mot de passe d\'un utilisateur avec le r\xf4le Utilisateur\r\n/// </summary>\r\n/// <returns>Tuple (nomUtilisater, motPasse)</returns>\r\npublic (string nomUtilisateur, string motPasse) ObtenirUtilisateurRoleUtilisateur()\r\n{\r\n    return ("tstark", "#NotAdmin!");\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Dans la classe ",(0,n.jsx)(r.strong,{children:"ListeCategoriesVMUTest"}),", cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"CreerVM_UtilisateurNonAutorise_CommandesNull()"})]}),"\n",(0,n.jsx)(r.p,{children:"Voici les arrangements."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 6, la base de donn\xe9es est r\xe9initialis\xe9e."}),"\n",(0,n.jsxs)(r.p,{children:["Aux lignes 9 et 10, ",(0,n.jsx)(r.strong,{children:"l'authentificateur"})," authentifie un utilisateur qui a le r\xf4le ",(0,n.jsx)(r.strong,{children:"Utilisateur"}),". Ce r\xf4le n'a pas acc\xe8s \xe0 ce ",(0,n.jsx)(r.strong,{children:"ViewModel"}),". L'authentification se fait r\xe9ellement, car le service est obtenu par injection de d\xe9pendance."]}),"\n",(0,n.jsxs)(r.p,{children:["Aux lignes 13 et 14, il faut cr\xe9er un simulacre pour les services manquants. Il est important de cr\xe9er un simulacre pour ces 2 services, car ils utilisent ",(0,n.jsx)(r.strong,{children:"WPF"}),". Si la notification est appel\xe9e, il ne faut pas que le ",(0,n.jsx)(r.strong,{children:"MessageBox"})," s'affiche r\xe9ellement. Ceci bloquerait le test."]}),"\n",(0,n.jsx)(r.p,{children:"Voici les actions."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 19, il faut cr\xe9er le ",(0,n.jsx)(r.strong,{children:"ViewModel"}),". Pour ce test, il s'agit de l'action \xe0 tester, car l'assignation des commandes se fait dans le constructeur. Remarquez que ce sont les simulacres qui sont inject\xe9s pour  le ",(0,n.jsx)(r.strong,{children:"navigateur"})," et la ",(0,n.jsx)(r.strong,{children:"notification"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Finalement, pour les assertions, il faut v\xe9rifier si la notification a affich\xe9 un message d'erreur. Le simulacre permet de faire cette v\xe9rification. Le reste des assertions est de s'assurer que les commandes sont bien \xe0 ",(0,n.jsx)(r.strong,{children:"null"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic async Task CreerVM_UtilisateurNonAutorise_CommandesNull()\r\n{\r\n    //Arrangement (Arrange)\r\n    ////Initialisation de la base de donn\xe9es test\r\n    _utilitaireBD.Initialiser();\r\n\r\n    ////Connecter un utilisateur qui a le r\xf4le Utilisateur\r\n    var compteUtilisateur = _utilitaireBD.ObtenirUtilisateurRoleUtilisateur();\r\n    await _authentificateur.AuthentifierUtilisateurAsync(compteUtilisateur.nomUtilisateur, compteUtilisateur.motPasse);\r\n\r\n    ////Cr\xe9ation des simulacres pour les services d\xe9pendants du UI\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n\r\n\r\n    //Action (Act)\r\n    ////Cr\xe9ation du ViewModel\r\n    ListeCategoriesVM listeCategorieVM = new ListeCategoriesVM(_authentificateur,\r\n                                                               notification.Object,\r\n                                                               _categorieService,\r\n                                                               navigateur.Object);\r\n\r\n    //Assertion (Assert)\r\n    ////V\xe9rifie que le message d'erreur a \xe9t\xe9 affich\xe9\r\n    notification.Verify(x => x.MessageErreur(It.IsAny<string>(), It.IsAny<string>()), Times.Once);\r\n    \r\n    ////V\xe9rifie que les commandes sont tous null\r\n    Assert.True(listeCategorieVM.ObtenirListeCommande is null);\r\n    Assert.True(listeCategorieVM.NouveauCommande is null);\r\n    Assert.True(listeCategorieVM.EditerCommande is null);\r\n    Assert.True(listeCategorieVM.SupprimerCommande is null);\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"supprimer-une-cat\xe9gorie",children:"Supprimer une cat\xe9gorie"}),"\n",(0,n.jsx)(r.p,{children:"Pour supprimer une cat\xe9gorie, il faut obtenir la cat\xe9gorie directement dans la base de donn\xe9es pour s'assurer qu'elle existe."}),"\n",(0,n.jsx)(r.p,{children:"Il faut utiliser une cat\xe9gorie qui n'a aucune d\xe9pendance."}),"\n",(0,n.jsx)(r.p,{children:"Voici les arrangements."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 6, c'est la cl\xe9 de la cat\xe9gorie \xe0 supprimer."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 9, la base de donn\xe9es est r\xe9initialis\xe9e."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 12, il faut obtenir la cat\xe9gorie \xe0 supprimer. Ceci permet de s'assurer que la cat\xe9gorie existe r\xe9ellement dans la base de donn\xe9es. Cette \xe9tape peut \xeatre inutile, le jeu de donn\xe9es de la base de donn\xe9es est contr\xf4l\xe9. Mais le jeu de donn\xe9es n'est pas exempt de ",(0,n.jsx)(r.strong,{children:"bugs"}),". Cette \xe9tape permet de s'assurer qu'elle existe r\xe9ellement."]}),"\n",(0,n.jsxs)(r.p,{children:["Aux lignes 15 et 16, ",(0,n.jsx)(r.strong,{children:"l'authentificateur"})," authentifie un utilisateur qui a le r\xf4le ",(0,n.jsx)(r.strong,{children:"Administrateur"}),".  L'authentification se fait r\xe9ellement, car le service est obtenu par injection de d\xe9pendance."]}),"\n",(0,n.jsxs)(r.p,{children:["Aux lignes 19 et 20, il faut cr\xe9er un simulacre pour les services manquants. Il est important de cr\xe9er un simulacre pour ces 2 services, car ils utilisent ",(0,n.jsx)(r.strong,{children:"WPF"}),". Si la notification est appel\xe9e, il ne faut pas que le ",(0,n.jsx)(r.strong,{children:"MessageBox"})," s'affiche r\xe9ellement. Ceci bloquerait le test."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 23, il faut cr\xe9er le ",(0,n.jsx)(r.strong,{children:"ViewModel"}),". Remarquez que ce sont les simulacres qui sont inject\xe9s pour  le ",(0,n.jsx)(r.strong,{children:"navigateur"})," et la ",(0,n.jsx)(r.strong,{children:"notification"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Pour les actions, il faut simuler les actions de l'utilisateur. Elle contient plusieurs \xe9tapes. Il faut charger la liste initiale, ensuite effectuer la s\xe9lection de la cat\xe9gorie et finalement ex\xe9cuter la suppression."}),"\n",(0,n.jsxs)(r.p,{children:["Il y a \xe9galement 2 \xe9tapes additionnelles pour aider les assertions. \xc0 la ligne 33, la liste des ",(0,n.jsx)(r.strong,{children:"CategorieId"})," est conserv\xe9e pour s'assurer que la cat\xe9gorie est pr\xe9sente dans la liste avant la suppression. \xc0 la ligne 42, la liste des ",(0,n.jsx)(r.strong,{children:"CategorieId"})," est conserv\xe9e pour s'assurer que la cat\xe9gorie n'est pas pr\xe9sente dans la liste apr\xe8s  la suppression. Ces 2 listes serviront aux assertions."]}),"\n",(0,n.jsx)(r.p,{children:"Finalement, il y a plusieurs assertions pour s'assure du bon fonctionnement."}),"\n",(0,n.jsx)(r.p,{children:"Voici les assertions."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 49, il faut s'assurer que la cat\xe9gorie existait avant la suppression."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 52, il faut s'assurer que la cat\xe9gorie \xe9tait dans la liste avant la suppression."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 55, il faut s'assurer que la liste initiale a 1 \xe9l\xe9ment de plus de la liste finale."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 58, il faut s'assurer que la cat\xe9gorie n'est plus dans la liste apr\xe8s la suppression."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 61, il faut s'assurer que la cat\xe9gorie n'est r\xe9ellement plus dans la base de donn\xe9es."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic async Task SupprimerCommande_CategorieSansDependance_OK()\r\n{\r\n    //Arrangement (Arrange)\r\n    ////Cat\xe9gorie sans d\xe9pendance\r\n    const int categorieId = 3;\r\n\r\n    ////Initialisation de la base de donn\xe9es test\r\n    _utilitaireBD.Initialiser(); \r\n\r\n    ////Obtenir la cat\xe9gorie \xe0 supprimer\r\n    Categorie categorieASupprimer = _utilitaireBD.BDContext.Find<Categorie>(categorieId); \r\n\r\n    ////Connecter un utilisateur qui a le r\xf4le Administrateur\r\n    var compteUtilisateur = _utilitaireBD.ObtenirUtilisateurRoleAdministrateur();\r\n    await _authentificateur.AuthentifierUtilisateurAsync(compteUtilisateur.nomUtilisateur, compteUtilisateur.motPasse);\r\n\r\n    ////Cr\xe9ation des simulacres pour les services d\xe9pendants du UI\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n    \r\n    ////Cr\xe9ation du ViewModel\r\n    ListeCategoriesVM listeCategorieVM = new ListeCategoriesVM(_authentificateur,\r\n                                                               notification.Object,\r\n                                                               _categorieService,\r\n                                                               navigateur.Object);\r\n\r\n    //Action (Act)\r\n    ////Ex\xe9cution de la commande pour obtenir la liste\r\n    await listeCategorieVM.ObtenirListeCommande.ExecuteAsync(null);\r\n    \r\n    ////Obtenir la liste des cat\xe9gories id avant la suppression pour l'assertion\r\n    List<int> lstCategorieIdAvantSupp = listeCategorieVM.ListeCategories.Select(c => c.CategorieId).ToList();\r\n\r\n    ////S\xe9lection de la cat\xe9gorie \xe0 supprimer\r\n    listeCategorieVM.CategorieSelection = listeCategorieVM.ListeCategories.Where(c => c.CategorieId == categorieId).FirstOrDefault();\r\n\r\n    ////Ex\xe9cuter la commande de suppression\r\n    await listeCategorieVM.SupprimerCommande.ExecuteAsync(null);\r\n\r\n    ////Obtenir la liste des CategorieId apr\xe8s la suppression pour l'assertion\r\n    List<int> lstCategorieIdApresSupp = listeCategorieVM.ListeCategories.Select(c => c.CategorieId).ToList();\r\n\r\n    ////Obtenir dans la base de donn\xe9es la cat\xe9gorie supprim\xe9e pour l'assertion\r\n    Categorie? categorieSupprime = _utilitaireBD.BDContext.CategorieTb.Where(c => c.CategorieId == categorieId).FirstOrDefault();\r\n\r\n    //Assertion (Assert)\r\n    ////La cat\xe9gorie \xe0 supprimer existe dans la base de donn\xe9es avant la suppression\r\n    Assert.False(categorieASupprimer is null);\r\n\r\n    ////La cat\xe9gorie \xe0 supprimer est dans la liste avant la suppression\r\n    Assert.True(lstCategorieIdAvantSupp.Contains(categorieId));\r\n\r\n    ////La liste avant la suppression a un \xe9l\xe9ment de plus que la liste apr\xe8s la suppression\r\n    Assert.True(lstCategorieIdAvantSupp.Count - 1 == lstCategorieIdApresSupp.Count);\r\n\r\n    ////La cat\xe9gorie \xe0 supprimer n'est pas dans la liste apr\xe8s la suppression\r\n    Assert.False(lstCategorieIdApresSupp.Contains(categorieId));\r\n\r\n    ////La cat\xe9gorie \xe0 supprimer n'existe pas dans la BD apr\xe8s la suppression\r\n    Assert.True(categorieSupprime is null);\r\n}\n"})})]})}function d(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,r,i)=>{i.d(r,{Z:()=>l,a:()=>a});var n=i(7294);const t={},s=n.createContext(t);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);