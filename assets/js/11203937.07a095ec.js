"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[63],{9602:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var a=n(5893),i=n(1151);const t={sidebar_position:325,draft:!1},s="Navigation et param\xe8tres",o={id:"WPF partie 3/navigation",title:"Navigation et param\xe8tres",description:"Il faut \xeatre en mesure de passer de la liste vers la gestion.",source:"@site/docs/74-WPF partie 3/navigation.md",sourceDirName:"74-WPF partie 3",slug:"/WPF partie 3/navigation",permalink:"/4N1_2024/docs/WPF partie 3/navigation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:325,frontMatter:{sidebar_position:325,draft:!1},sidebar:"NotesSidebar",previous:{title:"Modifier une cat\xe9gorie",permalink:"/4N1_2024/docs/WPF partie 3/modif_categorie"},next:{title:"Chargement automatique",permalink:"/4N1_2024/docs/WPF partie 3/chargement_initial"}},l={},d=[{value:"Cr\xe9ation de BaseParameterVM",id:"cr\xe9ation-de-baseparametervm",level:2},{value:"Modification de GestionCategorieVM",id:"modification-de-gestioncategorievm",level:2},{value:"Modification du navigateur",id:"modification-du-navigateur",level:2},{value:"Modification de ListeCategoriesVM",id:"modification-de-listecategoriesvm",level:2},{value:"Lier les commandes aux boutons - UcListeCategories.xaml",id:"lier-les-commandes-aux-boutons---uclistecategoriesxaml",level:2},{value:"Test - MainWindowVM",id:"test---mainwindowvm",level:2}];function c(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h1,{id:"navigation-et-param\xe8tres",children:"Navigation et param\xe8tres"}),"\n",(0,a.jsx)(r.p,{children:"Il faut \xeatre en mesure de passer de la liste vers la gestion."}),"\n",(0,a.jsxs)(r.p,{children:["Il faut \xeatre en mesure d'envoyer des param\xe8tres dans le navigateur et que le ",(0,a.jsx)(r.strong,{children:"ViewModel"})," les re\xe7oive."]}),"\n",(0,a.jsxs)(r.p,{children:["Dans ce cas-ci, il faut envoyer la cl\xe9 ",(0,a.jsx)(r.strong,{children:"CategorieId"})," de l'\xe9l\xe9ment s\xe9lectionn\xe9 dans la liste dans le navigateur et le ",(0,a.jsx)(r.strong,{children:"GestionCategorieVM"})," doit le recevoir."]}),"\n",(0,a.jsx)(r.h2,{id:"cr\xe9ation-de-baseparametervm",children:"Cr\xe9ation de BaseParameterVM"}),"\n",(0,a.jsxs)(r.p,{children:["Il faut cr\xe9er une nouvelle classe abstraite pour les ",(0,a.jsx)(r.strong,{children:"ViewModel"})," pouvant recevoir des param\xe8tres de la navigation."]}),"\n",(0,a.jsxs)(r.p,{children:["Une nouvelle classe de base est n\xe9cessaire pour respecter le ",(0,a.jsx)(r.strong,{children:"L"})," de ",(0,a.jsx)(r.strong,{children:"SOLID"}),". Il ne faut pas utiliser une classe ne pouvant pas recevoir de param\xe8tres dans la navigation avec param\xe8tres."]}),"\n",(0,a.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,a.jsx)(r.strong,{children:"BaseParametreVM"}),", dans le dossier ",(0,a.jsx)(r.strong,{children:"ViewModels\\Bases"})," du projet ",(0,a.jsx)(r.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using CommunityToolkit.Mvvm.ComponentModel;\r\n\r\nnamespace SuperCarte.WPF.ViewModels.Bases;\r\n\r\n/// <summary>\r\n/// Classe abstraite pour du View Models avec param\xe8tre\r\n/// </summary>\r\n/// <typeparam name="TParametre">Type du param\xe8tre</typeparam>\r\npublic abstract class BaseParametreVM<TParametre> : BaseVM\r\n{\r\n    /// <summary>\r\n    /// Assigner des param\xe8tres au ViewModel\r\n    /// </summary>\r\n    /// <param name="parametre">Param\xe8tre \xe0 assigner</param>\r\n    public abstract void AssignerParametre(TParametre parametre);\r\n}\n'})}),"\n",(0,a.jsxs)(r.p,{children:["La classe est abstraite et elle h\xe9rite de ",(0,a.jsx)(r.strong,{children:"BaseVM"})," pour permettre la notification de param\xe8tre."]}),"\n",(0,a.jsxs)(r.p,{children:["La m\xe9thode ",(0,a.jsx)(r.strong,{children:"AssignerParametre"})," est \xe9galement abstraite. Elle devra \xeatre impl\xe9ment\xe9e obligatoirement dans la classe enfant."]}),"\n",(0,a.jsxs)(r.p,{children:["La classe utilise le type g\xe9n\xe9rique ",(0,a.jsx)(r.strong,{children:"TParametre"})," pour contr\xf4ler ce que la classe peut recevoir comme param\xe8tre."]}),"\n",(0,a.jsx)(r.p,{children:"S'il faut envoyer plusieurs param\xe8tres, il faudra sp\xe9cifier une classe. Dans le cas o\xf9 c'est seulement une cl\xe9 primaire, un type primitif sera suffisant."}),"\n",(0,a.jsx)(r.h2,{id:"modification-de-gestioncategorievm",children:"Modification de GestionCategorieVM"}),"\n",(0,a.jsxs)(r.p,{children:["Il faut que la classe ",(0,a.jsx)(r.strong,{children:"GestionCategorieVM"})," h\xe9rite de la nouvelle classe de base ",(0,a.jsx)(r.strong,{children:"BaseParametreVM<int>"}),".  Elle sp\xe9cifie un ",(0,a.jsx)(r.strong,{children:"int"})," pour le type du param\xe8tre, car la cl\xe9 primaire est un entier (ligne 10)."]}),"\n",(0,a.jsxs)(r.p,{children:["Il faut \xe9galement impl\xe9menter la m\xe9thode ",(0,a.jsx)(r.strong,{children:"AssignerParametre"}),". La m\xe9thode fait l'assignation du param\xe8tre \xe0 la propri\xe9t\xe9 ",(0,a.jsx)(r.strong,{children:"CategorieId"})," (ligne 136)."]}),"\n",(0,a.jsxs)(r.p,{children:["Voici la nouvelle classe ",(0,a.jsx)(r.strong,{children:"GestionCategorieVM"}),"."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.WPF.Views;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue Gestion Categorie\r\n/// </summary>\r\n//highlight-next-line\r\npublic class GestionCategorieVM : BaseParametreVM<int>\r\n{\r\n    #region D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private int _categorieId;\r\n    private string _nom;\r\n    private string? _description;\r\n    private bool _estEnTravail = false;\r\n    private bool _champsModifiables = true;\r\n    #endregion\r\n\r\n    public GestionCategorieVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n\r\n        EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync, () => !EstEnTravail);\r\n        ObtenirCommande = new AsyncRelayCommand(ObtenirAsync, () => !EstEnTravail);\r\n        NouveauCommande = new RelayCommand(Nouveau, () => !EstEnTravail);\r\n    }\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Enregistrer la cat\xe9gorie\r\n    /// </summary>    \r\n    private async Task EnregistrerAsync()\r\n    {\r\n        ChampsModifiables = false;\r\n        EstEnTravail = true;\r\n        bool estEnregistre;\r\n\r\n        CategorieModel categorieModel = VersModele();\r\n\r\n        if (categorieModel.CategorieId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n            estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n            estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n        }\r\n\r\n        if (estEnregistre == true)\r\n        {\r\n            VersVM(categorieModel);\r\n        }\r\n        else\r\n        {\r\n\t        throw new Exception(\"Erreur. Impossible d'enregistrer\");\r\n        }\r\n\r\n        EstEnTravail = false;\r\n        ChampsModifiables = true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la cat\xe9gorie\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private async Task ObtenirAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        CategorieModel? categorieModel = await _categorieService.ObtenirAsync(CategorieId);\r\n\r\n        VersVM(categorieModel);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Mettre le ViewModel en mode ajouter\r\n    /// </summary>\r\n    private void Nouveau()\r\n    {\r\n        CategorieId = 0;\r\n        Nom = string.Empty;\r\n        Description = null;\r\n    }\r\n    #endregion\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand EnregistrerCommande { get; private set; }\r\n    public IAsyncRelayCommand ObtenirCommande { get; private set; }\r\n    public IRelayCommand NouveauCommande { get; private set; }\r\n    #endregion   \r\n\r\n    #region M\xe9thodes d'assignation\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s li\xe9es du ViewModel vers les propri\xe9t\xe9s du mod\xe8le\r\n    /// </summary>\r\n    /// <returns>Objet du mod\xe8le</returns>\r\n    private CategorieModel VersModele()\r\n    {\r\n        return new CategorieModel\r\n        {\r\n            CategorieId = this.CategorieId,\r\n            Nom = this.Nom,\r\n            Description = this.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s du mod\xe8le vers les propri\xe9t\xe9s li\xe9es du ViewModel\r\n    /// </summary>\r\n    /// <param name=\"categorieModel\">Mod\xe8le</param>\r\n    private void VersVM(CategorieModel? categorieModel)\r\n    {\r\n        if (categorieModel != null)\r\n        { \r\n            CategorieId = categorieModel.CategorieId;\r\n            Nom = categorieModel.Nom;\r\n            Description = categorieModel.Description;\r\n        }\r\n        else\r\n        {\r\n            CategorieId = 0;\r\n            Nom = string.Empty;\r\n            Description = null;\r\n        }\r\n    }\r\n\r\n//highlight-start\r\n    public override void AssignerParametre(int parametre)\r\n    {\r\n        CategorieId = parametre;\r\n    }\r\n    //highlight-end\r\n    #endregion\r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            if (SetProperty(ref _estEnTravail, value))\r\n            {\r\n                ObtenirCommande.NotifyCanExecuteChanged();\r\n                EnregistrerCommande.NotifyCanExecuteChanged();\r\n                NouveauCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    public bool ChampsModifiables\r\n    {\r\n        get\r\n        {\r\n            return _champsModifiables;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _champsModifiables, value);\r\n        }\r\n    }\r\n\r\n    public int CategorieId\r\n    {\r\n        get \r\n        { \r\n            return _categorieId;\r\n        }\r\n        private set\r\n        {\r\n            SetProperty(ref _categorieId, value);\r\n        }\r\n    }\r\n\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nom, value);\r\n        }\r\n    }\r\n\r\n    public string? Description\r\n    {\r\n        get\r\n        {\r\n            return _description;\r\n        }\r\n        set\r\n        {\r\n            //Permet de remplacer une chaine vide par null\r\n            SetProperty(ref _description, string.IsNullOrWhiteSpace(value) ? null : value );\r\n        }\r\n    }\r\n    #endregion\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"modification-du-navigateur",children:"Modification du navigateur"}),"\n",(0,a.jsxs)(r.p,{children:["Il faut ",(0,a.jsx)(r.strong,{children:"ajouter"})," la nouvelle m\xe9thode de navigation avec param\xe8tre dans le navigateur."]}),"\n",(0,a.jsx)(r.admonition,{title:"Attention",type:"warning",children:(0,a.jsx)(r.p,{children:"Il ne faut pas remplacer la m\xe9thode naviguer() qui est pr\xe9sentement dans l'interface et la classe. Il faut ajouter cette nouvelle signature/fonction"})}),"\n",(0,a.jsxs)(r.p,{children:["Dans l'interface ",(0,a.jsx)(r.strong,{children:"INavigateur"}),", il faut ajouter la signature de m\xe9thode ci-dessous."]}),"\n",(0,a.jsxs)(r.p,{children:["Le type ",(0,a.jsx)(r.strong,{children:"TViewModel"})," a une restriction. Il doit \xeatre du type ",(0,a.jsx)(r.strong,{children:"BaseParametreVM<TParameter>"}),". Il n'est donc pas possible d'envoyer un type de param\xe8tre qui n'est pas support\xe9 par le ",(0,a.jsx)(r.strong,{children:"ViewModel"})," avec cette restriction."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'/// <summary>\r\n/// Naviger vers un ViewModel et assigner un param\xe8tre initial\r\n/// </summary>\r\n/// <typeparam name="TViewModel">Type du ViewModel</typeparam>\r\n/// <typeparam name="TParameter">Type du param\xe8tre</typeparam>\r\n/// <param name="parametre">Param\xe8tre initial</param>\r\nvoid Naviguer<TViewModel, TParameter>(TParameter parametre) where TViewModel : BaseParametreVM<TParameter>;\n'})}),"\n",(0,a.jsxs)(r.p,{children:["Ajoutez la m\xe9thode dans la classe ",(0,a.jsx)(r.strong,{children:"Navigateur"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["En premier (ligne 3), une instance du ",(0,a.jsx)(r.strong,{children:"ViewModel"})," est cr\xe9\xe9e par le ",(0,a.jsx)(r.strong,{children:"ServiceProvider"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["Ensuite (ligne 5), il faut assigner le param\xe8tre au ",(0,a.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["Finalement (ligne 7), il faut indiquer le ",(0,a.jsx)(r.strong,{children:"ViewModel"})," comme celui qui est actif."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public void Naviguer<TViewModel, TParameter>(TParameter parametre) where TViewModel : BaseParametreVM<TParameter>\r\n{\r\n    BaseParametreVM<TParameter> baseParametreVM = _serviceProvider.GetRequiredService<TViewModel>();\r\n\r\n    baseParametreVM.AssignerParametre(parametre);\r\n\r\n    VMActif = baseParametreVM;\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"modification-de-listecategoriesvm",children:"Modification de ListeCategoriesVM"}),"\n",(0,a.jsxs)(r.p,{children:["Premi\xe8rement, il faut injecter le ",(0,a.jsx)(r.strong,{children:"Navigateur"})," dans ",(0,a.jsx)(r.strong,{children:"ListeCategoriesVM"})," (ligne 13,25, et 28), car c'est ",(0,a.jsx)(r.strong,{children:"ListeCategoriesVM"})," qui s'occupe d'appeler ",(0,a.jsx)(r.strong,{children:"GestionCategorieVM"})," ."]}),"\n",(0,a.jsxs)(r.p,{children:["Il faut cr\xe9er 2 nouvelles commandes dans la liste. La commande ",(0,a.jsx)(r.strong,{children:"Nouveau"})," et ",(0,a.jsx)(r.strong,{children:"Editer"}),". Ces commandes sont ",(0,a.jsx)(r.strong,{children:"synchrones"}),", car aucun appel asynchrone n\u2019est utilis\xe9 (lignes 103 et 105)."]}),"\n",(0,a.jsxs)(r.p,{children:["\xc0 la ligne 31, la commande ",(0,a.jsx)(r.strong,{children:"NouveauCommande"})," a comme fonction d'ex\xe9cuter la m\xe9thode ",(0,a.jsx)(r.strong,{children:"Naviguer"})," du ",(0,a.jsx)(r.strong,{children:"Navigateur"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["Il faut sp\xe9cifier le type du ",(0,a.jsx)(r.strong,{children:"ViewModel"})," ainsi que le type du param\xe8tre. Pour une nouvelle cat\xe9gorie, il faut envoyer le param\xe8tre ",(0,a.jsx)(r.strong,{children:"0"}),". \xc9galement, il faut utiliser une fonction ",(0,a.jsx)(r.strong,{children:"Lambda"}),", car la m\xe9thode a un param\xe8tre."]}),"\n",(0,a.jsxs)(r.p,{children:["\xc0 la ligne 32, la commande ",(0,a.jsx)(r.strong,{children:"EditerCommande"})," a comme fonction d'ex\xe9cuter la m\xe9thode ",(0,a.jsx)(r.strong,{children:"Naviguer"})," du ",(0,a.jsx)(r.strong,{children:"Navigateur"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["Il faut sp\xe9cifier le type du ",(0,a.jsx)(r.strong,{children:"ViewModel"})," ainsi que le type du param\xe8tre. Il faut envoyer le ",(0,a.jsx)(r.strong,{children:"CategorieId"})," de la cat\xe9gorie s\xe9lectionn\xe9e dans la liste. \xc9galement, il faut utiliser une fonction ",(0,a.jsx)(r.strong,{children:"Lambda"}),", car la m\xe9thode a un param\xe8tre."]}),"\n",(0,a.jsx)(r.p,{children:"De plus, la commande est seulement disponible si une cat\xe9gorie est s\xe9lectionn\xe9e ( CategorieSelection != null )."}),"\n",(0,a.jsxs)(r.p,{children:["Finalement, il faut notifier la commande ",(0,a.jsx)(r.strong,{children:"Editer"})," lorsque la cat\xe9gorie s\xe9lectionn\xe9e est modifi\xe9e afin que le bouton soit disponible. (ligne 143)"]}),"\n",(0,a.jsxs)(r.p,{children:["Modifiez la classe ",(0,a.jsx)(r.strong,{children:"ListeCategoriesVM"})," avec le code ci-dessous."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\n \r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n    //highlight-next-line\r\n    private readonly INavigateur _navigateur;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;    \r\n    private CategorieModel? _categorieSelection;\r\n    private bool _estEnTravail = false;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"categorieService\">Service du mod\xe8le Categorie</param>\r\n    /// <param name=\"navigateur\">La classe d'assistance Navigateur</param>\r\n    //highlight-next-line\r\n    public ListeCategoriesVM(ICategorieService categorieService, INavigateur navigateur)\r\n    {\r\n        _categorieService = categorieService;\r\n        //highlight-next-line\r\n        _navigateur = navigateur;\r\n        ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n        SupprimerCommande = new AsyncRelayCommand(SupprimerAsync, PeutSupprimer);\r\n        //highlight-start\r\n        NouveauCommande = new RelayCommand(() => _navigateur.Naviguer<GestionCategorieVM, int>(0));\r\n        EditerCommande = new RelayCommand(() => _navigateur.Naviguer<GestionCategorieVM, int>(CategorieSelection.CategorieId),\r\n                                          () => CategorieSelection != null);\r\n        //highlight-end\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        ListeCategories = await _categorieService.ObtenirListeAsync();        \r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Supprimer la cat\xe9gorie s\xe9lectionn\xe9e\r\n    /// </summary>    \r\n    private async Task SupprimerAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        await _categorieService.SupprimerAsync(CategorieSelection!.CategorieId);\r\n\r\n        await ObtenirListeAsync();\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// V\xe9rifier si la commande supprimer peut s'ex\xe9cuter\r\n    /// </summary>\r\n    /// <returns>Vrai si elle peut s'ex\xe9cuter, faux si elle ne peut pas</returns>\r\n    private bool PeutSupprimer()\r\n    {        \r\n        //V\xe9rifie si une cat\xe9gorie peut \xeatre supprim\xe9e\r\n        if (CategorieSelection != null)\r\n        {\r\n            //Il y a une cat\xe9gorie est s\xe9lectionn\xe9e\r\n\r\n            //Il faut emp\xeacher la v\xe9rification si l'op\xe9ration est en cours d'ex\xe9cution\r\n            //L'appel se fait en parall\xe8le avec l'ex\xe9cution et il y a une v\xe9rification dans la BD\r\n            //Entity Framework ne peut pas fonctionner en parall\xe8le avec la m\xeame instance du contexte.\r\n            //Cette v\xe9rification est seulement n\xe9cessaire dans le cas d'un appel avec la base de donn\xe9es.\r\n            if (SupprimerCommande.IsRunning == false)\r\n            {\r\n                //V\xe9rifie si elle a des d\xe9pendances\r\n                CategorieDependance? categorieDependance =\r\n                    _categorieService.ObtenirDependance(CategorieSelection.CategorieId);\r\n\r\n                //Si aucune cartes, elle peut \xeatre supprim\xe9e\r\n                return categorieDependance?.NbCartes == 0;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Aucune cat\xe9gorie n'est s\xe9lectionn\xe9e\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //Commandes\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; private set; }\r\n    \r\n    public IAsyncRelayCommand SupprimerCommande { get; private set; }\r\n\r\n//highlight-start\r\n    public IRelayCommand NouveauCommande { get; private set; }\r\n\r\n    public IRelayCommand EditerCommande { get; private set; }\r\n//highlight-end\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        {\r\n            return _lstCategories;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }\r\n    }\r\n\r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n            if(SetProperty(ref _categorieSelection, value))\r\n            {\r\n                SupprimerCommande.NotifyCanExecuteChanged();\r\n                //highlight-next-line\r\n                EditerCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"lier-les-commandes-aux-boutons---uclistecategoriesxaml",children:"Lier les commandes aux boutons - UcListeCategories.xaml"}),"\n",(0,a.jsxs)(r.p,{children:["Il faut lier les boutons ",(0,a.jsx)(r.strong,{children:"Nouveau"})," et ",(0,a.jsx)(r.strong,{children:"\xc9diter"})," aux commandes du ",(0,a.jsx)(r.strong,{children:"ViewModel"})," (ligne 7 et 10)."]}),"\n",(0,a.jsxs)(r.p,{children:["Modifiez le fichier ",(0,a.jsx)(r.strong,{children:"UcListeCategories.xaml"})," avec le code ci-dessous."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers",children:'        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    //highlight-next-line\r\n                    Command="{Binding NouveauCommande}"/>\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    //highlight-next-line\r\n                    Command="{Binding EditerCommande}"/>\n'})}),"\n",(0,a.jsx)(r.h2,{id:"test---mainwindowvm",children:"Test - MainWindowVM"}),"\n",(0,a.jsxs)(r.p,{children:["Pour tester, il faut modifier le ",(0,a.jsx)(r.strong,{children:"ViewModel"})," de d\xe9part dans le ",(0,a.jsx)(r.strong,{children:"MainWindowVM"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["Dans le constructeur, il faut naviguer vers le ",(0,a.jsx)(r.strong,{children:"ViewModel"})," initial."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"    //Vue initiale\r\n    _navigateur.Naviguer<ListeCategoriesVM>();\r\n}\n"})}),"\n",(0,a.jsxs)(r.p,{children:["D\xe9marrez l'application et testez les boutons ",(0,a.jsx)(r.strong,{children:"Nouveau"})," et ",(0,a.jsx)(r.strong,{children:"\xc9diter"}),"."]}),"\n",(0,a.jsx)(r.admonition,{type:"note",children:(0,a.jsx)(r.p,{children:"Pour \xc9diter, lorsque vous arriverez sur l'\xe9cran de gestion, appuyez sur R afin de rafraichir l'\xe9cran. Ce petit probl\xe8me est r\xe9gl\xe9 dans la section suivante."})})]})}function u(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>o,a:()=>s});var a=n(7294);const i={},t=a.createContext(i);function s(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);