"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[9591],{9563:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=n(5893),i=n(1151);const s={sidebar_position:260,draft:!1},a="Liste des cartes",l={id:"WPF partie 2/lister_carte",title:"Liste des cartes",description:"Pour faire la liste des cartes, il faut reproduire la m\xeame technique que la liste des cat\xe9gories.",source:"@site/docs/72-WPF partie 2/lister_carte.md",sourceDirName:"72-WPF partie 2",slug:"/WPF partie 2/lister_carte",permalink:"/4N1_2024/docs/WPF partie 2/lister_carte",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:260,frontMatter:{sidebar_position:260,draft:!1},sidebar:"NotesSidebar",previous:{title:"Localisation de .xaml",permalink:"/4N1_2024/docs/WPF partie 2/localisation"},next:{title:"Ex\xe9cution de la partie 2",permalink:"/4N1_2024/docs/WPF partie 2/partie2_final_resume"}},o={},d=[{value:"SuperCarte.Core",id:"supercartecore",level:2},{value:"Cr\xe9ation du mod\xe8le - CarteDetailModel",id:"cr\xe9ation-du-mod\xe8le---cartedetailmodel",level:3},{value:"Ajout de la requ\xeate dans Repository - CarteRepo",id:"ajout-de-la-requ\xeate-dans-repository---carterepo",level:3},{value:"Cr\xe9ation du service - CarteService",id:"cr\xe9ation-du-service---carteservice",level:3},{value:"Projet SuperCarte.WPF",id:"projet-supercartewpf",level:2},{value:"Enregistrement du service - SCServiceExtensions",id:"enregistrement-du-service---scserviceextensions",level:3},{value:"Cr\xe9ation du ViewModel - ListeCartesVM",id:"cr\xe9ation-du-viewmodel---listecartesvm",level:3},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions",level:3},{value:"Cr\xe9ation du fichier ressource - ResUcListeCartes",id:"cr\xe9ation-du-fichier-ressource---resuclistecartes",level:3},{value:"Cr\xe9ation de la vue - UcListeCartes.xaml",id:"cr\xe9ation-de-la-vue---uclistecartesxaml",level:3},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",level:3},{value:"Test - MainWindowVM",id:"test---mainwindowvm",level:3},{value:"Alignement \xe0 droite des nombres",id:"alignement-\xe0-droite-des-nombres",level:3}];function c(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"liste-des-cartes",children:"Liste des cartes"}),"\n",(0,t.jsx)(r.p,{children:"Pour faire la liste des cartes, il faut reproduire la m\xeame technique que la liste des cat\xe9gories."}),"\n",(0,t.jsxs)(r.p,{children:["Par contre, la liste des cartes \xe0 2 cl\xe9s \xe9trang\xe8res. Dans une ",(0,t.jsx)(r.strong,{children:"Vue"}),", l'utilisateur veut rarement voir les cl\xe9s \xe9trang\xe8res, mais plut\xf4t les \xe9l\xe9ments de la table associ\xe9e."]}),"\n",(0,t.jsx)(r.p,{children:"Dans le cas des cartes, il faut afficher le nom de la cat\xe9gorie et le nom de l'ensemble. Il faut cr\xe9er un mod\xe8le qui contient ces deux nouveaux champs."}),"\n",(0,t.jsxs)(r.p,{children:["Dans cette section, ce sera uniquement la m\xe9canique pour ",(0,t.jsx)(r.strong,{children:"Obtenir la liste"}),". Il faudrait tout de m\xeame ajouter la m\xe9canique de suppression."]}),"\n",(0,t.jsx)(r.h2,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,t.jsx)(r.h3,{id:"cr\xe9ation-du-mod\xe8le---cartedetailmodel",children:"Cr\xe9ation du mod\xe8le - CarteDetailModel"}),"\n",(0,t.jsxs)(r.p,{children:["Les mod\xe8les qui seront utilis\xe9s pour les listes de donn\xe9es auront le suffixe ",(0,t.jsx)(r.strong,{children:"Detail"}),", car elles contiennent le d\xe9tail des cl\xe9s \xe9trang\xe8res."]}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,t.jsx)(r.strong,{children:"CarteDetailModel.cs"})," dans le dossier ",(0,t.jsx)(r.strong,{children:"Models"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une carte avec le d\xe9tail de ses cl\xe9s \xe9trang\xe8res\r\n/// </summary>\r\npublic class CarteDetailModel\r\n{\r\n    public int CarteId { get; set; }\r\n    public string Nom { get; set; } = null!;\r\n    public short Vie { get; set; }\r\n    public short Armure { get; set; }\r\n    public short Attaque { get; set; }\r\n    public bool EstRare { get; set; }\r\n    public decimal PrixRevente { get; set; }\r\n\r\n//highlight-start\r\n\t//Les champs des tables associ\xe9es via les FK\r\n    public int CategorieId { get; set; }\r\n    public string CategorieNom { get; set; } = null!;\r\n    public int EnsembleId { get; set; }\r\n    public string EnsembleNom { get; set; } = null!;\r\n//highlight-end\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ajout-de-la-requ\xeate-dans-repository---carterepo",children:"Ajout de la requ\xeate dans Repository - CarteRepo"}),"\n",(0,t.jsx)(r.p,{children:"Pour \xeatre en mesure de r\xe9cup\xe9rer l'information des cl\xe9s \xe9trang\xe8res, il faut adapter la requ\xeate."}),"\n",(0,t.jsxs)(r.p,{children:["Il y a 2 options. La premi\xe8re serait d'utiliser le ",(0,t.jsx)(r.strong,{children:"EagerLoading"}),". Le ",(0,t.jsx)(r.strong,{children:"Service"})," aurait la responsabilit\xe9 de prendre les champs n\xe9cessaires pour construire l'objet ",(0,t.jsx)(r.strong,{children:"CarteModelDetail"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["La 2e option est de cr\xe9er l'objet directement dans la requ\xeate du ",(0,t.jsx)(r.strong,{children:"Repository"}),". Pour ce projet, ce sera cette option qui sera utilis\xe9e."]}),"\n",(0,t.jsxs)(r.p,{children:["Dans l'interface ",(0,t.jsx)(r.strong,{children:"ICarteRepo.cs"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"//highlight-next-line\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic interface ICarteRepo : IBasePKUniqueRepo<Carte, int>\r\n{\r\n\t//highlight-start\r\n    /// <summary>\r\n    /// Obtenir la liste des cartes avec le mod\xe8le CarteDetailModel en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste des cartes</returns>\r\n    Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync();\r\n\t//highlight-end\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Dans la classe ",(0,t.jsx)(r.strong,{children:"CarteRepo.cs"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'//highlight-next-line\r\nusing Microsoft.EntityFrameworkCore;\r\n//highlight-next-line\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic class CarteRepo : BasePKUniqueRepo<Carte, int>, ICarteRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n\t//highlight-start\r\n    public async Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync()\r\n    {\r\n        return await(from lqCarte in _bd.CarteTb\r\n                     select\r\n                         new CarteDetailModel()\r\n                         {\r\n                             CarteId = lqCarte.CarteId,\r\n                             Nom = lqCarte.Nom,\r\n                             Vie = lqCarte.Vie,\r\n                             Armure = lqCarte.Armure,\r\n                             Attaque = lqCarte.Attaque,\r\n                             EstRare = lqCarte.EstRare,\r\n                             PrixRevente = lqCarte.PrixRevente,\r\n                             CategorieId = lqCarte.CategorieId,\r\n                             CategorieNom = lqCarte.Categorie.Nom,\r\n                             EnsembleId = lqCarte.EnsembleId,\r\n                             EnsembleNom = lqCarte.Ensemble.Nom\r\n                         }).ToListAsync();\r\n    }\r\n\t\t//highlight-end\r\n\t\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Les jointures sont effectu\xe9es aux lignes 37 et 39 par la propri\xe9t\xe9 de navigation dans la cr\xe9ation de l'objet."}),"\n",(0,t.jsx)(r.h3,{id:"cr\xe9ation-du-service---carteservice",children:"Cr\xe9ation du service - CarteService"}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,t.jsx)(r.strong,{children:"ICarteService.cs"})," dans le dossier ",(0,t.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"//highlight-next-line\r\nusing SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Carte\r\n/// </summary>\r\npublic interface ICarteService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste des cartes avec le mod\xe8le CarteDetailModel en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste des cartes</returns>\r\n    Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync();\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,t.jsx)(r.strong,{children:"CarteService.cs"})," dans le dossier ",(0,t.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Carte\r\n/// </summary>\r\npublic class CarteService : ICarteService\r\n{\r\n    private readonly ICarteRepo _carteRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="carteRepo">Repository Carte</param>\r\n    public CarteService(ICarteRepo carteRepo)\r\n    {\r\n        _carteRepo = carteRepo;\r\n    }\r\n\r\n    public async Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync()\r\n    {\r\n        return await _carteRepo.ObtenirListeCarteDetailAsync();\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Pour cette m\xe9thode, le ",(0,t.jsx)(r.strong,{children:"Service"})," appelle directement le ",(0,t.jsx)(r.strong,{children:"Repository"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"projet-supercartewpf",children:"Projet SuperCarte.WPF"}),"\n",(0,t.jsx)(r.h3,{id:"enregistrement-du-service---scserviceextensions",children:"Enregistrement du service - SCServiceExtensions"}),"\n",(0,t.jsxs)(r.p,{children:["Il faut enregistrer le ",(0,t.jsx)(r.strong,{children:"Service"})," dans la classe ",(0,t.jsx)(r.strong,{children:"Extensions/ServiceCollections/SCServiceExtensions"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public static void EnregistrerServices(this IServiceCollection services)\r\n{\r\n    services.AddScoped<ICategorieService, CategorieService>();\r\n\t//highlight-next-line\r\n    services.AddScoped<ICarteService, CarteService>();\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Le service est \xe9galement enregistr\xe9 en ",(0,t.jsx)(r.strong,{children:"Scoped"})," pour permettre d'utiliser la m\xeame instance dans le programme dans le m\xeame ",(0,t.jsx)(r.strong,{children:"scope"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"cr\xe9ation-du-viewmodel---listecartesvm",children:"Cr\xe9ation du ViewModel - ListeCartesVM"}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,t.jsx)(r.strong,{children:"ListeCartesVM.cs"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    /// <summary>\r\n    /// ViewModel de la vue ListeCartes\r\n    /// </summary>\r\n    public class ListeCartesVM : BaseVM\r\n    {\r\n        #region D\xe9pendances\r\n        private readonly ICarteService _carteService;\r\n        #endregion\r\n\r\n        #region Attributs des propri\xe9t\xe9s\r\n        private List<CarteDetailModel> _lstCartes;\r\n        private CarteDetailModel? _carteSelection;\r\n        private bool _estEnTravail = false;\r\n        #endregion\r\n\r\n        public ListeCartesVM(ICarteService carteService)\r\n        {\r\n            _carteService = carteService;\r\n            \r\n            ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n        }\r\n\r\n        #region M\xe9thodes des commandes\r\n        /// <summary>\r\n        /// Obtenir la liste de cat\xe9gories du service\r\n        /// </summary>    \r\n        private async Task ObtenirListeAsync()\r\n        {\r\n            EstEnTravail = true;\r\n\r\n            ListeCartes = await _carteService.ObtenirListeCarteDetailAsync();\r\n\r\n            EstEnTravail = false;\r\n        }\r\n        #endregion\r\n\r\n        #region Commandes\r\n        public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n        #endregion\r\n\r\n        #region Propri\xe9t\xe9s li\xe9es\r\n        public bool EstEnTravail\r\n        {\r\n            get\r\n            {\r\n                return _estEnTravail;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _estEnTravail, value);\r\n            }\r\n        }\r\n\r\n        public List<CarteDetailModel> ListeCartes\r\n        {\r\n            get\r\n            {\r\n                return _lstCartes;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _lstCartes, value);\r\n            }\r\n        }\r\n\r\n        public CarteDetailModel? CarteSelection\r\n        {\r\n            get\r\n            {\r\n                return _carteSelection;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _carteSelection, value);\r\n            }\r\n        }\r\n        #endregion\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Il y a beaucoup de similitudes entre ",(0,t.jsx)(r.strong,{children:"ListeCategoriesVM"})," et ",(0,t.jsx)(r.strong,{children:"ListeCartesVM"}),". Il serait possible de g\xe9n\xe9raliser une bonne partie de la logique avec une classe parent g\xe9n\xe9rique du type ",(0,t.jsx)(r.strong,{children:"BaseListeVM"}),". Par contre, ce concept ne sera pas pr\xe9sent\xe9."]}),"\n",(0,t.jsxs)(r.p,{children:["\xc9galement, dans ce ",(0,t.jsx)(r.strong,{children:"ViewModel"}),", il y a des ",(0,t.jsx)(r.strong,{children:"#region"})," utilis\xe9es pour classer les diff\xe9rentes sections. Les ",(0,t.jsx)(r.strong,{children:"ViewModel"})," peuvent devenir assez gros selon la complexit\xe9 de la vue. Le classement des diff\xe9rentes sections peut aider."]}),"\n",(0,t.jsx)(r.h3,{id:"enregistrer-le-viewmodel---scviewmodelextensions",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,t.jsxs)(r.p,{children:["Dans la classe ",(0,t.jsx)(r.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,t.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n{\r\n    services.AddTransient<MainWindowVM>();\r\n    services.AddTransient<ListeCategoriesVM>();\r\n\t//highlight-next-line\r\n    services.AddTransient<ListeCartesVM>();\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"cr\xe9ation-du-fichier-ressource---resuclistecartes",children:"Cr\xe9ation du fichier ressource - ResUcListeCartes"}),"\n",(0,t.jsxs)(r.p,{children:["G\xe9n\xe9ralement, la conception de la ",(0,t.jsx)(r.strong,{children:"Vue"})," et du fichier ressource se fait en parall\xe8le. \xc0 chaque \xe9l\xe9ment qu'il faut faire un libell\xe9, il faut cr\xe9er un \xe9l\xe9ment dans le fichier ressource."]}),"\n",(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsx)(r.p,{children:"Ces fichiers sont d\xe9j\xe0 pr\xe9sents si vous avez  utilisez le fichier zip dans la section Localisation des notes de cours"})}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez le fichier ",(0,t.jsx)(r.strong,{children:"ResListeCartes.resx"}),"."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Nom"}),(0,t.jsx)(r.th,{children:"Valeur"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Titre"}),(0,t.jsx)(r.td,{children:"Liste des cartes"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_CarteId"}),(0,t.jsx)(r.td,{children:"Id"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Nom"}),(0,t.jsx)(r.td,{children:"Nom"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Vie"}),(0,t.jsx)(r.td,{children:"Vie"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Armure"}),(0,t.jsx)(r.td,{children:"Armure"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Attaque"}),(0,t.jsx)(r.td,{children:"Attaque"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_EstRare"}),(0,t.jsx)(r.td,{children:"Rare"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_PrixRevente"}),(0,t.jsx)(r.td,{children:"Prix de revente"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_CategorieNom"}),(0,t.jsx)(r.td,{children:"Cat\xe9gorie"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_EnsembleNom"}),(0,t.jsx)(r.td,{children:"Ensemble"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez le fichier ",(0,t.jsx)(r.strong,{children:"ResListeCartes.en.resx"}),"."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Nom"}),(0,t.jsx)(r.th,{children:"Valeur"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Titre"}),(0,t.jsx)(r.td,{children:"Card List"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_CarteId"}),(0,t.jsx)(r.td,{children:"Id"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Nom"}),(0,t.jsx)(r.td,{children:"Name"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Vie"}),(0,t.jsx)(r.td,{children:"Health"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Armure"}),(0,t.jsx)(r.td,{children:"Armor"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_Attaque"}),(0,t.jsx)(r.td,{children:"Attack"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_EstRare"}),(0,t.jsx)(r.td,{children:"Rare"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_PrixRevente"}),(0,t.jsx)(r.td,{children:"Resale price"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_CategorieNom"}),(0,t.jsx)(r.td,{children:"Category"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Col_EnsembleNom"}),(0,t.jsx)(r.td,{children:"Set"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"cr\xe9ation-de-la-vue---uclistecartesxaml",children:"Cr\xe9ation de la vue - UcListeCartes.xaml"}),"\n",(0,t.jsxs)(r.p,{children:["Cr\xe9ez un ",(0,t.jsx)(r.strong,{children:"Contr\xf4le utilisateur (WPF)"})," nomm\xe9 ",(0,t.jsx)(r.strong,{children:"UcListeCartes.xaml"})," dans le dossier ",(0,t.jsx)(r.strong,{children:"Views"}),". Le mod\xe8le se retrouve dans la section ",(0,t.jsx)(r.strong,{children:"WPF"})," \xe0 gauche."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCartes"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCartes"             \r\n             d:DataContext="{d:DesignInstance vm:ListeCartesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="{lex:Loc Titre}"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCartes}"\r\n                  SelectedItem="{Binding CarteSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="{lex:Loc Col_CarteId}"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CarteId}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Nom}"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Vie}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Vie}"/>\r\n                \r\n                <DataGridTextColumn Header="{lex:Loc Col_Armure}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Armure}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Attaque}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Attaque}"/>\r\n\r\n                <DataGridCheckBoxColumn Header="{lex:Loc Col_EstRare}" \r\n                                        MinWidth="50"                                    \r\n                                        Binding="{Binding EstRare}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_PrixRevente}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_CategorieNom}" \r\n                                    MinWidth="250"                                    \r\n                                    Binding="{Binding CategorieNom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_EnsembleNom}" \r\n                                    MinWidth="250"       \r\n                                    Width="*"\r\n                                    Binding="{Binding EnsembleNom}"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Le ",(0,t.jsx)(r.strong,{children:"DataGrid"})," n'a pas besoin d'afficher le ",(0,t.jsx)(r.strong,{children:"Id"})," des cl\xe9s \xe9trang\xe8res, donc il n'y a pas de colonne pour ceci."]}),"\n",(0,t.jsxs)(r.p,{children:["\xc9galement, la convention pour un bool\xe9en est d'utiliser un ",(0,t.jsx)(r.strong,{children:"DataGridCheckBoxColumn"}),"."]}),"\n",(0,t.jsxs)(r.p,{children:["Pour la colonne ",(0,t.jsx)(r.strong,{children:"PrixRevente"}),", il y a un format d'appliquer dans la propri\xe9t\xe9 ",(0,t.jsx)(r.strong,{children:"Binding"}),". Il faut s'assurer que le prix a toujours 2 d\xe9cimales."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:'Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}"\n'})}),"\n",(0,t.jsxs)(r.p,{children:["Dans le fichier ",(0,t.jsx)(r.strong,{children:"UcListeCartes.xaml.cs"}),", il faut ajouter l'\xe9v\xe9nement pour le chargement automatique."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"private async void UserControl_Loaded(object sender, RoutedEventArgs e)\r\n {\r\n     if (this.DataContext != null)\r\n     {\r\n         if (this.DataContext is ListeCartesVM)\r\n         {\r\n             await ((ListeCartesVM)this.DataContext).ObtenirListeCommande.ExecuteAsync(null);\r\n         }\r\n     }\r\n }\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,t.jsxs)(r.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,t.jsx)(r.strong,{children:"ViewModel"})," et la ",(0,t.jsx)(r.strong,{children:"Vue"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"                \r\n        mc:Ignorable="d"         \r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:HelloWorldVM}">\r\n            \x3c!--\xc0 retirer \xe9ventuellement--\x3e\r\n            <v:UcHelloWorld />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCategoriesVM}">\r\n            <v:UcListeCategories />\r\n        </DataTemplate>\r\n\t\t//highlight-start\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCartesVM}">\r\n            <v:UcListeCartes />\r\n        </DataTemplate>\r\n\t\t//highlight-end\r\n    </Window.Resources>\r\n    <Grid>\r\n        <ContentControl  Content="{Binding VMActif}" />\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,t.jsxs)(r.p,{children:["La ligne 19 \xe0 21 indique que lorsque le ",(0,t.jsx)(r.strong,{children:"DataContext"})," est de type ",(0,t.jsx)(r.strong,{children:"ListeCategoriesVM"})," (ligne 19), il faut utiliser le contr\xf4le utilisateur ",(0,t.jsx)(r.strong,{children:"UcListeCategories"})," (ligne 20)."]}),"\n",(0,t.jsxs)(r.p,{children:["La ligne 22  \xe0 24 indique que lorsque le ",(0,t.jsx)(r.strong,{children:"DataContext"})," est de type ",(0,t.jsx)(r.strong,{children:"ListeCartesVM"})," (ligne 19), il faut utiliser le contr\xf4le utilisateur ",(0,t.jsx)(r.strong,{children:"UcListeCartes"})," (ligne 23)."]}),"\n",(0,t.jsxs)(r.p,{children:["\xc0 la ligne 27, lorsque le ",(0,t.jsx)(r.strong,{children:"Content"})," du ",(0,t.jsx)(r.strong,{children:"ContentControl"})," sera un ",(0,t.jsx)(r.strong,{children:"ViewModel"})," de la liste des ressources, il chargera le contr\xf4le utilisateur correspondant."]}),"\n",(0,t.jsx)(r.h3,{id:"test---mainwindowvm",children:"Test - MainWindowVM"}),"\n",(0,t.jsxs)(r.p,{children:["Dans la classe ",(0,t.jsx)(r.strong,{children:"MainWindowVM.cs"}),", il faut assigner ",(0,t.jsx)(r.strong,{children:"ListeCategoriesVM"})," \xe0 la propri\xe9t\xe9 ",(0,t.jsx)(r.strong,{children:"VMActif"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class MainWindowVM : BaseVM\r\n{    \r\n    public MainWindowVM(IServiceProvider serviceProvider)\r\n\t{   \r\n        //S\xe9lectionner le ViewModel de d\xe9marrage\r\n        VMActif = serviceProvider.GetRequiredService<ListeCartesVM>();\r\n    }\r\n\r\n    public BaseVM VMActif { get; set; }    \r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"D\xe9marrez l'application."}),"\n",(0,t.jsx)(r.h3,{id:"alignement-\xe0-droite-des-nombres",children:"Alignement \xe0 droite des nombres"}),"\n",(0,t.jsx)(r.p,{children:"Dans une grille, les nombres sont g\xe9n\xe9ralement align\xe9s \xe0 droite pour faciliter la lecture."}),"\n",(0,t.jsxs)(r.p,{children:["Pour \xeatre en mesure de le faire, il faut ajouter un style dans la d\xe9finition de la colonne.\r\nModifiez ",(0,t.jsx)(r.strong,{children:"UcListeCartes.xaml"}),", aux lignes 66-68"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xaml",metastring:'title="Ne pas copier"',children:'<DataGridTextColumn Header="{lex:Loc Col_Vie}" \r\n                    MinWidth="50"                                    \r\n                    Binding="{Binding Vie}">\r\n    <DataGridTextColumn.ElementStyle>\r\n        <Style>\r\n            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n        </Style>\r\n    </DataGridTextColumn.ElementStyle>\r\n</DataGridTextColumn>\n'})}),"\n",(0,t.jsxs)(r.p,{children:["La balise ",(0,t.jsx)(r.strong,{children:"<DataGridTextColumn.ElementStyle>"})," permet de sp\xe9cifier le style pour le contenu de la colonne."]}),"\n",(0,t.jsxs)(r.p,{children:["Il est important de mettre ",(0,t.jsx)(r.strong,{children:"Control."})," dans la propri\xe9t\xe9 pour indiquer que la valeur s'applique au contenu de la cellule au complet. Il est possible de faire des cellules avanc\xe9es avec plusieurs sous-contr\xf4les dans son contenu. Il serait possible d'appliquer un style \xe0 seulement un des \xe9l\xe9ments de la cellule."]}),"\n",(0,t.jsx)(r.p,{children:"Voici le fichier au complet avec les alignements pour tous les champs num\xe9riques."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCartes"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCartes"             \r\n             d:DataContext="{d:DesignInstance vm:ListeCartesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="{lex:Loc Titre}"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCartes}"\r\n                  SelectedItem="{Binding CarteSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="{lex:Loc Col_CarteId}"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CarteId}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Nom}"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Vie}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Vie}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Armure}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Armure}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Attaque}" \r\n                                    MinWidth="50"                               \r\n                                    Binding="{Binding Attaque}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridCheckBoxColumn Header="{lex:Loc Col_EstRare}" \r\n                                        MinWidth="50"                                    \r\n                                        Binding="{Binding EstRare}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_PrixRevente}" \r\n                                    MinWidth="50"                                   \r\n                                    Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>                            \r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_CategorieNom}" \r\n                                    MinWidth="250"                                    \r\n                                    Binding="{Binding CategorieNom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_EnsembleNom}" \r\n                                    MinWidth="250"       \r\n                                    Width="*"\r\n                                    Binding="{Binding EnsembleNom}"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})})]})}function u(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>a});var t=n(7294);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);