"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[1332],{5724:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=t(5893),i=t(1151);const s={sidebar_position:450,draft:!1},a="Liste des cartes de l'utilisateur",l={id:"WPF partie 4/liste_carte_utilisateur",title:"Liste des cartes de l'utilisateur",description:"La vue sera associ\xe9e \xe0 la table pivot UtilisateurCarte. Cette table est la relation plusieurs \xe0 plusieurs des tables Carte et Utilisateur.",source:"@site/docs/76-WPF partie 4/liste_carte_utilisateur.md",sourceDirName:"76-WPF partie 4",slug:"/WPF partie 4/liste_carte_utilisateur",permalink:"/4N1_2024/docs/WPF partie 4/liste_carte_utilisateur",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:450,frontMatter:{sidebar_position:450,draft:!1},sidebar:"NotesSidebar",previous:{title:"Masquer le menu",permalink:"/4N1_2024/docs/WPF partie 4/masquer_menu"},next:{title:"Menu et s\xe9curit\xe9",permalink:"/4N1_2024/docs/WPF partie 4/securite"}},o={},u=[{value:"SuperCarte.EF",id:"supercarteef",level:2},{value:"Ajout de donn\xe9es par Seed",id:"ajout-de-donn\xe9es-par-seed",level:3},{value:"SuperCarte.Core",id:"supercartecore",level:2},{value:"Cr\xe9ation du mod\xe8le du domaine - QuantiteCarteDetailModel",id:"cr\xe9ation-du-mod\xe8le-du-domaine---quantitecartedetailmodel",level:3},{value:"M\xe9thode ObtenirCartesUtilisateurAsync - UtilisateurCarteRepo",id:"m\xe9thode-obtenircartesutilisateurasync---utilisateurcarterepo",level:3},{value:"Cr\xe9ation du service - UtilisateurCarteService",id:"cr\xe9ation-du-service---utilisateurcarteservice",level:3},{value:"SuperCarte.WPF",id:"supercartewpf",level:2},{value:"Enregistrement du service - SCServiceExtensions",id:"enregistrement-du-service---scserviceextensions",level:3},{value:"Cr\xe9ation du ViewModel - ListeMesCartesVM",id:"cr\xe9ation-du-viewmodel---listemescartesvm",level:3},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions",level:3},{value:"Cr\xe9ation de la vue - UcListeMesCartes.xaml",id:"cr\xe9ation-de-la-vue---uclistemescartesxaml",level:3},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",level:3},{value:"Modification du ViewModel initial apr\xe8s la connexion - ConnexionVM",id:"modification-du-viewmodel-initial-apr\xe8s-la-connexion---connexionvm",level:3}];function d(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"liste-des-cartes-de-lutilisateur",children:"Liste des cartes de l'utilisateur"}),"\n",(0,n.jsxs)(r.p,{children:["La vue sera associ\xe9e \xe0 la table pivot ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"}),". Cette table est la relation ",(0,n.jsx)(r.strong,{children:"plusieurs \xe0 plusieurs"})," des tables ",(0,n.jsx)(r.strong,{children:"Carte"})," et ",(0,n.jsx)(r.strong,{children:"Utilisateur"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Elle permet d'indiquer les cartes qu'un utilisateur poss\xe8de et les utilisateurs que les cartes poss\xe8dent."}),"\n",(0,n.jsxs)(r.p,{children:["La table ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"})," a \xe9galement un champ propre pour indiquer le nombre de cartes physiques que l'utilisateur poss\xe8de pour une carte sp\xe9cifique."]}),"\n",(0,n.jsx)(r.p,{children:"Pour faire la liste, il faut d\xe9terminer les champs qui sont n\xe9cessaires \xe0 afficher. \xc9tant donn\xe9 que la vue est la liste des cartes d'un utilisateur, il n'est pas n\xe9cessaire d'afficher l'information de l'utilisateur dans la liste. Par contre, il faut un minimum d'information pour la carte. Il faut \xe9galement inclure la quantit\xe9."}),"\n",(0,n.jsx)(r.h2,{id:"supercarteef",children:"SuperCarte.EF"}),"\n",(0,n.jsx)(r.h3,{id:"ajout-de-donn\xe9es-par-seed",children:"Ajout de donn\xe9es par Seed"}),"\n",(0,n.jsxs)(r.p,{children:["Il faut ajouter des donn\xe9es pour la table ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"}),", sinon il ne sera pas possible de voir le fonctionnement de la liste."]}),"\n",(0,n.jsxs)(r.p,{children:["Il faut ajouter des cartes pour l'utilisateur ",(0,n.jsx)(r.strong,{children:"fsthilaire"})," et l'utilisateur ",(0,n.jsx)(r.strong,{children:"tstark"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Il y a seulement 3 cartes, il faut en ajouter quelques-unes."}),"\n",(0,n.jsxs)(r.p,{children:["Voici les enregistrements ",(0,n.jsx)(r.strong,{children:"Carte"})," \xe0 ajouter dans la m\xe9thode ",(0,n.jsx)(r.strong,{children:"Seed()"})," de la classe ",(0,n.jsx)(r.strong,{children:"SuperCarteContext"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Il faut ajouter ces cartes dans le tableau ",(0,n.jsx)(r.strong,{children:"Carte[]"})," qui est d\xe9j\xe0 dans le Seed"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'//Nouvelles cartes\r\n    new Carte()\r\n    {\r\n        CarteId = 4,\r\n        Nom = "Rider",\r\n        Armure = 11,\r\n        Vie = 45,\r\n        Attaque = 35,\r\n        EstRare = true,\r\n        PrixRevente = 3.98m,\r\n        CategorieId = 2,\r\n        EnsembleId = 1\r\n    },\r\n    new Carte()\r\n    {\r\n        CarteId = 5,\r\n        Nom = "Troll",\r\n        Armure = 0,\r\n        Vie = 25,\r\n        Attaque = 15,\r\n        EstRare = false,\r\n        PrixRevente = 0.19m,\r\n        CategorieId = 2,\r\n        EnsembleId = 1\r\n    },\r\n    new Carte()\r\n    {\r\n        CarteId = 6,\r\n        Nom = "Dragon de glace",\r\n        Armure = 10,\r\n        Vie = 35,\r\n        Attaque = 10,\r\n        EstRare = false,\r\n        PrixRevente = 0.09m,\r\n        CategorieId = 1,\r\n        EnsembleId = 1\r\n    }\r\n\r\n\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Voici les enregistrements ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"})," \xe0 ajouter dans la m\xe9thode ",(0,n.jsx)(r.strong,{children:"Seed()"})," de la classe ",(0,n.jsx)(r.strong,{children:"SuperCarteContext"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"UtilisateurCarte[] utilisateurCartes = \r\n{\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 1, //fsthilaire\r\n        CarteId = 1, //Lion des marais\r\n        Quantite = 2\r\n    },\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 1, //fsthilaire\r\n        CarteId = 3, //Grunty\r\n        Quantite = 3\r\n    },\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 1, //fsthilaire\r\n        CarteId = 4, //Rider\r\n        Quantite = 1\r\n    },\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 1, //fsthilaire\r\n        CarteId = 2, //Corbeau vampire\r\n        Quantite = 5\r\n    },\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 3, //tstark\r\n        CarteId = 1, //Lion des marais\r\n        Quantite = 5\r\n    },\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 3, //tstark\r\n        CarteId = 3, //Grunty\r\n        Quantite = 1\r\n    },\r\n    new UtilisateurCarte()\r\n    {\r\n        UtilisateurId = 3, //tstark\r\n        CarteId = 6, //Dragon de glace\r\n        Quantite = 2\r\n    },\r\n};\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Et ajoutez la ligne pour associer le nouveau tableau ",(0,n.jsx)(r.strong,{children:"utilisateurCartes"})," \xe0 sa table"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"        modelBuilder.Entity<UtilisateurCarte>().HasData(utilisateurCartes);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans la ",(0,n.jsx)(r.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,n.jsx)(r.strong,{children:"Projet par d\xe9faut"})," de ",(0,n.jsx)(r.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,n.jsx)(r.strong,{children:"SuperCarte.EF"}),". \xc0 ce stade, il y a ",(0,n.jsx)(r.strong,{children:"plusieurs projets"})," et celui s\xe9lectionn\xe9 par d\xe9faut sera ",(0,n.jsx)(r.strong,{children:"WPF"}),". Il est important de le modifier dans la liste."]}),"\n",(0,n.jsxs)(r.p,{children:["Pour ce projet, utilisez cette chaine de connexion. Le nom de la base de donn\xe9es est ",(0,n.jsx)(r.strong,{children:"eDA_4N1_SuperCarte"}),". Modifiez le ",(0,n.jsx)(r.strong,{children:"DA"})," par votre num\xe9ro d'admission."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;"\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Voici la commande avec le ",(0,n.jsx)(r.strong,{children:"Trusted_Connection=True;"})," , si vous avez l'erreur ",(0,n.jsx)(r.strong,{children:"SSL"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;Trust Server Certificate=True;"\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Ensuite, il faut cr\xe9er la migration ",(0,n.jsx)(r.strong,{children:"Seed_CartesEtUtilisateurCartes"})," avec ",(0,n.jsx)(r.strong,{children:"Add-Migration"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Add-Migration Seed_CartesEtUtilisateurCartes -StartupProject SuperCarte.EF\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,n.jsx)(r.strong,{children:"Seed_CartesEtUtilisateurCartes"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration Seed_CartesEtUtilisateurCartes\n"})}),"\n",(0,n.jsx)(r.h2,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,n.jsxs)(r.p,{children:["Il faut ajouter la logique applicative pour le module ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Il faut faire une requ\xeate qui retourne la liste compl\xe8te des cartes pour un utilisateur."}),"\n",(0,n.jsx)(r.p,{children:"Mais dans quelle classe mettre cette requ\xeate ?"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Il serait possible d'inclure cette requ\xeate dans le ",(0,n.jsx)(r.strong,{children:"Repository"})," et le ",(0,n.jsx)(r.strong,{children:"Service"})," de ",(0,n.jsx)(r.strong,{children:"Carte"}),", car l'information retourn\xe9e sera pour des cartes."]}),"\n",(0,n.jsxs)(r.li,{children:["Il serait aussi possible de la mettre dans le module ",(0,n.jsx)(r.strong,{children:"Utilisateur"}),", car c'est en fonction de l'utilisateur."]}),"\n",(0,n.jsxs)(r.li,{children:["Et finalement, la 3e option est d'utiliser le module ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"}),", car c'est l'entit\xe9 centrale."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Les 3 options sont bonnes. Pour ce projet et le ",(0,n.jsx)(r.strong,{children:"TP 3"}),", ce sera la 3e option qui sera utilis\xe9e."]}),"\n",(0,n.jsx)(r.h3,{id:"cr\xe9ation-du-mod\xe8le-du-domaine---quantitecartedetailmodel",children:"Cr\xe9ation du mod\xe8le du domaine - QuantiteCarteDetailModel"}),"\n",(0,n.jsxs)(r.p,{children:["Le mod\xe8le ",(0,n.jsx)(r.strong,{children:"CarteDetailModel"})," a \xe9t\xe9 utilis\xe9 pour la liste des cartes."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="NE PAS COPIER"',children:"public class CarteDetailModel\r\n{\r\n    public int CarteId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public short Vie { get; set; }\r\n\r\n    public short Armure { get; set; }\r\n\r\n    public short Attaque { get; set; }\r\n\r\n    public bool EstRare { get; set; }\r\n\r\n    public decimal PrixRevente { get; set; }\r\n\r\n    public int CategorieId { get; set; }\r\n\r\n    public string CategorieNom { get; set; } = null!;\r\n\r\n    public int EnsembleId { get; set; }\r\n\r\n    public string EnsembleNom { get; set; } = null!;\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Par contre, pour la gestion d'une seule carte, l'information des cl\xe9s \xe9trang\xe8res n'est pas n\xe9cessaire."}),"\n",(0,n.jsxs)(r.p,{children:["Il y a des programmeurs qui utilisent la m\xeame classe. La propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"public string EnsembleNom"})," n'accepte pas les ",(0,n.jsx)(r.strong,{children:"null"})," par sa d\xe9finition. En laissant le champ vide, \xe7a indique tout de m\xeame au programmeur qu'il devrait avoir une valeur. C'est le m\xeame principe que le mod\xe8le de donn\xe9es et les propri\xe9t\xe9s de navigation de ",(0,n.jsx)(r.strong,{children:"Entity Framework"}),". \xc7a \xe9vite de cr\xe9er plusieurs classes dans un projet."]}),"\n",(0,n.jsxs)(r.p,{children:["Il y a des programmeurs qui pr\xe9f\xe8rent avoir des mod\xe8les de donn\xe9es qui ont seulement les donn\xe9es n\xe9cessaires pour diminuer la taille des objets en m\xe9moire, le temps de transfert et d'\xe9viter d'avoir une ",(0,n.jsx)(r.strong,{children:"m\xe9ga-classe"})," avec une bonne proportion des champs inutilis\xe9s selon le cas d'utilisation. Il faut donc une 2e classe pour respecter cette vision."]}),"\n",(0,n.jsxs)(r.p,{children:["Les 2 visions ont leurs avantages et leurs inconv\xe9nients, mais pour ce projet et le ",(0,n.jsx)(r.strong,{children:"TP 3"}),", il faudra avoir 2 classes diff\xe9rentes."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"CarteModel"})," qu'il faudra utiliser sans le d\xe9tail de la cl\xe9 \xe9trang\xe8re."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une carte\r\n/// </summary>\r\npublic class CarteModel\r\n{\r\n    public int CarteId { get; set; }\r\n    public string Nom { get; set; } = null!;\r\n    public short Vie { get; set; }\r\n    public short Armure { get; set; }\r\n    public short Attaque { get; set; }\r\n    public bool EstRare { get; set; }\r\n    public decimal PrixRevente { get; set; }\r\n    public int CategorieId { get; set; }\r\n    public int EnsembleId { get; set; }\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["C'est pratiquement la m\xeame classe. Il y a beaucoup de r\xe9p\xe9tition et ce n'est pas tr\xe8s ",(0,n.jsx)(r.strong,{children:"DRY"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Ce sont des classes, donc il est possible d'utiliser l'h\xe9ritage pour \xe9viter la r\xe9p\xe9tition des propri\xe9t\xe9s. Si une nouvelle propri\xe9t\xe9 de base est ajout\xe9e, il ne sera pas n\xe9cessaire de l'ajouter dans les autres classes."}),"\n",(0,n.jsxs)(r.p,{children:["Modifiez la classe ",(0,n.jsx)(r.strong,{children:"CarteDetailModel"})," pour utiliser l'h\xe9ritage et ajouter les champs n\xe9cessaires."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une carte avec le d\xe9tail de ses cl\xe9s \xe9trang\xe8res\r\n/// </summary>\r\npublic class CarteDetailModel : CarteModel\r\n{\r\n    public string CategorieNom { get; set; } = null!;\r\n\r\n    public string EnsembleNom { get; set; } = null!;\r\n}\n"})}),"\n",(0,n.jsxs)(r.admonition,{type:"info",children:[(0,n.jsx)(r.mdxAdmonitionTitle,{}),(0,n.jsxs)(r.p,{children:["Pour le ",(0,n.jsx)(r.strong,{children:"TP 3"}),", vous devez appliquer cette approche pour les modules qui utilisent des cl\xe9s \xe9trang\xe8res."]})]}),"\n",(0,n.jsxs)(r.p,{children:["Finalement, il faut cr\xe9er la classe ",(0,n.jsx)(r.strong,{children:"QuantiteCarteDetailModel"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"Models"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Cette classe n'a pas de propri\xe9t\xe9 pour identifier l'utilisateur. La raison pour ceci est que le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," ne doit pas prendre l'information de l'utilisateur \xe0 partir de cet objet, mais \xe0 partir du ",(0,n.jsx)(r.strong,{children:"Authentificateur"}),". Il serait possible de cr\xe9er une classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteDetailModel"})," qui contiendrait l'information de l'utilisateur et de la carte et d'ignorer tout simplement les \xe9l\xe9ments de l'utilisateur. Cette approche permet de cr\xe9er moins de classe, mais la quantit\xe9 d'information en m\xe9moire augmente."]}),"\n",(0,n.jsxs)(r.p,{children:["Cette classe h\xe9rite de la classe ",(0,n.jsx)(r.strong,{children:"CarteDetailModel"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information compl\xe8te d'une carte et avec une quantit\xe9\r\n/// </summary>\r\npublic class QuantiteCarteDetailModel : CarteDetailModel\r\n{\r\n    public short Quantite {  get; set; }\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"m\xe9thode-obtenircartesutilisateurasync---utilisateurcarterepo",children:"M\xe9thode ObtenirCartesUtilisateurAsync - UtilisateurCarteRepo"}),"\n",(0,n.jsx)(r.p,{children:"Il faut ajouter une m\xe9thode qui retourne la liste des cartes pour un utilisateur."}),"\n",(0,n.jsx)(r.p,{children:"La requ\xeate fait \xe9galement un tri pour regrouper les cartes de la m\xeame cat\xe9gorie."}),"\n",(0,n.jsxs)(r.p,{children:["Dans l'interface ",(0,n.jsx)(r.strong,{children:"IUtilisateurCarteRepo"}),", ajoutez la m\xe9thode ci-dessous."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"/// <summary>\r\n/// Obtenir la liste des cartes d'un utilisateur avec sa quantit\xe9 en asynchrone.\r\n/// La liste est tri\xe9e par le nom de la cat\xe9gorie et ensuite par le nom de la carte.\r\n/// </summary>\r\n/// <param name=\"utilisateurId\">La cl\xe9 de l'utilisateur</param>\r\n/// <returns>Liste des cartes avec la quantit\xe9</returns>\r\nTask<List<QuantiteCarteDetailModel>> ObtenirCartesUtilisateurAsync(int utilisateurId);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteRepo"}),", ajoutez la m\xe9thode ci-dessous."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<List<QuantiteCarteDetailModel>> ObtenirCartesUtilisateurAsync(int utilisateurId)\r\n{\r\n    return await (from lqUtilisateurCarte in _bd.UtilisateurCarteTb\r\n                  where\r\n                      lqUtilisateurCarte.UtilisateurId == utilisateurId\r\n                  orderby\r\n                      lqUtilisateurCarte.Carte.Categorie.Nom,                          \r\n                      lqUtilisateurCarte.Carte.Nom\r\n                  select\r\n                      new QuantiteCarteDetailModel()\r\n                      {\r\n                          CarteId = lqUtilisateurCarte.Carte.CarteId,\r\n                          Nom = lqUtilisateurCarte.Carte.Nom,\r\n                          Vie = lqUtilisateurCarte.Carte.Vie,\r\n                          Armure = lqUtilisateurCarte.Carte.Armure,\r\n                          Attaque = lqUtilisateurCarte.Carte.Attaque,\r\n                          EstRare = lqUtilisateurCarte.Carte.EstRare,\r\n                          PrixRevente = lqUtilisateurCarte.Carte.PrixRevente,\r\n                          CategorieId = lqUtilisateurCarte.Carte.CategorieId,\r\n                          CategorieNom = lqUtilisateurCarte.Carte.Categorie.Nom,\r\n                          EnsembleId = lqUtilisateurCarte.Carte.EnsembleId,\r\n                          EnsembleNom = lqUtilisateurCarte.Carte.Ensemble.Nom,\r\n                          Quantite = lqUtilisateurCarte.Quantite\r\n                      }).ToListAsync();\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"\xc9tant donn\xe9 que nous avons maintenant une m\xe9thode Async, il faut ajouter ce using au d\xe9but"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using Microsoft.EntityFrameworkCore;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"cr\xe9ation-du-service---utilisateurcarteservice",children:"Cr\xe9ation du service - UtilisateurCarteService"}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,n.jsx)(r.strong,{children:"IUtilisateurCarteService.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le UtilisateurCarte\r\n/// </summary>\r\npublic interface IUtilisateurCarteService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste des cartes d'un utilisateur avec sa quantit\xe9 en asynchrone.\r\n    /// La liste est tri\xe9e par le nom de la cat\xe9gorie et ensuite par le nom de la carte.\r\n    /// </summary>\r\n    /// <param name=\"utilisateurId\">La cl\xe9 de l'utilisateur</param>\r\n    /// <returns>Liste des cartes avec la quantit\xe9</returns>\r\n    Task<List<QuantiteCarteDetailModel>> ObtenirCartesUtilisateurAsync(int utilisateurId);\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteService.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["La m\xe9thode appelle tout simplement le ",(0,n.jsx)(r.strong,{children:"Repository"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le UtilisateurCarte\r\n/// </summary>\r\npublic class UtilisateurCarteService : IUtilisateurCarteService\r\n{\r\n    private readonly IUtilisateurCarteRepo _utilisateurCarteRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="utilisateurCarteRepo">Repository UtilisateurCarte</param>\r\n    public UtilisateurCarteService(IUtilisateurCarteRepo utilisateurCarteRepo)\r\n\t{\r\n        _utilisateurCarteRepo = utilisateurCarteRepo;\r\n    }\r\n\r\n    public async Task<List<QuantiteCarteDetailModel>> ObtenirCartesUtilisateurAsync(int utilisateurId)\r\n    {\r\n        return await _utilisateurCarteRepo.ObtenirCartesUtilisateurAsync(utilisateurId);\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.h2,{id:"supercartewpf",children:"SuperCarte.WPF"}),"\n",(0,n.jsx)(r.h3,{id:"enregistrement-du-service---scserviceextensions",children:"Enregistrement du service - SCServiceExtensions"}),"\n",(0,n.jsxs)(r.p,{children:["Il faut enregistrer le ",(0,n.jsx)(r.strong,{children:"Service"})," dans la classe ",(0,n.jsx)(r.strong,{children:"SCServiceExtensions"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public static void EnregistrerServices(this IServiceCollection services)\r\n{\r\n    services.AddScoped<ICategorieService, CategorieService>();\r\n    services.AddScoped<ICarteService, CarteService>();\r\n    services.AddScoped<IRoleService, RoleService>();\r\n    services.AddScoped<IUtilisateurService, UtilisateurService>();\r\n    //highlight-next-line\r\n    services.AddScoped<IUtilisateurCarteService, UtilisateurCarteService>();\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"cr\xe9ation-du-viewmodel---listemescartesvm",children:"Cr\xe9ation du ViewModel - ListeMesCartesVM"}),"\n",(0,n.jsxs)(r.p,{children:["Le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," sera accessible pour tous les r\xf4les (",(0,n.jsx)(r.strong,{children:"Administrateur"})," et ",(0,n.jsx)(r.strong,{children:"Utilisateur"}),") (ligne 11)."]}),"\n",(0,n.jsxs)(r.p,{children:["La m\xe9canique est pratiquement identique aux autres listes. Il serait possible de faire une g\xe9n\xe9ralisation avec le l'h\xe9ritage et m\xeame avec des types g\xe9n\xe9riques. Ceci demanderait beaucoup de travail pour mettre la structure en place, mais pour un projet d'envergure, ce serait b\xe9n\xe9fique. Il n'y aura pas d'exemple de g\xe9n\xe9ralisation du ",(0,n.jsx)(r.strong,{children:"ViewModel"})," dans ce projet et ce ne doit pas \xeatre fait pour le travail pratique."]}),"\n",(0,n.jsxs)(r.p,{children:["Par contre, lorsque la commande ",(0,n.jsx)(r.strong,{children:"ObtenirListe"})," appelle le service, il doit lui fournir le ",(0,n.jsx)(r.strong,{children:"UtilisateurId"})," de l'utilisateur en cours. La cl\xe9 est disponible dans la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurAuthentifieModel"}),". La classe d'assistance ",(0,n.jsx)(r.strong,{children:"Authentificateur"})," poss\xe8de la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"UtilisateurAuthentifie"})," (ligne 62) . Par cette propri\xe9t\xe9, il est possible d'obtenir l'utilisateur en cours de connexion."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"ListeMesCartesVM.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"ViewModels"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.WPF.Views;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeMesCartes\r\n/// </summary>\r\npublic class ListeMesCartesVM : BaseVM\r\n{\r\n    //highlight-next-line\r\n    private readonly string[] _rolesAutorises = { "Administrateur", "Utilisateur" };\r\n\r\n    #region D\xe9pendances\r\n    private readonly IAuthentificateur _authentificateur;\r\n    private readonly INotification _notification;\r\n    private readonly INavigateur _navigateur;\r\n    private readonly IUtilisateurCarteService _utilisateurCarteService;\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private List<QuantiteCarteDetailModel> _lstCartes;\r\n    private QuantiteCarteDetailModel? _carteSelection;\r\n    private bool _estEnTravail = false;\r\n    #endregion\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="authentificateur">La classe d\'assistance d\'authentification</param>\r\n    /// <param name="notification">La classe d\'assistance pour la notification</param>\r\n    /// <param name="utilisateurCarteService">Service du mod\xe8le UtilisateurCarte</param>\r\n    /// <param name="navigateur">La classe d\'assistance Navigateur</param>\r\n    public ListeMesCartesVM(IAuthentificateur authentificateur, INotification notification,\r\n        IUtilisateurCarteService utilisateurCarteService, INavigateur navigateur)\r\n    {\r\n        _authentificateur = authentificateur;\r\n        _notification = notification;        \r\n        if (_authentificateur.EstAutorise(_rolesAutorises))\r\n        {\r\n            _navigateur = navigateur;\r\n            _utilisateurCarteService = utilisateurCarteService;\r\n\r\n            ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n        }\r\n        else\r\n        {\r\n            _notification.MessageErreur("Acc\xe8s non autoris\xe9.", "Vous n\'avez pas acc\xe8s \xe0 cette vue.");\r\n        }\r\n    }\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        if (_authentificateur.EstAutorise(_rolesAutorises))\r\n        {\r\n            ListeCartes = await _utilisateurCarteService\r\n            //highlight-next-line\r\n                .ObtenirCartesUtilisateurAsync(_authentificateur.UtilisateurAuthentifie!.UtilisateurId);\r\n        }\r\n        else\r\n        {\r\n            _notification.MessageErreur("Acc\xe8s non autoris\xe9.", "Vous n\'avez pas acc\xe8s \xe0 cette fonctionnalit\xe9.");\r\n        }\r\n\r\n        EstEnTravail = false;\r\n    }\r\n    #endregion\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; private set; }\r\n    #endregion\r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n    public List<QuantiteCarteDetailModel> ListeCartes\r\n    {\r\n        get\r\n        {\r\n            return _lstCartes;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCartes, value);\r\n        }\r\n    }\r\n\r\n    public QuantiteCarteDetailModel? CarteSelection\r\n    {\r\n        get\r\n        {\r\n            return _carteSelection;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _carteSelection, value);\r\n        }\r\n    }\r\n    #endregion\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"enregistrer-le-viewmodel---scviewmodelextensions",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,n.jsxs)(r.p,{children:["Dans la classe ",(0,n.jsx)(r.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,n.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n    {\r\n        services.AddSingleton<MainWindowVM>();\r\n        services.AddTransient<ListeCategoriesVM>();\r\n        services.AddTransient<ListeCartesVM>();\r\n        services.AddTransient<GestionCategorieVM>();\r\n        services.AddTransient<GestionUtilisateurVM>();\r\n        services.AddTransient<ConnexionVM>();\r\n        //highlight-next-line\r\n        services.AddTransient<ListeMesCartesVM>();\r\n    }\n"})}),"\n",(0,n.jsx)(r.h3,{id:"cr\xe9ation-de-la-vue---uclistemescartesxaml",children:"Cr\xe9ation de la vue - UcListeMesCartes.xaml"}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez un ",(0,n.jsx)(r.strong,{children:"Contr\xf4le utilisateur (WPF)"})," nomm\xe9 ",(0,n.jsx)(r.strong,{children:"UcListeMesCartes.xaml"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"Views"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["La liste est identique \xe0 la liste des cartes, mais il y a la colonne ",(0,n.jsx)(r.strong,{children:"Quantite"})," en plus (ligne 66)."]}),"\n",(0,n.jsxs)(r.p,{children:["La localisation n'est pas faite pour les colonnes de la grille. Dans une application compl\xe8te, il faudrait cr\xe9er un nouveau fichier ressource pour la vue. Dans ce cas-ci, il y a des r\xe9p\xe9titions de terme, car il y a beaucoup de colonnes identiques dans la vue ",(0,n.jsx)(r.strong,{children:"UcListeCartes.xaml"}),". Avec l'approche 1 fichier ressource par vue, il faudra recr\xe9er toutes les valeurs. Il pourrait \xeatre int\xe9ressant de faire un fichier ressource pour les \xe9l\xe9ments du mod\xe8le du domaine. Dans ce cas, il y aurait un fichier pour ",(0,n.jsx)(r.strong,{children:"CarteModel"}),", un autre pour ",(0,n.jsx)(r.strong,{children:"CarteDetailModel"})," et finalement un dernier pour ",(0,n.jsx)(r.strong,{children:"QuantiteCarteDetailModel"}),". Cette vue devra utiliser les 3 fichiers ressources. Il peut \xeatre difficile de maintenir ce genre de structure, car si le mod\xe8le change, il faut s'assurer de respecter la m\xeame structure. Il aurait d'autres options \xe9galement pour \xe9viter la r\xe9p\xe9tition. Aucune des m\xe9thodes n'est parfaite malheureusement et il arrive souvent que le ",(0,n.jsx)(r.strong,{children:"DRY"})," ne soit pas parfaitement respect\xe9 pour les fichiers ressources."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeMesCartes"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCartes"             \r\n             d:DataContext="{d:DesignInstance vm:ListeMesCartesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Mes cartes"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCartes}"\r\n                  SelectedItem="{Binding CarteSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="Id"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CarteId}"/>\r\n\r\n                <DataGridTextColumn Header="Nom"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="Quantit\xe9"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding Quantite}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="Vie" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Vie}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="Armure" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Armure}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="Attaque" \r\n                                    MinWidth="50"                               \r\n                                    Binding="{Binding Attaque}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridCheckBoxColumn Header="Rare" \r\n                                        MinWidth="50"                                    \r\n                                        Binding="{Binding EstRare}"/>\r\n\r\n                <DataGridTextColumn Header="Prix de revente" \r\n                                    MinWidth="50"                                   \r\n                                    Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="Cat\xe9gorie" \r\n                                    MinWidth="250"                                    \r\n                                    Binding="{Binding CategorieNom}"/>\r\n\r\n                <DataGridTextColumn Header="Ensemble" \r\n                                    MinWidth="250"       \r\n                                    Width="*"\r\n                                    Binding="{Binding EnsembleNom}"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Il faut faire le chargement automatique. Il faut s'assurer que la commande n'est pas ",(0,n.jsx)(r.strong,{children:"null"})," avant de l'ex\xe9cuter."]}),"\n",(0,n.jsxs)(r.p,{children:["Dans le fichier ",(0,n.jsx)(r.strong,{children:"UcListeMesCartes.xaml.cs"}),", il faut impl\xe9menter l'\xe9v\xe9nement ",(0,n.jsx)(r.strong,{children:"UserControl_Loaded"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"private async void UserControl_Loaded(object sender, RoutedEventArgs e)\r\n{\r\n    if (this.DataContext != null)\r\n    {\r\n        if (this.DataContext is ListeMesCartesVM)\r\n        {\r\n            if (((ListeMesCartesVM)this.DataContext).ObtenirListeCommande != null)\r\n            {\r\n                await ((ListeMesCartesVM)this.DataContext).ObtenirListeCommande.ExecuteAsync(null);\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,n.jsxs)(r.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," et la ",(0,n.jsx)(r.strong,{children:"Vue"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Les lignes 36 \xe0 38 contiennent le lien entre ",(0,n.jsx)(r.strong,{children:"UcListeMesCartes"})," et ",(0,n.jsx)(r.strong,{children:"ListeMesCartesVM"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"                \r\n        mc:Ignorable="d"         \r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />\r\n        \r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:HelloWordVM}">\r\n            \x3c!--\xc0 retirer \xe9ventuellement--\x3e\r\n            <v:UcHelloWorld />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCategoriesVM}">\r\n            <v:UcListeCategories />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCartesVM}">\r\n            <v:UcListeCartes />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:GestionCategorieVM}">\r\n            <v:UcGestionCategorie />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:GestionUtilisateurVM}">\r\n            <v:UcGestionUtilisateur />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ConnexionVM}">\r\n            <v:UcConnexion />\r\n        </DataTemplate>\r\n        //highlight-start\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeMesCartesVM}">\r\n            <v:UcListeMesCartes />\r\n        </DataTemplate>\r\n        //highlight-end\r\n    </Window.Resources>\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto"/>\r\n            <RowDefinition Height="*"/>\r\n        </Grid.RowDefinitions>\r\n        <Menu Grid.Row="0" HorizontalContentAlignment="Stretch" VerticalAlignment="Stretch"\r\n              Visibility="{Binding Authentificateur.EstAuthentifie, Converter={StaticResource BooleanToVisibilityConverter}}">\r\n            <MenuItem Header="_Fichier">\r\n                <MenuItem Header="_Quitter" />\r\n            </MenuItem>\r\n            <MenuItem Header="_Administration">\r\n                <MenuItem Header="Liste des _cartes" Command="{Binding NaviguerListeCartesVMCommande}"/>\r\n                <MenuItem Header="Liste des c_at\xe9gories" Command="{Binding NaviguerListeCategoriesVMCommande}"/>\r\n            </MenuItem>\r\n            //highlight-next-line\r\n        </Menu>\r\n\r\n        <ContentControl Grid.Row="1"  Content="{Binding Navigateur.VMActif}" />                \r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,n.jsx)(r.h3,{id:"modification-du-viewmodel-initial-apr\xe8s-la-connexion---connexionvm",children:"Modification du ViewModel initial apr\xe8s la connexion - ConnexionVM"}),"\n",(0,n.jsxs)(r.p,{children:["Dans la classe ",(0,n.jsx)(r.strong,{children:"ConnexionVM"}),", il faut indiquer que le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," initial est ",(0,n.jsx)(r.strong,{children:"ListeMesCartesVM"}),". Il faut avoir une vue qui est accessible par tous. N'oubliez pas de le faire pour le ",(0,n.jsx)(r.strong,{children:"TP 3"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Modifiez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"AuthentifierAsync()"})," pour mettre ",(0,n.jsx)(r.strong,{children:"ListeMesCartesVM"})," (ligne 11) dans la classe ",(0,n.jsx)(r.strong,{children:"ConnexionVM"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"private async Task AuthentifierAsync()\r\n{\r\n    ChampsModifiables = false;\r\n    EstEnTravail = true;\r\n    EffacerErreurs();\r\n\r\n    bool authentifier = await _authentificateur.AuthentifierUtilisateurAsync(NomUtilisateur, MotPasse);\r\n\r\n    if (authentifier == true)\r\n    {\r\n        //highlight-next-line\r\n        _navigateur.Naviguer<ListeMesCartesVM>();\r\n    }\r\n    else\r\n    {\r\n        AjouterErreur(nameof(MotPasse), \"La combinaison du nom d'utilisateur et du mot de passe n'est pas valide.\");\r\n    }\r\n\r\n    EstEnTravail = false;\r\n    ChampsModifiables = true;\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Testez l'application avec les 3 utilisateurs. La liste sera diff\xe9rente pour chacun d'eux."})]})}function c(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>l,a:()=>a});var n=t(7294);const i={},s=n.createContext(i);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);