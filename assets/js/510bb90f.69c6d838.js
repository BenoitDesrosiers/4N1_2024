"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[9496],{5213:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var i=n(5893),t=n(1151);const s={sidebar_position:350,draft:!1},a="Gestion d'un utilisateur",l={id:"WPF partie 3/utilisateur",title:"Gestion d'un utilisateur",description:"Pour l'utilisateur, le validateur devra s'assurer que le nom d'utilisateur n'est pas d\xe9j\xe0 utilis\xe9.",source:"@site/docs/74-WPF partie 3/utilisateur.md",sourceDirName:"74-WPF partie 3",slug:"/WPF partie 3/utilisateur",permalink:"/4N1_2024/docs/WPF partie 3/utilisateur",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:350,frontMatter:{sidebar_position:350,draft:!1},sidebar:"NotesSidebar",previous:{title:"Localisation du code .cs",permalink:"/4N1_2024/docs/WPF partie 3/localisation"},next:{title:"gestion_carte",permalink:"/4N1_2024/docs/WPF partie 3/gestion_carte"}},o={},u=[{value:"SuperCarte.Core - Combobox",id:"supercartecore---combobox",level:2},{value:"Cr\xe9ation du mod\xe8le - ListeItem",id:"cr\xe9ation-du-mod\xe8le---listeitem",level:3},{value:"Ajout de ObtenirListeItem dans le Repository - RoleRepo",id:"ajout-de-obtenirlisteitem-dans-le-repository---rolerepo",level:3},{value:"Cr\xe9ation du service - RoleService",id:"cr\xe9ation-du-service---roleservice",level:3},{value:"SuperCarte.Core - Gestion",id:"supercartecore---gestion",level:2},{value:"Cr\xe9ation du mod\xe8le - UtilisateurModel",id:"cr\xe9ation-du-mod\xe8le---utilisateurmodel",level:3},{value:"M\xe9thode d&#39;extension - UtilisateurMapExtension",id:"m\xe9thode-dextension---utilisateurmapextension",level:3},{value:"Installation de la librairie BCrpyt.Net",id:"installation-de-la-librairie-bcrpytnet",level:3},{value:"Cr\xe9ation du service - UtilisateurService",id:"cr\xe9ation-du-service---utilisateurservice",level:3},{value:"SuperCarte.WPF",id:"supercartewpf",level:2},{value:"Enregistrer les services - SCServiceExtensions",id:"enregistrer-les-services---scserviceextensions",level:3},{value:"Cr\xe9ation du ViewModel - GestionUtilisateurVM",id:"cr\xe9ation-du-viewmodel---gestionutilisateurvm",level:3},{value:"Enregistrement du ViewModel - SCViewModelExtensions",id:"enregistrement-du-viewmodel---scviewmodelextensions",level:3},{value:"Cr\xe9ation de la vue - UcGestionUtilisateur.xaml",id:"cr\xe9ation-de-la-vue---ucgestionutilisateurxaml",level:3},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",level:3},{value:"Test - MainWindowVM",id:"test---mainwindowvm",level:2}];function d(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"gestion-dun-utilisateur",children:"Gestion d'un utilisateur"}),"\n",(0,i.jsx)(r.p,{children:"Pour l'utilisateur, le validateur devra s'assurer que le nom d'utilisateur n'est pas d\xe9j\xe0 utilis\xe9."}),"\n",(0,i.jsxs)(r.p,{children:["\xc9galement, il faut mettre une m\xe9canique pour le mot de passe. Il doit \xeatre ",(0,i.jsx)(r.strong,{children:"hach\xe9"})," avec l'algorithme ",(0,i.jsx)(r.strong,{children:"bcrypt"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Dans une fen\xeatre de gestion utilisateur, g\xe9n\xe9ralement, il est seulement possible de mettre un mot de passe lors de la cr\xe9ation. S'il l'administrateur doit r\xe9initialiser le mot de passe, il s'agit d'une action distincte. Donc pour cette gestion, il ne sera pas possible de modifier le mot de passe en mode ",(0,i.jsx)(r.strong,{children:"modification"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour la s\xe9lection du r\xf4le, il est pr\xe9f\xe9rable d'utiliser un ",(0,i.jsx)(r.strong,{children:"combobox"})," pour faire la s\xe9lection dans une liste. Il faut obtenir les \xe9l\xe9ments disponibles de la liste."]}),"\n",(0,i.jsx)(r.h2,{id:"supercartecore---combobox",children:"SuperCarte.Core - Combobox"}),"\n",(0,i.jsxs)(r.p,{children:["Cette section explique comment avoir les \xe9l\xe9ments n\xe9cessaires dans la logique d'affaires pour faire fonctionner une ",(0,i.jsx)(r.strong,{children:"ComboBox"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-mod\xe8le---listeitem",children:"Cr\xe9ation du mod\xe8le - ListeItem"}),"\n",(0,i.jsxs)(r.p,{children:["Le mod\xe8le ",(0,i.jsx)(r.strong,{children:"ListeItem"})," permet de cr\xe9er un item simple avec une valeur et un texte. La valeur est g\xe9n\xe9ralement la cl\xe9 et le texte est libell\xe9 qui repr\xe9sente bien la valeur. Le ",(0,i.jsx)(r.strong,{children:"Combobox"})," utilisera cette classe."]}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"ListeItem.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Models"})," du projet ",(0,i.jsx)(r.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient un couple Valeur et Texte pour les items g\xe9n\xe9riques\r\n/// </summary>\r\n/// <typeparam name="TValeur"></typeparam>\r\npublic class ListeItem<TValeur>\r\n{\r\n    public TValeur Valeur { get; set; }\r\n\r\n    public string Texte { get; set; }\r\n}\n'})}),"\n",(0,i.jsx)(r.p,{children:"La classe utilise un type g\xe9n\xe9rique pour la valeur."}),"\n",(0,i.jsx)(r.h3,{id:"ajout-de-obtenirlisteitem-dans-le-repository---rolerepo",children:"Ajout de ObtenirListeItem dans le Repository - RoleRepo"}),"\n",(0,i.jsxs)(r.p,{children:["Le ",(0,i.jsx)(r.strong,{children:"Repository"})," s'occupera de cr\xe9er une liste de ",(0,i.jsx)(r.strong,{children:"ListeItem"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez l'interface ",(0,i.jsx)(r.strong,{children:"SuperCarte.Core/Repositories/IRoleRepo.cs"})," pour le code ci-dessous."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic interface IRoleRepo : IBasePKUniqueRepo<Role,int>\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste des r\xf4les dans un objet listeItem\r\n    /// </summary>\r\n    /// <returns>Liste de r\xf4les dans un ListItem</returns>\r\n    List<ListeItem<int>> ObtenirListeItem();\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez la classe ",(0,i.jsx)(r.strong,{children:"RoleRepo.cs"})," pour le code ci-dessous."]}),"\n",(0,i.jsx)(r.admonition,{type:"info",children:(0,i.jsx)(r.p,{children:"Notez qu'en ouvrant ce fichier, il y a maintenant une erreur sur le constructeur car la classe RoleRepo n'impl\xe9mente pas la nouvelle m\xe9thode ObtenirListeItem"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'//highlight-next-line\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic class RoleRepo : BasePKUniqueRepo<Role,int>, IRoleRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public RoleRepo(SuperCarteContext bd) : base(bd)\r\n\t{\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n//highlight-start\r\n    public List<ListeItem<int>> ObtenirListeItem()\r\n    {\r\n        return (from lqRole in _bd.RoleTb\r\n                select\r\n                    new ListeItem<int>()\r\n                    {\r\n                        Valeur = lqRole.RoleId,\r\n                        Texte = lqRole.Nom\r\n                    }).ToList();\r\n    }\r\n    //highlight-end\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-service---roleservice",children:"Cr\xe9ation du service - RoleService"}),"\n",(0,i.jsxs)(r.p,{children:["Le service doit avoir une m\xe9thode qui obtient la liste de ",(0,i.jsx)(r.strong,{children:"ListeItem"})," pour les r\xf4les."]}),"\n",(0,i.jsxs)(r.p,{children:["Il est \xe9galement possible de consid\xe9rer ceci comme une logique d'affaires, car le comportement doit \xeatre le m\xeame, peu importe la vue. Pour ce projet et le ",(0,i.jsx)(r.strong,{children:"TP 3"}),", ce sera cette approche."]}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,i.jsx)(r.strong,{children:"IRoleService.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["La m\xe9thode est synchrone, car elle sera utilis\xe9e lors de la cr\xe9ation du ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Role\r\n/// </summary>\r\npublic interface IRoleService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste des r\xf4les dans un objet listeItem\r\n    /// </summary>    \r\n    /// <returns>Liste de r\xf4les dans un ListItem</returns>\r\n    List<ListeItem<int>> ObtenirListeItem();\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"RoleService.cs"}),"  dans le dossier ",(0,i.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Role\r\n/// </summary>\r\npublic class RoleService : IRoleService\r\n{\r\n    private readonly IRoleRepo _roleRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="roleRepo">Repository Role</param>\r\n    public RoleService(IRoleRepo roleRepo)\r\n    {\r\n        _roleRepo = roleRepo;\r\n    }\r\n\r\n    public List<ListeItem<int>> ObtenirListeItem()\r\n    {\r\n        return _roleRepo.ObtenirListeItem();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"supercartecore---gestion",children:"SuperCarte.Core - Gestion"}),"\n",(0,i.jsx)(r.p,{children:"Cette section explique comment avoir les \xe9l\xe9ments n\xe9cessaires dans la logique d'affaires pour faire fonctionner la m\xe9canique de gestion."}),"\n",(0,i.jsx)(r.p,{children:"La m\xe9canique est identique \xe0 cette de la cat\xe9gorie. Par contre, le mot de passe de l'utilisateur doit \xeatre g\xe9r\xe9 diff\xe9remment, car il n'est pas possible de le modifier par ce formulaire."}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-mod\xe8le---utilisateurmodel",children:"Cr\xe9ation du mod\xe8le - UtilisateurModel"}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"UtilisateurModel"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Models"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'un utilisateur\r\n/// </summary>\r\npublic class UtilisateurModel\r\n{\r\n    public int UtilisateurId { get; set; }\r\n\r\n    public string Prenom { get; set; } = null!;\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string NomUtilisateur { get; set; } = null!;    \r\n\r\n    public int RoleId { get; set; }\r\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:"La classe ne contient pas de propri\xe9t\xe9 pour le mot de passe."}),"\n",(0,i.jsx)(r.h3,{id:"m\xe9thode-dextension---utilisateurmapextension",children:"M\xe9thode d'extension - UtilisateurMapExtension"}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"UtilisateurMapExtension.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Extensions"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["La classe contient les m\xe9thodes d'extension pour convertir ou copier le mod\xe8le de donn\xe9es vers le mod\xe8le du domaine et vice-versa. Le champ ",(0,i.jsx)(r.strong,{children:"MotPassHash"})," n'est pas trait\xe9."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Models;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Extensions;\r\n\r\n/// <summary>\r\n/// Classe statique qui regroupe les m\xe9thodes d\'extension pour la conversion (mapping) du mod\xe8le Utilisateur\r\n/// </summary>\r\npublic static class UtilisateurMapExtension\r\n{\r\n    /// <summary>\r\n    /// Convertir un objet Utilisateur vers un objet UtilisateurModel\r\n    /// </summary>\r\n    /// <param name="item">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static UtilisateurModel VersUtilisateurModel(this Utilisateur item)\r\n    {\r\n        return new UtilisateurModel()\r\n        {\r\n            UtilisateurId = item.UtilisateurId,\r\n            Prenom = item.Prenom,\r\n            Nom = item.Nom,\r\n            NomUtilisateur = item.NomUtilisateur,            \r\n            RoleId = item.RoleId\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir un objet UtilisateurModel vers un objet Utilisateur\r\n    /// </summary>\r\n    /// <param name="item">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static Utilisateur VersUtilisateur(this UtilisateurModel item)\r\n    {\r\n        return new Utilisateur()\r\n        {\r\n            UtilisateurId = item.UtilisateurId,\r\n            Prenom = item.Prenom,\r\n            Nom = item.Nom,\r\n            NomUtilisateur = item.NomUtilisateur,                      \r\n            RoleId = item.RoleId\r\n        };\r\n    }    \r\n\r\n    /// <summary>\r\n    /// M\xe9thode qui copie les valeurs des propri\xe9t\xe9s de l\'objet de donn\xe9e Utilisateur dans l\'objet du mod\xe8le UtilisateurModel\r\n    /// </summary>\r\n    /// <param name="itemDestination">UtilisateurModel \xe0 recevoir la copie (destination)</param>\r\n    /// <param name="utilisateurSource">L\'objet Utilisateurde r\xe9f\xe9rence pour la copie (source)</param>\r\n    /// <param name="copierClePrimaire">Copier de la cl\xe9 primaire</param>\r\n    public static void Copie(this UtilisateurModel itemDestination, Utilisateur utilisateurSource, bool copierClePrimaire)\r\n    {\r\n        if (copierClePrimaire == true)\r\n        {\r\n            itemDestination.UtilisateurId = utilisateurSource.UtilisateurId;\r\n        }\r\n\r\n        itemDestination.Prenom = utilisateurSource.Prenom;\r\n        itemDestination.Nom = utilisateurSource.Nom;\r\n        itemDestination.NomUtilisateur = utilisateurSource.NomUtilisateur;        \r\n        itemDestination.RoleId = utilisateurSource.RoleId;\r\n    }\r\n\r\n    /// <summary>\r\n    /// M\xe9thode qui copie les valeurs des propri\xe9t\xe9s du UtilisateurModel dans l\'objet de donn\xe9e Utilisateur\r\n    /// </summary>\r\n    /// <param name="itemDestination">Utilisateur \xe0 recevoir la copie (destination)</param>\r\n    /// <param name="utilisateurModelSource">L\'objet UtilisateurModel de r\xe9f\xe9rence pour la copie (source)</param>\r\n    /// <param name="ignoreClePrimaire">Ignore la copie de la cl\xe9 primaire</param>\r\n    public static void Copie(this Utilisateur itemDestination, UtilisateurModel utilisateurModelSource, bool ignoreClePrimaire = true)\r\n    {\r\n        if (ignoreClePrimaire == false)\r\n        {\r\n            itemDestination.UtilisateurId = utilisateurModelSource.UtilisateurId;\r\n        }\r\n\r\n        itemDestination.Prenom = utilisateurModelSource.Prenom;\r\n        itemDestination.Nom = utilisateurModelSource.Nom;\r\n        itemDestination.NomUtilisateur = utilisateurModelSource.NomUtilisateur;        \r\n        itemDestination.RoleId = utilisateurModelSource.RoleId;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"installation-de-la-librairie-bcrpytnet",children:"Installation de la librairie BCrpyt.Net"}),"\n",(0,i.jsxs)(r.p,{children:["Dans la ",(0,i.jsx)(r.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,i.jsx)(r.strong,{children:"Projet par d\xe9faut"})," de ",(0,i.jsx)(r.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,i.jsx)(r.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-powershell",children:"Install-Package BCrypt.Net-Next\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Pour \xeatre en mesure d'utiliser la librairie dans une classe, il faut mettre ce ",(0,i.jsx)(r.strong,{children:"using"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using BC = BCrypt.Net.BCrypt;\n"})}),"\n",(0,i.jsxs)(r.p,{children:["La classe a le m\xeame nom qu'une partie du ",(0,i.jsx)(r.strong,{children:"namespace"}),". Il n'est pas possible d'utiliser la classe directement, car il y a ambigu\xeft\xe9 entre la classe et le ",(0,i.jsx)(r.strong,{children:"namespace"}),". La syntaxe indique que la classe ",(0,i.jsx)(r.strong,{children:"BCrypt"})," dans ce fichier sera renomm\xe9e sous le nom ",(0,i.jsx)(r.strong,{children:"BC"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-service---utilisateurservice",children:"Cr\xe9ation du service - UtilisateurService"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut avoir les 4 m\xe9thodes pour la gestion, ",(0,i.jsx)(r.strong,{children:"Obtenir (sync et async)"}),", ",(0,i.jsx)(r.strong,{children:"Ajouter"})," et ",(0,i.jsx)(r.strong,{children:"Modifier"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,i.jsx)(r.strong,{children:"IUtilisateurService.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Utilisateur\r\n/// </summary>\r\npublic interface IUtilisateurService\r\n{\r\n    /// <summary>\r\n    /// Obtenir un utilisateur \xe0 partir de sa cl\xe9 primaire en asynchrone.\r\n    /// </summary>\r\n    /// <param name="utilisateurId">Cl\xe9 primaire de l\'utilisateur</param>\r\n    /// <returns>L\'utilisateur ou null si l\'utilisateur n\'est pas trouv\xe9</returns>\r\n    Task<UtilisateurModel?> ObtenirAsync(int utilisateurId);\r\n\r\n    /// <summary>\r\n    /// Obtenir un utilisateur \xe0 partir de sa cl\xe9 primaire.\r\n    /// </summary>\r\n    /// <param name="utilisateurId">Cl\xe9 primaire de l\'utilisateur</param>\r\n    /// <returns>L\'utilisateur ou null si l\'utilisateur n\'est pas trouv\xe9</returns>\r\n    UtilisateurModel? Obtenir(int utilisateurId);\r\n\r\n    /// <summary>\r\n    /// Ajouter un utilisateur en asynchrone.\r\n    /// </summary>\r\n    /// <param name="utilisateurModel">Utilisateur \xe0 ajouter</param>        \r\n    /// <param name="motPasse">Mot de passe</param>\r\n    /// <returns>Vrai si ajout\xe9, faux si non ajout\xe9</returns>\r\n    Task<bool> AjouterAsync(UtilisateurModel utilisateurModel, string motPasse);\r\n\r\n    /// <summary>\r\n    /// Modifier un utilisateur en asynchrone.\r\n    /// </summary>\r\n    /// <param name="utilisateurModel">Utilisateur \xe0 modifier</param>\r\n    /// <returns>Vrai si ajout\xe9, faux si non ajout\xe9</returns>\r\n    Task<bool> ModifierAsync(UtilisateurModel utilisateurModel);\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"UtilisateurService.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Voici le code complet. Les m\xe9thodes seront expliqu\xe9es s\xe9par\xe9ment."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\nusing SuperCarte.EF.Data;\r\nusing BC = BCrypt.Net.BCrypt; //La classe a le m\xeame nom qu'une partie du namespace. Cette nomenclature permet de renommer la classe.\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Utilisateur\r\n/// </summary>\r\npublic class UtilisateurService : IUtilisateurService\r\n{\r\n    private readonly IUtilisateurRepo _utilisateurRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"utilisateurRepo\">Repository Utilisateur</param>\r\n    public UtilisateurService(IUtilisateurRepo utilisateurRepo)\r\n    {\r\n        _utilisateurRepo = utilisateurRepo;\r\n    }\r\n\r\n//highlight-next-line\r\n    public async Task<bool> AjouterAsync(UtilisateurModel utilisateurModel, string motPasse)\r\n    {\r\n        //Transformation de l'objet du mod\xe8le du domaine en objet du mod\xe8le de donn\xe9es\r\n        Utilisateur utilisateur = utilisateurModel.VersUtilisateur();\r\n\r\n        //Le mot de passe n'est pas copi\xe9, il faut le convertir avec BCrypt\r\n        //highlight-next-line\r\n        utilisateur.MotPasseHash = BC.HashPassword(motPasse);\r\n\r\n        //Ajout dans repository avec enregistrement imm\xe9diat\r\n        await _utilisateurRepo.AjouterAsync(utilisateur, true);\r\n\r\n        //Assigne les valeurs de la base de donn\xe9es dans l'objet du mod\xe8le\r\n        utilisateurModel.Copie(utilisateur, true);\r\n\r\n        return true;\r\n    }\r\n\r\n    public async Task<bool> ModifierAsync(UtilisateurModel utilisateurModel)\r\n    {\r\n        //Il n'y a aucune r\xe9f\xe9rence au mot de passe.\r\n        Utilisateur? utilisateur = await _utilisateurRepo.ObtenirParCleAsync(utilisateurModel.UtilisateurId);\r\n\r\n        if (utilisateur != null)\r\n        {\r\n            //Assigner les valeurs dans l'utilisateur\r\n            utilisateur.Copie(utilisateurModel);\r\n\r\n            await _utilisateurRepo.EnregistrerAsync();\r\n\r\n            //Assigne les valeurs de la base de donn\xe9es dans l'objet du mod\xe8le\r\n            utilisateurModel.Copie(utilisateur, false);\r\n\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            throw new Exception(\"Impossible de modifier l'utilisateur. Aucun utilisateur trouv\xe9 avec la cl\xe9 primaire.\");\r\n        }\r\n    }\r\n\r\n    public async Task<UtilisateurModel?> ObtenirAsync(int utilisateurId)\r\n    {\r\n        Utilisateur? utilisateur = await _utilisateurRepo.ObtenirParCleAsync(utilisateurId);\r\n        \r\n        return utilisateur?.VersUtilisateurModel();\r\n    }\r\n\r\n    public UtilisateurModel? Obtenir(int utilisateurId)\r\n    {\r\n        Utilisateur? utilisateur = _utilisateurRepo.ObtenirParCle(utilisateurId);\r\n\r\n        return utilisateur?.VersUtilisateurModel();\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Premi\xe8rement, la m\xe9thode ",(0,i.jsx)(r.strong,{children:"AjouterAsync()"}),"  (ligne 25) a 2 param\xe8tres. Le premier est le mod\xe8le et le 2e est le mot de passe en texte. Le mot de passe ne fait pas partie du mod\xe8le du domaine, il doit \xeatre envoy\xe9 comme un 2e param\xe8tre."]}),"\n",(0,i.jsxs)(r.p,{children:["Le mot de passe en texte est ",(0,i.jsx)(r.strong,{children:"hach\xe9"})," avec ",(0,i.jsx)(r.strong,{children:"BCrypt"})," et le ",(0,i.jsx)(r.strong,{children:"hash"})," est assign\xe9 dans le mod\xe8le de donn\xe9es (ligne 31)."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour la modification, la m\xe9canique est la m\xeame, sauf que l'extension ",(0,i.jsx)(r.strong,{children:".Copie"})," (ligne 50) ne s'occupe pas du mot de passe."]}),"\n",(0,i.jsx)(r.h2,{id:"supercartewpf",children:"SuperCarte.WPF"}),"\n",(0,i.jsx)(r.h3,{id:"enregistrer-les-services---scserviceextensions",children:"Enregistrer les services - SCServiceExtensions"}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"SuperCarte.WPF/Extension/ServiceCollections/SCServiceExtensions"}),", il faut enregistrer les 2 nouveaux services."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using Microsoft.Extensions.DependencyInjection;\r\nusing SuperCarte.Core.Services;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Service\r\n/// </summary>\r\npublic static class SCServiceExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les services de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerServices(this IServiceCollection services)\r\n    {\r\n        services.AddScoped<ICategorieService, CategorieService>();\r\n        services.AddScoped<ICarteService, CarteService>();\r\n        //highlight-start\r\n        services.AddScoped<IRoleService, RoleService>();\r\n        services.AddScoped<IUtilisateurService, UtilisateurService>();\r\n        //highlight-end\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-viewmodel---gestionutilisateurvm",children:"Cr\xe9ation du ViewModel - GestionUtilisateurVM"}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"GestionUtilisateurVM.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"ViewModels"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Le ",(0,i.jsx)(r.strong,{children:"ViewModel"})," est tr\xe8s similaire \xe0 celui de la cat\xe9gorie. Les diff\xe9rences sont expliqu\xe9es apr\xe8s le bout de code."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class GestionUtilisateurVM : BaseParametreVM<int>\r\n{\r\n    #region D\xe9pendances\r\n    //highlight-start\r\n    private readonly IUtilisateurService _utilisateurService;\r\n    private readonly IRoleService _roleService;\r\n    //highlight-end\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private int _utilisateurId;\r\n    private string _prenom;\r\n    private string _nom;\r\n    private string _nomUtilisateur;\r\n    private string? _motPasse;\r\n    private int _roleId;\r\n    private List<ListeItem<int>> _lstRole;\r\n    private bool _estEnTravail = false;\r\n    private bool _champsModifiables = true;\r\n    #endregion\r\n\r\n    public GestionUtilisateurVM(IUtilisateurService utilisateurService, IRoleService roleService)\r\n    {\r\n        _utilisateurService = utilisateurService;\r\n        _roleService = roleService;\r\n\r\n//highlight-next-line\r\n        ListeRoles = _roleService.ObtenirListeItem();\r\n    //highlight-next-line\r\n        ListeRoles.Insert(0, new ListeItem<int>() { Valeur = 0, Texte = \"Veuillez s\xe9lectionner un r\xf4le...\"});\r\n\r\n        EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync, () => !EstEnTravail);\r\n        ObtenirCommande = new AsyncRelayCommand(ObtenirAsync, () => !EstEnTravail);\r\n        NouveauCommande = new RelayCommand(Nouveau, () => !EstEnTravail);\r\n    }\r\n\r\n    #region M\xe9thodes d'assignation\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s li\xe9es du ViewModel vers les propri\xe9t\xe9s du mod\xe8le\r\n    /// </summary>\r\n    /// <returns>Objet du mod\xe8le</returns>\r\n    private UtilisateurModel VersModele()\r\n    {\r\n        return new UtilisateurModel\r\n        {\r\n            UtilisateurId = this.UtilisateurId,\r\n            Prenom = this.Prenom,\r\n            Nom = this.Nom,\r\n            NomUtilisateur = this.NomUtilisateur,\r\n            RoleId= this.RoleId\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s du mod\xe8le vers les propri\xe9t\xe9s li\xe9es du ViewModel\r\n    /// </summary>\r\n    /// <param name=\"categorieModel\">Mod\xe8le</param>\r\n    private void VersVM(UtilisateurModel? utilisateurModel)\r\n    {\r\n        if (utilisateurModel != null)\r\n        {\r\n            UtilisateurId = utilisateurModel.UtilisateurId;\r\n            Prenom = utilisateurModel.Prenom;\r\n            Nom = utilisateurModel.Nom;\r\n            NomUtilisateur = utilisateurModel.NomUtilisateur;\r\n            RoleId = utilisateurModel.RoleId;            \r\n        }\r\n        else\r\n        {\r\n            UtilisateurId = 0;\r\n            Prenom = string.Empty;\r\n            Nom = string.Empty;\r\n            NomUtilisateur = string.Empty;\r\n            RoleId = 0;\r\n        }\r\n        \r\n        MotPasse = string.Empty;\r\n    }\r\n\r\n    public override void AssignerParametre(int parametre)\r\n    {\r\n        UtilisateurId = parametre;\r\n\r\n        UtilisateurModel? utilisateurModel = _utilisateurService.Obtenir(UtilisateurId);\r\n\r\n        VersVM(utilisateurModel);\r\n    }\r\n    #endregion\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Enregistrer la cat\xe9gorie\r\n    /// </summary>    \r\n    private async Task EnregistrerAsync()\r\n    {\r\n        ChampsModifiables = false;\r\n        EstEnTravail = true;\r\n\r\n        UtilisateurModel utilisateurModel = VersModele();\r\n\r\n        if (utilisateurModel.UtilisateurId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est un nouvel utilisateur\r\n            await _utilisateurService.AjouterAsync(utilisateurModel, MotPasse!);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est un utilisateur existant\r\n            await _utilisateurService.ModifierAsync(utilisateurModel);\r\n        }        \r\n\r\n        VersVM(utilisateurModel);\r\n\r\n        EstEnTravail = false;\r\n        ChampsModifiables = true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir l'utilisateur\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private async Task ObtenirAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        UtilisateurModel? utilisateurModel = await _utilisateurService.ObtenirAsync(UtilisateurId);\r\n\r\n        VersVM(utilisateurModel);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Mettre le ViewModel en mode ajouter\r\n    /// </summary>\r\n    private void Nouveau()\r\n    {\r\n        UtilisateurId = 0;\r\n        Prenom = string.Empty;\r\n        Nom = string.Empty;\r\n        NomUtilisateur = string.Empty;\r\n        MotPasse = string.Empty;\r\n        RoleId = 0;\r\n    }\r\n    #endregion\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand EnregistrerCommande { get; private set; }\r\n\r\n    public IAsyncRelayCommand ObtenirCommande { get; private set; }\r\n\r\n    public IRelayCommand NouveauCommande { get; private set; }\r\n    #endregion   \r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            if (SetProperty(ref _estEnTravail, value))\r\n            {\r\n                ObtenirCommande.NotifyCanExecuteChanged();\r\n                EnregistrerCommande.NotifyCanExecuteChanged();\r\n                NouveauCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    public bool ChampsModifiables\r\n    {\r\n        get\r\n        {\r\n            return _champsModifiables;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _champsModifiables, value);\r\n        }\r\n    }\r\n\r\n//highlight-start\r\n    public bool MotPasseModifiable\r\n    {\r\n        get\r\n        {\r\n            return UtilisateurId == 0;\r\n        }\r\n    }\r\n//highlight-end\r\n\r\n    public int UtilisateurId \r\n    { \r\n        get\r\n        {\r\n            return _utilisateurId;\r\n        }\r\n        set\r\n        {\r\n            if(SetProperty(ref _utilisateurId, value))\r\n            {\r\n                //highlight-next-line\r\n                OnPropertyChanged(nameof(MotPasseModifiable));\r\n            }\r\n        }\r\n    }\r\n\r\n    public string Prenom\r\n    {\r\n        get\r\n        {\r\n            return _prenom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _prenom, value);\r\n        }\r\n    }\r\n\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nom, value);\r\n        }\r\n    }\r\n\r\n    public string NomUtilisateur\r\n    {\r\n        get\r\n        {\r\n            return _nomUtilisateur;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nomUtilisateur, value);\r\n        }\r\n    }\r\n\r\n    public string? MotPasse\r\n    {\r\n        get\r\n        {\r\n            return _motPasse;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _motPasse, value);\r\n        }\r\n    }\r\n\r\n    public int RoleId\r\n    {\r\n        get\r\n        {\r\n            return _roleId;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _roleId, value);\r\n        }\r\n    }\r\n\r\n    public List<ListeItem<int>> ListeRoles\r\n    {\r\n        get\r\n        {\r\n            return _lstRole;\r\n        }\r\n\r\n        private set\r\n        {\r\n            SetProperty(ref _lstRole, value);\r\n        }\r\n    }\r\n    #endregion\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Pour d\xe9buter, le ",(0,i.jsx)(r.strong,{children:"ViewModel"})," a besoin de 2 services (ligne 9-10). Il doit avoir acc\xe8s aux m\xe9thodes de gestion de l'utilisateur et \xe9galement au service du ",(0,i.jsx)(r.strong,{children:"Role"})," pour obtenir la liste de ",(0,i.jsx)(r.strong,{children:"ListeItem"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 30 , la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"ListeRoles"})," contient la liste des r\xf4les disponibles pour la vue. L'assignation se fait dans le constructeur, car il s'agit d'une d\xe9pendance de la vue. La liste doit exister avant d'afficher l'utilisateur."]}),"\n",(0,i.jsx)(r.p,{children:"\xc0 la ligne 31, il faut ajouter l'\xe9l\xe9ment par d\xe9faut. Il est plus int\xe9ressant de mettre du texte pour indiquer qu'il faut choisir un \xe9l\xe9ment dans la liste."}),"\n",(0,i.jsxs)(r.p,{children:["Il faut \xe9galement indiquer \xe0 la ",(0,i.jsx)(r.strong,{children:"Vue"})," si le champ ",(0,i.jsx)(r.strong,{children:"MotPasse"})," est modifiable ou non. Le champ peut \xeatre modifi\xe9 uniquement lorsque c'est un nouvel utilisateur. Cette propri\xe9t\xe9 n'utilise pas un attribut et elle a une logique en fonction de la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"MotPasseModifiable"})," (ligne 186). Si ",(0,i.jsx)(r.strong,{children:"UtilisateurId"})," est 0, c'est que c'est un nouvel utilisateur."]}),"\n",(0,i.jsxs)(r.p,{children:["Si la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"UtilisateurId"})," est modifi\xe9e, il faut \xe9galement indiquer que la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"MotPasseModifiable"})," est modifi\xe9e. \xc0 la ligne 204,  la m\xe9thode ",(0,i.jsx)(r.strong,{children:"OnPropertyChanged()"})," indique aux composants qui sont li\xe9s \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"MotPasseModifiable"})," de se mettre \xe0 jour. La m\xe9thode ",(0,i.jsx)(r.strong,{children:"OnPropertyChanged"})," provient de la classe ",(0,i.jsx)(r.strong,{children:"ObservableObject"})," du ",(0,i.jsx)(r.strong,{children:"MVVM Toolkit"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"enregistrement-du-viewmodel---scviewmodelextensions",children:"Enregistrement du ViewModel - SCViewModelExtensions"}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"Supercarte.WPF/Extensions/ServiceCollections/SCServiceViewModelExtensions"}),", il faut enregistrer le nouveau ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Service\r\n/// </summary>\r\npublic static class SCViewModelExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les ViewModels de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerViewModels(this IServiceCollection services)\r\n    {\r\n        services.AddSingleton<MainWindowVM>();\r\n        services.AddTransient<ListeCategoriesVM>();\r\n        services.AddTransient<ListeCartesVM>();\r\n        services.AddTransient<GestionCategorieVM>();\r\n        //highlight-next-line\r\n        services.AddTransient<GestionUtilisateurVM>();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-de-la-vue---ucgestionutilisateurxaml",children:"Cr\xe9ation de la vue - UcGestionUtilisateur.xaml"}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(r.strong,{children:"UcGestionUtilisateur.xaml"})," de type ",(0,i.jsx)(r.strong,{children:"Contr\xf4le Utilisateur (WPF)"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Views"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Aux lignes 7 et 8, il y a l'indicateur du ",(0,i.jsx)(r.strong,{children:"ViewModel"})," pour faciliter la liaison."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcGestionUtilisateur"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:aide="clr-namespace:SuperCarte.WPF.Aides"\r\n             d:DataContext="{d:DesignInstance vm:GestionUtilisateurVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto"/>\r\n            <RowDefinition Height="auto" />\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Gestion d\'un utilisateur"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" \r\n                    Command="{Binding NouveauCommande}"/>\r\n            <Button Content="E" ToolTip="Enregistrer"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding EnregistrerCommande}"/>\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        \x3c!-- Formulaire --\x3e\r\n        <Grid Grid.Row="2" IsEnabled="{Binding ChampsModifiables}">\r\n            <Grid.RowDefinitions>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n            </Grid.RowDefinitions>\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width="auto"/>\r\n                <ColumnDefinition Width="*" />\r\n            </Grid.ColumnDefinitions>\r\n\r\n            \x3c!-- Prenom --\x3e\r\n            <Label Grid.Row="0" Grid.Column="0" \r\n                   Content="Pr\xe9nom : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="0" Grid.Column="1" \r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding Prenom}" \r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n            \x3c!-- Nom --\x3e\r\n            <Label Grid.Row="1" Grid.Column="0" \r\n                   Content="Nom : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="1" Grid.Column="1" \r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding Nom}" \r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n            \x3c!-- Nom utilisateur --\x3e\r\n            <Label Grid.Row="2" Grid.Column="0" \r\n                   Content="Nom d\'utilisateur : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="2" Grid.Column="1" \r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding NomUtilisateur}"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n            \x3c!-- Mot de passe --\x3e\r\n            <Label Grid.Row="3" Grid.Column="0" \r\n                   Content="Mot de passe : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n                   //highlight-next-line\r\n            <TextBox Grid.Row="3" Grid.Column="1" \r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding MotPasse}"\r\n                     //highlight-next-line\r\n                     IsEnabled="{Binding MotPasseModifiable}"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n            \r\n            \x3c!-- R\xf4le --\x3e\r\n            <Label Grid.Row="4" Grid.Column="0" \r\n                   Content="Role : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <ComboBox Grid.Row="4" Grid.Column="1" \r\n                      Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                      //highlight-start\r\n                      ItemsSource="{Binding ListeRoles}"\r\n                      SelectedValue="{Binding RoleId}"\r\n                      DisplayMemberPath="Texte"\r\n                      SelectedValuePath="Valeur"  \r\n                      //highlight-end                    \r\n                      Padding="2 4 0 0"\r\n                      Margin="0 10 5 10"/>\r\n\r\n        </Grid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>   \r\n    \r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Pour le mot de passe (ligne 90), id\xe9alement, il faut utiliser le composant ",(0,i.jsx)(r.strong,{children:"<PasswordBox>"}),". Ce composant ne peut pas \xeatre li\xe9 \xe0 une propri\xe9t\xe9 du ",(0,i.jsx)(r.strong,{children:"ViewModel"})," pour des raisons de s\xe9curit\xe9 par sa conception. Ce composant n'est pas tr\xe8s ",(0,i.jsx)(r.strong,{children:"MVVM"}),". Pour l'instant, ce sera un ",(0,i.jsx)(r.strong,{children:"<TextBox>"}),". Dans le cours sur l'int\xe9gration, il faudra modifier le ",(0,i.jsx)(r.strong,{children:"<PasswordBox>"})," pour qu'il soit ",(0,i.jsx)(r.strong,{children:"liable"}),". Il faudra penser de le corriger ici."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc9galement, la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"IsEnabled"})," (ligne 98) est li\xe9e \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"MotPasseModifiable"})," du ",(0,i.jsx)(r.strong,{children:"ViewModel"}),". Le composant sera disponible uniquement lors de l'ajout d'un utilisateur."]}),"\n",(0,i.jsxs)(r.p,{children:["Ensuite, le composant ",(0,i.jsx)(r.strong,{children:"<ComboBox>"})," (ligne 109-110) doit avoir les propri\xe9t\xe9s ",(0,i.jsx)(r.strong,{children:"ItemsSource"})," et ",(0,i.jsx)(r.strong,{children:"SelectedValue"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"ItemsSource"})," correspond \xe0 la liste des \xe9l\xe9ments et la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"SelectedValue"})," \xe0 l'item s\xe9lectionn\xe9 dans la liste."]}),"\n",(0,i.jsxs)(r.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"SelectedValuePath"})," (ligne 112) permet d'indiquer la propri\xe9t\xe9 du ",(0,i.jsx)(r.strong,{children:"ListeItem<int>"})," qui sera utilis\xe9e pour la valeur. C'est la valeur de cette propri\xe9t\xe9 qui sera envoy\xe9e dans la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"SelectedValue"}),". Il est important que leur type soit le m\xeame."]}),"\n",(0,i.jsxs)(r.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"DisplayMemberPath"})," (ligne 111) permet d'indiquer la propri\xe9t\xe9 du ",(0,i.jsx)(r.strong,{children:"ListeItem<int>"})," qui sera utilis\xe9e pour l'affichage."]}),"\n",(0,i.jsx)(r.h3,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,i.jsx)(r.strong,{children:"ViewModel"})," et la ",(0,i.jsx)(r.strong,{children:"Vue"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Les lignes 24 \xe0 26 contiennent le lien entre ",(0,i.jsx)(r.strong,{children:"UcGestionUtilisateur"})," et ",(0,i.jsx)(r.strong,{children:"GestionUtilisateurVM"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Modifier ",(0,i.jsx)(r.strong,{children:"MainWindow.xaml"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"                \r\n        mc:Ignorable="d"         \r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCategoriesVM}">\r\n            <v:UcListeCategories />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCartesVM}">\r\n            <v:UcListeCartes />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:GestionCategorieVM}">\r\n            <v:UcGestionCategorie />\r\n        </DataTemplate>\r\n        //highlight-start\r\n        <DataTemplate DataType="{x:Type TypeName=vm:GestionUtilisateurVM}">\r\n            <v:UcGestionUtilisateur />\r\n        </DataTemplate>\r\n        //highlight-end\r\n    </Window.Resources>\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto"/>\r\n            <RowDefinition Height="*"/>\r\n        </Grid.RowDefinitions>\r\n        <Menu Grid.Row="0" HorizontalContentAlignment="Stretch" VerticalAlignment="Stretch">\r\n            <MenuItem Header="_Fichier">\r\n                <MenuItem Header="_Quitter" />\r\n            </MenuItem>\r\n            <MenuItem Header="_Administration">\r\n                <MenuItem Header="Liste des _cartes" Command="{Binding NaviguerListeCartesVMCommande}"/>\r\n                <MenuItem Header="Liste des c_at\xe9gories" Command="{Binding NaviguerListeCategoriesVMCommande}"/>\r\n            </MenuItem>            \r\n        </Menu>\r\n\r\n        <ContentControl Grid.Row="1"  Content="{Binding Navigateur.VMActif}" />                \r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,i.jsx)(r.h2,{id:"test---mainwindowvm",children:"Test - MainWindowVM"}),"\n",(0,i.jsxs)(r.p,{children:["Pour tester directement, il faut modifier le ",(0,i.jsx)(r.strong,{children:"VMActif"})," pour celui de ",(0,i.jsx)(r.strong,{children:"GestionUtilisateurVM"})," (ligne 11)."]}),"\n",(0,i.jsx)(r.p,{children:"Il faut envoyer le param\xe8tre 0 pour un nouveau, sinon la cl\xe9 de l'utilisateur pour le modifier."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public MainWindowVM(INavigateur navigateur)\r\n{   \r\n    //S\xe9lectionner le ViewModel de d\xe9marrage        \r\n    _navigateur = navigateur;\r\n\r\n    //Cr\xe9ation des commandes\r\n    NaviguerListeCartesVMCommande = new RelayCommand(_navigateur.Naviguer<ListeCartesVM>);\r\n    NaviguerListeCategoriesVMCommande = new RelayCommand(_navigateur.Naviguer<ListeCategoriesVM>);\r\n\r\n    //Vue initiale\r\n    //highlight-next-line\r\n    _navigateur.Naviguer<GestionUtilisateurVM, int>(0); //Pour un nouveau\r\n    //_navigateur.Naviguer<GestionUtilisateurVM, int>(1);//Pour modifier Fran\xe7ois St-Hilaire\r\n    \r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez un nouvel utilisateur. Le champ ",(0,i.jsx)(r.strong,{children:"Mot de passe"})," sera disponible. Une fois enregistr\xe9, il ne sera plus modifiable."]})]})}function c(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>a});var i=n(7294);const t={},s=i.createContext(t);function a(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);