"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[7538],{8466:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var s=r(5893),i=r(1151);const t={sidebar_position:30},o="Eager loading",a={id:"Entity Framework 2/EF_eager_loading",title:"Eager loading",description:"Par d\xe9faut, les propri\xe9t\xe9s de navigation sont disponibles uniquement lorsque le contexte est utilis\xe9 directement, comme dans l'utilisation des jointures par navigation.",source:"@site/docs/50-Entity Framework 2/EF_eager_loading.md",sourceDirName:"50-Entity Framework 2",slug:"/Entity Framework 2/EF_eager_loading",permalink:"/4N1_2024/docs/Entity Framework 2/EF_eager_loading",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"NotesSidebar",previous:{title:"EF Navigation et Jointure",permalink:"/4N1_2024/docs/Entity Framework 2/EF_navigation"},next:{title:"Aggr\xe9gation",permalink:"/4N1_2024/docs/Entity Framework 2/EF_aggregation"}},l={},d=[{value:"Plusieurs niveaux de navigation  - plusieurs \xe0 1 -&gt; plusieurs \xe0 1",id:"plusieurs-niveaux-de-navigation----plusieurs-\xe0-1---plusieurs-\xe0-1",level:2},{value:"Navigation \xe0 plusieurs niveaux - 1 \xe0 plusieurs -&gt; plusieurs \xe0 1",id:"navigation-\xe0-plusieurs-niveaux---1-\xe0-plusieurs---plusieurs-\xe0-1",level:2},{value:"Classe d&#39;extension",id:"classe-dextension",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"eager-loading",children:"Eager loading"}),"\n",(0,s.jsx)(n.p,{children:"Par d\xe9faut, les propri\xe9t\xe9s de navigation sont disponibles uniquement lorsque le contexte est utilis\xe9 directement, comme dans l'utilisation des jointures par navigation."}),"\n",(0,s.jsx)(n.p,{children:"Voici un exemple qui fonctionne pour obtenir la liste des personnages, et afficher le nom de la franchise et la liste des acteurs qui ont interpr\xe9t\xe9 ce personnage."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var lstPersonnage =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         select\r\n             new\r\n             {\r\n                 PersonnageNom = lqPersonnage.Nom,\r\n                 FranchiseNom = lqPersonnage.Franchise.Nom,\r\n                 ListeActeur = lqPersonnage.DistributionListe.Select(d => d.Acteur).ToList(),\r\n             }).ToList();\r\n\r\n    foreach (var personnage in lstPersonnage)\r\n    {\r\n        Console.WriteLine($"Nom personnage : {personnage.PersonnageNom}");\r\n        Console.WriteLine($"Nom Franchise : {personnage.FranchiseNom}");\r\n\r\n        foreach (string acteur in personnage.ListeActeur)\r\n        {\r\n            Console.WriteLine($"Acteur : {acteur}");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Par contre, cette approche ne fonctionnera pas."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Personnage> lstPersonnage =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         select\r\n           lqPersonnage).ToList();\r\n\r\n    foreach (Personnage personnage in lstPersonnage)\r\n    {\r\n        Console.WriteLine($"Nom personnage : {personnage.Nom}");\r\n        Console.WriteLine($"Nom Franchise : {personnage.Franchise.Nom}");\r\n\r\n        foreach (Distribution distribution in personnage.DistributionListe)\r\n        {\r\n            Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Pourtant, elle pourrait \xeatre plus int\xe9ressante, car il serait possible d'utiliser les propri\xe9t\xe9s des tables en relation avec cet objet sans cr\xe9er un objet dynamique ou une nouvelle classe."}),"\n",(0,s.jsxs)(n.p,{children:["La ligne 13 g\xe9n\xe8re cette erreur : ",(0,s.jsx)(n.strong,{children:"Object reference not set to an instance of an object"}),". Et la liste ",(0,s.jsx)(n.strong,{children:"Personnage.DistributionListe"})," est vide."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour bien comprendre, il faut analyser le code de la classe ",(0,s.jsx)(n.strong,{children:"Personnage"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public partial class Personnage\r\n{\r\n    public int PersonnageId { get; set; }\r\n    public string Nom { get; set; } = null!;\r\n    public string? IdentiteReelle { get; set; }\r\n    public DateOnly DateNaissance { get; set; }\r\n    public bool EstVilain { get; set; }\r\n    public int FranchiseId { get; set; }\r\n//highlight-next-line\r\n    public virtual ICollection<Distribution> DistributionListe { get; } = new List<Distribution>();\r\n    public virtual Franchise Franchise { get; set; } = null!;\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La ligne 10 est la propri\xe9t\xe9 de navigation pour la table ",(0,s.jsx)(n.strong,{children:"Franchise"}),". Elle a comme valeur par d\xe9faut ",(0,s.jsx)(n.strong,{children:"null!"}),". Ce qui indique qu'il est possible que la valeur soit ",(0,s.jsx)(n.strong,{children:"null"}),", mais il devrait avoir une valeur."]}),"\n",(0,s.jsxs)(n.p,{children:["Par souci d'\xe9conomie de m\xe9moire, les propri\xe9t\xe9s de navigations n'ont aucune valeur si ce n'est pas sp\xe9cifi\xe9 dans la requ\xeate. Il existe la technique ",(0,s.jsx)(n.strong,{children:"Lazy Loading"})," qui permet de les utiliser sur demande, tant que le contexte est actif, mais cette technique n'est pas recommand\xe9e, car elle g\xe9n\xe8re beaucoup de sous-requ\xeates. Elle ne sera pas pr\xe9sent\xe9e."]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:"Eager Loading"})," (chargement ",(0,s.jsx)(n.em,{children:"h\xe2tif"}),") permet d'indiquer \xe0 ",(0,s.jsx)(n.strong,{children:"Entity Framework"})," de mettre les valeurs dans les propri\xe9t\xe9s de navigation pour qu'elles soient disponibles en dehors de la requ\xeate et de la dur\xe9e de vie du contexte."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut utiliser la m\xe9thode ",(0,s.jsx)(n.strong,{children:"Include()"})," dans la requ\xeate. Il est important d'utiliser d'utiliser un ",(0,s.jsx)(n.strong,{children:"Include()"})," pour chacune des propri\xe9t\xe9s."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'List<Personnage> lstPersonnage;\r\n\r\nusing (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    lstPersonnage =\r\n        (from lqPersonnage in db.PersonnageTb\r\n            .Include(p => p.Franchise) //Indique que la propri\xe9t\xe9 Franchise aura une valeur\r\n            .Include(p => p.DistributionListe) //Indique que la propri\xe9t\xe9 Distribution ne sera pas vide\r\n         select\r\n               lqPersonnage).ToList();\r\n}\r\n//Fin du contexte\r\n\r\nforeach (Personnage personnage in lstPersonnage)\r\n{\r\n    Console.WriteLine($"Nom personnage : {personnage.Nom}");\r\n    Console.WriteLine($"Nom Franchise : {personnage.Franchise.Nom}");\r\n\r\n    foreach (Distribution distribution in personnage.DistributionListe)\r\n    {\r\n        Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La ",(0,s.jsx)(n.strong,{children:"Console"})," est \xe0 l'ext\xe9rieur du ",(0,s.jsx)(n.strong,{children:"contexte"})," (using), ce qui d\xe9montre que les propri\xe9t\xe9s de navigation sont toujours disponibles une fois incluses."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici les 2 ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"})," avec l'approche de l'objet dynamique et l'approche du ",(0,s.jsx)(n.strong,{children:"Eager Loading"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Objet dynamique"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [p].[Nom], [u].[Nom], [p].[PersonnageId], [u].[FranchiseId], \r\n[d].[Acteur], [d].[PersonnageId], [d].[FilmId]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nLEFT JOIN [Distribution] AS [d] ON [p].[PersonnageId] = [d].[PersonnageId]\r\nORDER BY [p].[PersonnageId], [u].[FranchiseId], [d].[PersonnageId]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Eager Loading"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[DateNaissance], [p].[EstVilain], \r\n[p].[IdentiteReelle], [p].[Nom], [p].[FranchiseId], [u].[FranchiseId], \r\n[u].[AnneeCreation], [u].[Nom], [u].[Proprietaire], [u].[SiteWeb], \r\n[d].[PersonnageId], [d].[FilmId], [d].[Acteur]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nLEFT JOIN [Distribution] AS [d] ON [p].[PersonnageId] = [d].[PersonnageId]\r\nORDER BY [p].[PersonnageId], [u].[FranchiseId], [d].[PersonnageId]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Elles sont \xe9quivalentes pour ce cas.  Par contre, les champs non n\xe9cessaires des tables ",(0,s.jsx)(n.strong,{children:"Franchise"})," et ",(0,s.jsx)(n.strong,{children:"Distribution"})," sont tous de m\xeame inclus dans la requ\xeate du ",(0,s.jsx)(n.strong,{children:"Eager Loading"}),", car il faut peupler l'objet au complet . Selon la nature de la requ\xeate, il peut \xeatre plus optimal d'utiliser un objet dynamique ou une classe sp\xe9cifique."]}),"\n",(0,s.jsx)(n.h2,{id:"plusieurs-niveaux-de-navigation----plusieurs-\xe0-1---plusieurs-\xe0-1",children:"Plusieurs niveaux de navigation  - plusieurs \xe0 1 -> plusieurs \xe0 1"}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple, s'il faut pr\xe9senter la requ\xeate ci-dessous, il faudra plusieurs niveaux pour la m\xe9thode ",(0,s.jsx)(n.strong,{children:"Include()"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:"Include()"})," peut inclure une s\xe9quence de plusieurs relations ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il y a plusieurs Distribution pour un Personnage, et plusieurs Personnage pour une Franchise. Nous avons donc ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"})," -> ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez l'indentation du ",(0,s.jsx)(n.strong,{children:"Include()"}),". C'est pour indiquer que c'est \xe0 partir de la table ",(0,s.jsx)(n.strong,{children:"Distribution"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Distribution> lstDistribution = \r\n        (from lqDistribution in db.DistributionTb\r\n            .Include(d => d.Personnage.Franchise)//Inclusion de Personnage \r\n                                                 //et Franchise en m\xeame temps                \r\n            .Include(d => d.Film)\r\n        select\r\n            lqDistribution).ToList();\r\n\r\n    foreach (Distribution distribution in lstDistribution)\r\n    {\r\n        Console.WriteLine($"Titre Film : {distribution.Film.Titre}");\r\n        Console.WriteLine($"Nom Franchise : {distribution.Personnage.Franchise.Nom}");\r\n        Console.WriteLine($"Nom Personnage : {distribution.Personnage.Nom}");\r\n        Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [d].[PersonnageId], [d].[FilmId], [d].[Acteur], [p].[PersonnageId], \r\n[p].[DateNaissance], [p].[EstVilain], [p].[IdentiteReelle], [p].[Nom], \r\n[p].[FranchiseId], [u].[FranchiseId], [u].[AnneeCreation], [u].[Nom], \r\n[u].[Proprietaire], [u].[SiteWeb], [f].[FilmId], [f].[Budget], \r\n[f].[DateSortie], [f].[Duree], [f].[Etoile], [f].[Titre]\r\n      FROM [Distribution] AS [d]\r\n      INNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\n      INNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\n      INNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Si par exemple, la table ",(0,s.jsx)(n.strong,{children:"Personnage"})," avait une cl\xe9 \xe9trang\xe8re ",(0,s.jsx)(n.strong,{children:"TypePersonnegeId"})," vers une table ",(0,s.jsx)(n.strong,{children:"TypePersonnage"}),", il faudrait faire ceci."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Distribution> lstDistribution = \r\n        (from lqDistribution in db.DistributionTb\r\n            .Include(d => d.Personnage.Franchise)//Inclusion de Personnage et Franchise en m\xeame temps                \r\n            .Include(d => d.Personnage.TypePersonnage)//Inclusion de TypePersonnage.                \r\n            .Include(d => d.Film)\r\n        select\r\n            lqDistribution).ToList();\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"navigation-\xe0-plusieurs-niveaux---1-\xe0-plusieurs---plusieurs-\xe0-1",children:"Navigation \xe0 plusieurs niveaux - 1 \xe0 plusieurs -> plusieurs \xe0 1"}),"\n",(0,s.jsxs)(n.p,{children:["Pour cette requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"}),", il ne serait pas possible de faire seulement des ",(0,s.jsx)(n.strong,{children:"Include()"}),".  La m\xe9thode ",(0,s.jsx)(n.strong,{children:"Include()"})," a la m\xe9thode chain\xe9e ",(0,s.jsx)(n.strong,{children:"ThenInclude()"})," qui permet d'inclure une sous-relation ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM Film\r\nINNER JOIN [Distribution] ON Film.FilmId = [Distribution].FilmId\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate ",(0,s.jsx)(n.strong,{children:"LINQ"})," \xe0 utiliser."]}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez l'indentation du ",(0,s.jsx)(n.strong,{children:"Include()"})," et du ",(0,s.jsx)(n.strong,{children:"ThenInclude()"}),". Il est pr\xe9f\xe9rable de repr\xe9senter le niveau de navigation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Film> lstFilm = \r\n        (from lqFilm in db.FilmTb\r\n            .Include(f => f.DistributionListe)\r\n                .ThenInclude(d => d.Personnage.Franchise)\r\n         select\r\n            lqFilm).ToList();\r\n\r\n\r\n\r\n    foreach (Film film in lstFilm)\r\n    {\r\n        Console.WriteLine($"Titre Film : {film.Titre}");\r\n\r\n        foreach (Distribution distribution in film.DistributionListe)\r\n        {\r\n\r\n            Console.WriteLine($"Nom Franchise : {distribution.Personnage.Franchise.Nom}");\r\n            Console.WriteLine($"Nom Personnage : {distribution.Personnage.Nom}");\r\n            Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n        }        \r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"Film.DistributionListe"})," est une liste. Il n'est donc pas possible de faire ",(0,s.jsx)(n.strong,{children:"Film.DistributionListe.Personnage"}),". Il faut inclure pour chacune des distributions les personnages. Il faut donc obligatoirement utiliser la m\xe9thode ",(0,s.jsx)(n.strong,{children:"ThenInclude()"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, ",(0,s.jsx)(n.strong,{children:"Personnage.Franchise"})," est une relation ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"}),". Il est possible de les inclure en m\xeame temps."]}),"\n",(0,s.jsx)(n.h2,{id:"classe-dextension",children:"Classe d'extension"}),"\n",(0,s.jsx)(n.p,{children:"Il serait int\xe9ressant de reproduire le code de la console avec une classe d'extension."}),"\n",(0,s.jsx)(n.p,{children:"Il faut d\xe9terminer le cas si les classes de navigation sont disponibles ou non."}),"\n",(0,s.jsxs)(n.p,{children:["Voici la classe ",(0,s.jsx)(n.strong,{children:"PersonnageConsoleExtensions"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using Univers.EF.Data;\r\n\r\npublic static class PersonnageConsoleExtensions\r\n{\r\n    public static void AfficherConsole(this Personnage? personnage)\r\n    {\r\n        if (personnage != null)\r\n        {\r\n            Console.WriteLine($"Id : {personnage.PersonnageId}");\r\n            Console.WriteLine($"Nom : {personnage.Nom}");\r\n\r\n            //Le ?? permet d\'indiquer la valeur de remplacement si IdentiteReelle est null\r\n            Console.WriteLine($"Identit\xe9 r\xe9elle : {personnage.IdentiteReelle ?? "Inconnue"}");\r\n\r\n            //Affiche la date de naissance en d MMM yyyy -> 3 dec 1998\r\n            Console.Write("Date de naissance : ");\r\n\r\n            Console.WriteLine($"{personnage.DateNaissance:d MMM yyyy}");\r\n            \r\n\r\n            Console.WriteLine($"Est vilain : {(personnage.EstVilain ? "Oui" : "Non")}");\r\n\r\n            Console.WriteLine($"Franchise Id : {personnage.FranchiseId}");\r\n//highlight-start\r\n            if (personnage.Franchise != null)\r\n            {\r\n                Console.WriteLine($"Nom franchise : {personnage.Franchise.Nom}");\r\n            } \r\n            else\r\n            {\r\n                Console.WriteLine("Franchise inconnue");\r\n            }\r\n            //highlight-end\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine("Personnage inexistant.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ex\xe9cutez la requ\xeate ci-dessous."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    Personnage? pSansInclude =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         where\r\n            lqPersonnage.PersonnageId == 1\r\n         select\r\n            lqPersonnage).FirstOrDefault();\r\n\r\n    pSansInclude.AfficherConsole();\r\n\r\n    Personnage? pAvecInclude =\r\n        (from lqPersonnage in db.PersonnageTb\r\n            .Include(p => p.Franchise)\r\n         where\r\n            lqPersonnage.PersonnageId == 1\r\n         select\r\n            lqPersonnage).FirstOrDefault();\r\n\r\n    pAvecInclude.AfficherConsole();\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Voici le r\xe9sultat dans la console."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IId : 1\r\nNom : Spiderman\r\nIdentit\xe9 r\xe9elle : Confidentielle\r\nDate de naissance : 1 d\xe9c. 1980\r\nEst vilain : Non\r\nFranchise Id : 1\r\n//highlight-next-line\r\nFranchise inconnue\r\nId : 1\r\nNom : Spiderman\r\nIdentit\xe9 r\xe9elle : Confidentielle\r\nDate de naissance : 1 d\xe9c. 1980\r\nEst vilain : Non\r\nFranchise Id : 1\r\n//highlight-next-line\r\nNom franchise : Marvel\n"})}),"\n",(0,s.jsx)(n.p,{children:"La m\xe9thode d'extension supporte le cas si la navigation est disponible."})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>o});var s=r(7294);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);