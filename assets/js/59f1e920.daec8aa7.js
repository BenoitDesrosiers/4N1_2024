"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[1220],{635:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=r(5893),i=r(1151);const s={sidebar_position:130,draft:!1},a="SuperCarte.EF",l={id:"WPF partie 1/supercarte_ef",title:"SuperCarte.EF",description:"Cr\xe9ation du projet - SuperCarte.EF",source:"@site/docs/70-WPF partie 1/supercarte_ef.md",sourceDirName:"70-WPF partie 1",slug:"/WPF partie 1/supercarte_ef",permalink:"/4N1_2024/docs/WPF partie 1/supercarte_ef",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:130,frontMatter:{sidebar_position:130,draft:!1},sidebar:"NotesSidebar",previous:{title:"SuperCarte DEA",permalink:"/4N1_2024/docs/WPF partie 1/supercarte_DEA"},next:{title:"Injection de d\xe9pendances",permalink:"/4N1_2024/docs/WPF partie 1/injection_dependance"}},o={},d=[{value:"Cr\xe9ation du projet - SuperCarte.EF",id:"cr\xe9ation-du-projet---supercarteef",level:2},{value:"Cr\xe9ation du mod\xe8le",id:"cr\xe9ation-du-mod\xe8le",level:2},{value:"Cr\xe9ation du contexte",id:"cr\xe9ation-du-contexte",level:2},{value:"MIGRATION_CONNECTION_STRING",id:"migration_connection_string",level:3},{value:"Cr\xe9ation du fichier de migration",id:"cr\xe9ation-du-fichier-de-migration",level:3},{value:"Synchronisation de la base de donn\xe9es",id:"synchronisation-de-la-base-de-donn\xe9es",level:3},{value:"Configuration du contexte",id:"configuration-du-contexte",level:2},{value:"OnModelCreating",id:"onmodelcreating",level:3},{value:"Nom des tables",id:"nom-des-tables",level:3},{value:"__EFMigrationsHistory",id:"__efmigrationshistory",level:3},{value:"Cr\xe9er une cl\xe9 primaire compos\xe9e",id:"cr\xe9er-une-cl\xe9-primaire-compos\xe9e",level:3},{value:"Type des champs - string, decimal et date",id:"type-des-champs---string-decimal-et-date",level:3},{value:"Ajout d&#39;une contrainte d&#39;unicit\xe9",id:"ajout-dune-contrainte-dunicit\xe9",level:3},{value:"ON DELETE NO ACTION",id:"on-delete-no-action",level:3},{value:"Seed - Ajout des donn\xe9es",id:"seed---ajout-des-donn\xe9es",level:2},{value:"Pr\xe9paration du contexte",id:"pr\xe9paration-du-contexte",level:3},{value:"Cr\xe9ation des donn\xe9es",id:"cr\xe9ation-des-donn\xe9es",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"supercarteef",children:"SuperCarte.EF"}),"\n",(0,t.jsx)(n.h2,{id:"cr\xe9ation-du-projet---supercarteef",children:"Cr\xe9ation du projet - SuperCarte.EF"}),"\n",(0,t.jsxs)(n.p,{children:["Pour d\xe9buter, il faut cr\xe9er le projet qui contiendra le ",(0,t.jsx)(n.strong,{children:"contexte"})," et les classes du mod\xe8le."]}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez un projet de type ",(0,t.jsx)(n.strong,{children:"Biblioth\xe8que de classe"}),". Il est important ",(0,t.jsx)(n.strong,{children:"de ne pas choisir"})," la version ",(0,t.jsx)(n.strong,{children:".NET Framework"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Nom du projet"})," : SuperCarte.EF"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Nom de la solution"})," : SuperCarteApp"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Infrastructure"})," : .NET 7"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Remarquez que le nom de la solution n'est pas identique au projet, car la solution repr\xe9sente l'application et le projet une partie de l'application."}),"\n",(0,t.jsxs)(n.p,{children:["Supprimez la classe ",(0,t.jsx)(n.strong,{children:"Class1.cs"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Une ",(0,t.jsx)(n.strong,{children:"Biblioth\xe8que de classe"})," est une librairie interne. Ce type de projet n'est pas en mesure de s'ex\xe9cuter de fa\xe7on autonome. Pour \xeatre utilisable, ce projet doit \xeatre int\xe9gr\xe9 dans un projet ",(0,t.jsx)(n.strong,{children:"ex\xe9cutable"})," (WPF, WinForm, Console, ASP.NET MVC, Blazor...)."]}),"\n",(0,t.jsxs)(n.p,{children:["Ce projet contiendra uniquement le ",(0,t.jsx)(n.strong,{children:"contexte"})," et les classes du mod\xe8le de donn\xe9es."]}),"\n",(0,t.jsxs)(n.p,{children:["Dans la ",(0,t.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", installez les 2 librairies ci-dessous."]}),"\n",(0,t.jsxs)(n.p,{children:["La premi\xe8re librairie est pour le serveur utilis\xe9 avec le contexte. Dans notre cas, c'est ",(0,t.jsx)(n.strong,{children:"SQL Server"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Install-Package Microsoft.EntityFrameworkCore.SqlServer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["La 2e librairie est pour les outils de migration. C'est la m\xeame librairie que pour l'outil ",(0,t.jsx)(n.strong,{children:"Scaffold-DbContext"})," de l'approche ",(0,t.jsx)(n.strong,{children:"Database First"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Install-Package Microsoft.EntityFrameworkCore.Tools\n"})}),"\n",(0,t.jsx)(n.h2,{id:"cr\xe9ation-du-mod\xe8le",children:"Cr\xe9ation du mod\xe8le"}),"\n",(0,t.jsxs)(n.p,{children:["Il faut reproduire les classes du mod\xe8le pour repr\xe9senter le ",(0,t.jsx)(n.strong,{children:"DEA"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"En premier lieu, il faut cr\xe9er toutes les classes vides, car les propri\xe9t\xe9s de navigation font des r\xe9f\xe9rences circulaires. Si la classe n'existe pas, Visual Studio va indiquer une erreur."}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,t.jsx)(n.strong,{children:"Data"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez toutes les classes ci-dessous dans le dossier ",(0,t.jsx)(n.strong,{children:"Data"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Role.cs"}),"\n",(0,t.jsx)(n.li,{children:"Utilisateur.cs"}),"\n",(0,t.jsx)(n.li,{children:"Categorie.cs"}),"\n",(0,t.jsx)(n.li,{children:"Ensemble.cs"}),"\n",(0,t.jsx)(n.li,{children:"Carte.cs"}),"\n",(0,t.jsx)(n.li,{children:"UtilisateurCarte.cs"}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["Une propri\xe9t\xe9 de navigation qui repr\xe9sente la relation ",(0,t.jsx)(n.strong,{children:"1 \xe0 Plusieurs"})," auront le suffixe ",(0,t.jsx)(n.strong,{children:"Liste"})," pour les diff\xe9rencier des relations ",(0,t.jsx)(n.strong,{children:"Plusieurs \xe0 1"}),", car il s'agit d'une collection d'\xe9l\xe9ments."]}),(0,t.jsxs)(n.p,{children:["Pour une propri\xe9t\xe9 de navigation qui repr\xe9sente une relation ",(0,t.jsx)(n.strong,{children:"Plusieurs \xe0 1"}),", le nom de la propri\xe9t\xe9 de navigation sera le nom de la classe."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Voici le code de la classe ",(0,t.jsx)(n.strong,{children:"Role.cs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Role\r\n{\r\n    public int RoleId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n    \r\n    public ICollection<Utilisateur> UtilisateurListe { get; set; } = new List<Utilisateur>();\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Voici le code de la classe ",(0,t.jsx)(n.strong,{children:"Utilisateur.cs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Utilisateur\r\n{\r\n    public int UtilisateurId {  get; set; }\r\n\r\n    public string Prenom { get; set; } = null!;\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string NomUtilisateur { get; set; } = null!;\r\n    \r\n    public string MotPasseHash { get; set; } = null!;\r\n\r\n    public int RoleId { get; set; }\r\n    \r\n    public Role Role { get; set; } = null!;   \r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Voici le code de  la classe ",(0,t.jsx)(n.strong,{children:"Categorie.cs"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Remarquez que le champ ",(0,t.jsx)(n.strong,{children:"Description"})," est ",(0,t.jsx)(n.strong,{children:"nullable"})," comme dans le ",(0,t.jsx)(n.strong,{children:"DEA"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Categorie\r\n{\r\n    public int CategorieId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string? Description { get; set; }\r\n    \r\n    public ICollection<Carte> CarteListe { get; set; } = new List<Carte>();\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Voici le code de la classe ",(0,t.jsx)(n.strong,{children:"Ensemble.cs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Ensemble\r\n{\r\n    public int EnsembleId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public DateTime Disponibilite { get; set; }\r\n    \r\n    public ICollection<Carte> CarteListe { get; set; } = new List<Carte>();\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Voici le code de la classe ",(0,t.jsx)(n.strong,{children:"Carte.cs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Carte\r\n{\r\n    public int CarteId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public short Vie { get; set; }\r\n\r\n    public short Armure { get; set; }\r\n\r\n    public short Attaque { get; set; }\r\n\r\n    public bool EstRare { get; set; }\r\n    \r\n    public decimal PrixRevente { get; set; }\r\n\r\n    public int CategorieId { get; set; }\r\n\r\n    public int EnsembleId { get; set; }\r\n    \r\n    public Categorie Categorie { get; set; } = null!;\r\n\r\n    public Ensemble Ensemble { get; set; } = null!;\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["La classe ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte.cs"})," reste vide pour l'instant."]}),"\n",(0,t.jsx)(n.h2,{id:"cr\xe9ation-du-contexte",children:"Cr\xe9ation du contexte"}),"\n",(0,t.jsxs)(n.p,{children:["Pour que la migration fonctionne, il faut avoir un ",(0,t.jsx)(n.strong,{children:"contexte"}),", une configuration de base, des ",(0,t.jsx)(n.strong,{children:"DBSet"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Chacune des classes qui sont inscrites dans un ",(0,t.jsx)(n.strong,{children:"DbSet"})," doit avoir une cl\xe9 primaire. Par convention, la propri\xe9t\xe9 qui se nomme ",(0,t.jsx)(n.strong,{children:"Id"})," ou ",(0,t.jsx)(n.strong,{children:"[Nom de la Classe]Id"}),"  dans la classe du mod\xe8le est automatiquement consid\xe9r\xe9e comme la cl\xe9 primaire."]}),"\n",(0,t.jsxs)(n.p,{children:["\xc9galement, pour les cl\xe9s \xe9trang\xe8res, il faut la propri\xe9t\xe9 de navigation ",(0,t.jsx)(n.strong,{children:"Plusieurs \xe0 1"})," et une propri\xe9t\xe9 du m\xeame nom avec ",(0,t.jsx)(n.strong,{children:"Id"})," comme suffixe. Par convention, une cl\xe9 \xe9trang\xe8re a le m\xeame nom que la cl\xe9 primaire de la table parent. Donc pour une cl\xe9 \xe9trang\xe8re qui utilise la table ",(0,t.jsx)(n.strong,{children:"Maison"}),", la propri\xe9t\xe9 de navigation serait ",(0,t.jsx)(n.strong,{children:"Maison"})," et la propri\xe9t\xe9 de la cl\xe9 serait ",(0,t.jsx)(n.strong,{children:"MaisonId"}),". Par d\xe9faut, la cl\xe9 \xe9trang\xe8re est ",(0,t.jsx)(n.strong,{children:"ON DELETE CASCADE"})," et ",(0,t.jsx)(n.strong,{children:"ON UPDATE NO ACTION"}),". Si la classe parent poss\xe8de une collection de la classe enfant, le lien sera fait automatiquement. Si la table avait 2 cl\xe9s \xe9trang\xe8res sur la m\xeame table, il faudrait configurer la relation dans le contexte."]}),"\n",(0,t.jsxs)(n.p,{children:["Par exemple, pour la classe ",(0,t.jsx)(n.strong,{children:"Carte.cs"}),", il y a la cl\xe9 \xe9trang\xe8re vers la table parent ",(0,t.jsx)(n.strong,{children:"Categorie"}),". Mais il serait possible de modifier la convention en effectuant le 2e exemple. Il faut par contre que le couple de propri\xe9t\xe9s ",(0,t.jsx)(n.strong,{children:"Navigation et cl\xe9 \xe9trang\xe8re"})," respecte la convention."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"//Convention\r\npublic int CategorieId { get; set; } //cl\xe9 \xe9trang\xe8re\r\npublic Categorie Categorie { get; set; } = null!; //propri\xe9t\xe9 de navigation\r\n\r\n//Ceci ferait \xe9galement une relation entre la table Categorie et Carte\r\npublic int CatId { get; set; }\r\npublic Categorie Cat { get; set; } = null!;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,t.jsx)(n.strong,{children:"Data\\Context"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,t.jsx)(n.strong,{children:"SuperCarteContext"})," dans le dossier ",(0,t.jsx)(n.strong,{children:"Data\\Context"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.EntityFrameworkCore;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l'utilisation en programme\r\n    /// </summary>\r\n    /// <param name=\"options\">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d'inclure cette m\xe9thode uniquement si l'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        //V\xe9rifie si la configuration n'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d'un fichier de configuration\r\n            //Option de base pour la migration\r\n            string? chaineConnexion = Environment.GetEnvironmentVariable(\"MIGRATION_CONNECTION_STRING\");\r\n\r\n            //V\xe9rifie si la variable n'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n            }\r\n            else\r\n            {\r\n                //Il n'y a aucune chaine de connexion.\r\n                throw new Exception(\"La variable MIGRATION_CONNECTION_STRING n'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\\"[ma chaine de connexion]\\\" \");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Premi\xe8rement, la classe h\xe9rite de ",(0,t.jsx)(n.strong,{children:"DbContext"}),". Cette classe contient toute la m\xe9canique de communication et de synchronisation du mod\xe8le objet avec la base de donn\xe9es. La classe sp\xe9cifique ",(0,t.jsx)(n.strong,{children:"SuperCarteContext"})," contient uniquement la d\xe9finition de la base de donn\xe9es relationnelle."]}),"\n",(0,t.jsxs)(n.p,{children:["Avec le nom des tables de cette base de donn\xe9es, il serait possible d'utiliser la convention du pluriel. Par contre, avec l'\xe9volution de la base de donn\xe9es , il serait possible qu'une nouvelle table se termine par ",(0,t.jsx)(n.strong,{children:"s"})," s'ajoute. Il ne serait donc pas possible de mettre la r\xe8gle du pluriel."]}),"\n",(0,t.jsxs)(n.p,{children:["Il est possible de choisir le nom des ",(0,t.jsx)(n.strong,{children:"DbSet"}),". Pour ce projet, le suffixe ",(0,t.jsx)(n.strong,{children:"Tb"})," sera ajout\xe9 pour indiquer que c'est la table."]}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnConfiguring"})," contient la logique pour la configuration du serveur par un fichier externe ou par une variable d'environnement."]}),"\n",(0,t.jsxs)(n.p,{children:["La clause ",(0,t.jsx)(n.strong,{children:"#if DEBUG"})," indique au compilateur de tenir compte du code seulement si l'application est en mode ",(0,t.jsx)(n.strong,{children:"Debug"}),". Il ne faut pas que cette configuration soit accessible en production."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["La table ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"})," est volontairement ",(0,t.jsx)(n.strong,{children:"exclue"})," des ",(0,t.jsx)(n.strong,{children:"DbSet"})," pour l'instant, car elle n'a pas de cl\xe9 primaire unique, mais une cl\xe9 primaire compos\xe9e. Ce concept sera pr\xe9sent\xe9 plus tard."]})}),"\n",(0,t.jsx)(n.h3,{id:"migration_connection_string",children:"MIGRATION_CONNECTION_STRING"}),"\n",(0,t.jsxs)(n.p,{children:["Il faut assigner la chaine de connexion dans la variable d'environnement ",(0,t.jsx)(n.strong,{children:"MIGRATION_CONNECTION_STRING"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Il faut faire cette \xe9tape \xe0 chaque d\xe9marrage de ",(0,t.jsx)(n.strong,{children:"Visual Studio"})," s'il est n\xe9cessaire d'effectuer des migrations."]}),"\n",(0,t.jsxs)(n.p,{children:["Dans la ",(0,t.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous."]}),"\n",(0,t.jsx)(n.admonition,{title:"Important",type:"danger",children:(0,t.jsxs)(n.p,{children:["Il est important que le ",(0,t.jsx)(n.strong,{children:"Projet par d\xe9faut"})," de ",(0,t.jsx)(n.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,t.jsx)(n.strong,{children:"SuperCarte.EF"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["\xc0 ce stade, il y a un seul projet, ",(0,t.jsx)(n.strong,{children:"SuperCarte.EF"})," sera le seul de la liste."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour ce projet, utilisez cette chaine de connexion. Le nom de la base de donn\xe9es est ",(0,t.jsx)(n.strong,{children:"eDA_4N1_SuperCarte"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"Attention",type:"danger",children:(0,t.jsxs)(n.p,{children:["Modifiez le ",(0,t.jsx)(n.strong,{children:"DA"})," par votre num\xe9ro d'admission."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Voici la commande avec le ",(0,t.jsx)(n.strong,{children:"Trusted_Connection=True;"})," , si vous avez l'erreur ",(0,t.jsx)(n.strong,{children:"SSL"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;Trust Server Certificate=True;"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Si vous oubliez cette \xe9tape, vous allez avoir ce message lors de l'utilisation des commandes de migration. C'est l'exception de la ligne 46 de la classe du contexte."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'La variable SQL_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING="{ma chaine de connexion}" \n'})}),"\n",(0,t.jsx)(n.h3,{id:"cr\xe9ation-du-fichier-de-migration",children:"Cr\xe9ation du fichier de migration"}),"\n",(0,t.jsx)(n.p,{children:"Le contexte n'est pas complet, mais il est possible de cr\xe9er une base de donn\xe9es."}),"\n",(0,t.jsx)(n.p,{children:"Il faut cr\xe9er un fichier de migration. La syntaxe de la commande est ceci."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration [nom migration] -StartupProject [Nom Projet Entity Framework]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Dans la ",(0,t.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous."]}),"\n",(0,t.jsx)(n.admonition,{title:"Important",type:"danger",children:(0,t.jsxs)(n.p,{children:["Il est important que le ",(0,t.jsx)(n.strong,{children:"Projet par d\xe9faut"})," de ",(0,t.jsx)(n.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console, m\xeame s'il est indiqu\xe9 dans la ligne de commande. Pour ce projet, ce doit \xeatre ",(0,t.jsx)(n.strong,{children:"SuperCarte.EF"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration CreationBD -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Il y a maintenant un dossier ",(0,t.jsx)(n.strong,{children:"Migration"}),". \xc0 l'int\xe9rieur, il y a un fichier avec un ",(0,t.jsx)(n.strong,{children:"timestamp"})," avec le nom de la migration. L'outil ",(0,t.jsx)(n.strong,{children:"Add-Migration"})," s'occupe d'analyser le contexte et de cr\xe9er le fichier de migration correspondant. Il serait possible de faire ce fichier manuellement ou \xe0 partir d'une autre librairie."]}),"\n",(0,t.jsxs)(n.p,{children:["Voici le fichier. La m\xe9thode ",(0,t.jsx)(n.strong,{children:"Up"})," permet d'appliquer la migration \xe0 la base de donn\xe9es et la m\xe9thode ",(0,t.jsx)(n.strong,{children:"Down"})," est de la retirer. Il n'est pas recommand\xe9 de modifier ce fichier s'il a \xe9t\xe9 g\xe9n\xe9r\xe9 par un outil., car il ne sera plus en ",(0,t.jsx)(n.strong,{children:"synchronisation"})," avec le ",(0,t.jsx)(n.strong,{children:"contexte"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\nusing Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace SuperCarte.EF.Migrations\r\n{\r\n    /// <inheritdoc />\r\n    public partial class CreationBD : Migration\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void Up(MigrationBuilder migrationBuilder)\r\n        {\r\n            migrationBuilder.CreateTable(\r\n                name: "CategorieTb",\r\n                columns: table => new\r\n                {\r\n                    CategorieId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_CategorieTb", x => x.CategorieId);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "EnsembleTb",\r\n                columns: table => new\r\n                {\r\n                    EnsembleId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Disponibilite = table.Column<DateTime>(type: "datetime2", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_EnsembleTb", x => x.EnsembleId);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "RoleTb",\r\n                columns: table => new\r\n                {\r\n                    RoleId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_RoleTb", x => x.RoleId);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "CarteTb",\r\n                columns: table => new\r\n                {\r\n                    CarteId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Vie = table.Column<short>(type: "smallint", nullable: false),\r\n                    Armure = table.Column<short>(type: "smallint", nullable: false),\r\n                    Attaque = table.Column<short>(type: "smallint", nullable: false),\r\n                    EstRare = table.Column<bool>(type: "bit", nullable: false),\r\n                    PrixRevente = table.Column<decimal>(type: "decimal(18,2)", nullable: false),\r\n                    CategorieId = table.Column<int>(type: "int", nullable: false),\r\n                    EnsembleId = table.Column<int>(type: "int", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_CarteTb", x => x.CarteId);\r\n                    table.ForeignKey(\r\n                        name: "FK_CarteTb_CategorieTb_CategorieId",\r\n                        column: x => x.CategorieId,\r\n                        principalTable: "CategorieTb",\r\n                        principalColumn: "CategorieId",\r\n                        onDelete: ReferentialAction.Cascade);\r\n                    table.ForeignKey(\r\n                        name: "FK_CarteTb_EnsembleTb_EnsembleId",\r\n                        column: x => x.EnsembleId,\r\n                        principalTable: "EnsembleTb",\r\n                        principalColumn: "EnsembleId",\r\n                        onDelete: ReferentialAction.Cascade);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "UtilisateurTb",\r\n                columns: table => new\r\n                {\r\n                    UtilisateurId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Prenom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    NomUtilisateur = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    MotPasseHash = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    RoleId = table.Column<int>(type: "int", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_UtilisateurTb", x => x.UtilisateurId);\r\n                    table.ForeignKey(\r\n                        name: "FK_UtilisateurTb_RoleTb_RoleId",\r\n                        column: x => x.RoleId,\r\n                        principalTable: "RoleTb",\r\n                        principalColumn: "RoleId",\r\n                        onDelete: ReferentialAction.Cascade);\r\n                });\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: "IX_CarteTb_CategorieId",\r\n                table: "CarteTb",\r\n                column: "CategorieId");\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: "IX_CarteTb_EnsembleId",\r\n                table: "CarteTb",\r\n                column: "EnsembleId");\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: "IX_UtilisateurTb_RoleId",\r\n                table: "UtilisateurTb",\r\n                column: "RoleId");\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        protected override void Down(MigrationBuilder migrationBuilder)\r\n        {\r\n            migrationBuilder.DropTable(\r\n                name: "CarteTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "UtilisateurTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "CategorieTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "EnsembleTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "RoleTb");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Les fichiers de migration sont incr\xe9mentaux. La g\xe9n\xe9ration d'une migration se base sur le fichier ",(0,t.jsx)(n.strong,{children:"snapshot"})," du dossier de migration."]}),"\n",(0,t.jsx)(n.admonition,{title:"Attention",type:"danger",children:(0,t.jsxs)(n.p,{children:["Il est important d'utiliser la commande ",(0,t.jsx)(n.strong,{children:"Remove-Migration"})," pour retirer une migration de la liste et non supprimer le fichier manuellement. Revoir ",(0,t.jsx)(n.a,{href:"/4N1_2024/docs/Entity%20Framework/EF_modification_bd#comment-retirer-une-migration",children:"comment retirer une migration"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"synchronisation-de-la-base-de-donn\xe9es",children:"Synchronisation de la base de donn\xe9es"}),"\n",(0,t.jsxs)(n.p,{children:["Pour synchroniser une migration avec la base de donn\xe9es, il faut utiliser l'utilitaire ",(0,t.jsx)(n.strong,{children:"Update-Database"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Voici la syntaxe."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject [Nom Projet Entity Framework] -Migration [Nom migration]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Si l'argument ",(0,t.jsx)(n.strong,{children:"-Migration"})," n'est pas sp\xe9cifi\xe9, ce sera toutes les migrations qui seront appliqu\xe9es."]}),"\n",(0,t.jsxs)(n.p,{children:["\xc9galement, dans la chaine de connexion de la variable ",(0,t.jsx)(n.strong,{children:"MIGRATION_CONNECTION_STRING"}),", il faut s'assurer que l'utilisateur sp\xe9cifi\xe9 soit en mesure de cr\xe9er des bases de donn\xe9es. Le premier fichier de migration aura le code de cr\xe9ation de la base de donn\xe9es."]}),"\n",(0,t.jsx)(n.p,{children:"Pour ce projet, utilisez cette commande."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:'Update-Database -StartupProject "SuperCarte.EF" -Migration CreationBD\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es sera pr\xe9sente."]}),"\n",(0,t.jsx)(n.p,{children:"Il y a par contre quelques erreurs."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Les tables se terminent par ",(0,t.jsx)(n.strong,{children:"Tb"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Toutes les propri\xe9t\xe9s ",(0,t.jsx)(n.strong,{children:"string"})," sont des ",(0,t.jsx)(n.strong,{children:"NVARCHAR(max)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Le champ ",(0,t.jsx)(n.strong,{children:"CarteTb.PrixRevente"})," est un ",(0,t.jsx)(n.strong,{children:"DECIMAL(18,2)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Le champ ",(0,t.jsx)(n.strong,{children:"EnsembleTb.Disponible"})," est un ",(0,t.jsx)(n.strong,{children:"datetime2"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Le champ ",(0,t.jsx)(n.strong,{children:"UtilisateurTb.NomUtilisateur"})," n'est pas unique."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Ceci ne respecte pas le ",(0,t.jsx)(n.strong,{children:"DEA"}),". Il faut configurer le contexte pour respecter le ",(0,t.jsx)(n.strong,{children:"DEA"}),"."]}),"\n",(0,t.jsx)("img",{src:"/4N1_2024/img/13_migration_1.png"}),"\n",(0,t.jsx)(n.p,{children:"L'utilisation de la migration permet \xe9galement de conserver les donn\xe9es existantes dans une table."}),"\n",(0,t.jsxs)(n.p,{children:["Dans ",(0,t.jsx)(n.strong,{children:"SSMS"}),", ins\xe9rez un r\xf4le dans la table ",(0,t.jsx)(n.strong,{children:"RoleTb"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"USE eDA_4N1_SuperCarte;\r\nGO\r\n\r\nINSERT INTO RoleTb(Nom)\r\nVALUES ('Administrateur');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["La cl\xe9 primaire n'est pas sp\xe9cifi\xe9e dans le ",(0,t.jsx)(n.strong,{children:"INSERT"}),". La migration consid\xe8re que la cl\xe9 primaire d'une table est ",(0,t.jsx)(n.strong,{children:"auto incr\xe9ment\xe9e"})," par d\xe9faut."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-du-contexte",children:"Configuration du contexte"}),"\n",(0,t.jsx)(n.h3,{id:"onmodelcreating",children:"OnModelCreating"}),"\n",(0,t.jsx)(n.p,{children:"Il est possible d'ajouter des configurations et des sp\xe9cifications \xe0 la base de donn\xe9es."}),"\n",(0,t.jsx)(n.p,{children:"Il est possible de sp\xe9cifier le nom de la table pour chacune des classes, les cl\xe9s primaires compos\xe9es, des types de donn\xe9es sp\xe9cifiques, des contraintes sur une colonne..."}),"\n",(0,t.jsxs)(n.p,{children:["Il faut les ajouter dans la m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnModelCreating"})," du contexte. Il s'agit du ",(0,t.jsx)(n.a,{href:"https://www.entityframeworktutorial.net/efcore/fluent-api-in-entity-framework-core.aspx",children:(0,t.jsx)(n.strong,{children:"FluentAPI"})})," . Il est possible de faire plusieurs configurations avec ",(0,t.jsx)(n.a,{href:"https://www.entityframeworktutorial.net/code-first/dataannotation-in-code-first.aspx",children:(0,t.jsx)(n.strong,{children:"DataAnnotation"})})," directement avec les classes du mod\xe8le, mais certaines configurations doivent \xeatre faites obligatoirement avec ",(0,t.jsx)(n.strong,{children:"FluentAPI"}),". \xc9galement, il y a certaines limitations selon la version de ",(0,t.jsx)(n.strong,{children:"Entity Framework Core"})," utilis\xe9e. Le ",(0,t.jsx)(n.strong,{children:"FluentAPI"})," permet de tout faire. Il est pr\xe9f\xe9rable de le faire dans un endroit centralis\xe9."]}),"\n",(0,t.jsx)(n.h3,{id:"nom-des-tables",children:"Nom des tables"}),"\n",(0,t.jsxs)(n.p,{children:["Pour d\xe9buter, il faut modifier le nom des tables pour retirer le suffixe ",(0,t.jsx)(n.strong,{children:"Tb"})," dans la base de donn\xe9es, mais il faut le conserver dans les ",(0,t.jsx)(n.strong,{children:"DBSet"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Ajoutez la m\xe9thode ci-dessous dans la classe ",(0,t.jsx)(n.strong,{children:"SuperCarteContext.cs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\r\n/// Configuration sp\xe9cifique de la base de donn\xe9es\r\n/// </summary>\r\n/// <param name="modelBuilder"></param>\r\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n{\r\n    //Table Role\r\n    modelBuilder.Entity<Role>(entity =>\r\n    {\r\n        //Sp\xe9cifie le nom de la table dans la BD\r\n        entity.ToTable("Role");\r\n    });\r\n\r\n    //Table Utilisateur\r\n    modelBuilder.Entity<Utilisateur>(entity =>\r\n    {\r\n        entity.ToTable("Utilisateur");\r\n    });\r\n\r\n    //Table Categorie\r\n    modelBuilder.Entity<Categorie>(entity =>\r\n    {\r\n        entity.ToTable("Categorie");\r\n    });\r\n\r\n    //Table Ensemble\r\n    modelBuilder.Entity<Ensemble>(entity =>\r\n    {\r\n        entity.ToTable("Ensemble");\r\n    });\r\n\r\n    //Table Carte\r\n    modelBuilder.Entity<Carte>(entity =>\r\n    {\r\n        entity.ToTable("Carte");\r\n    });\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Pour chacune des ",(0,t.jsx)(n.strong,{children:"entit\xe9s (mod\xe8les/tables)"}),", il faut utiliser le ",(0,t.jsx)(n.strong,{children:"modelBuilder"})," pour faire la configuration. Dans une mod\xe9lisation de donn\xe9es, le terme ",(0,t.jsx)(n.strong,{children:"Entit\xe9"})," est utilis\xe9 pour repr\xe9senter un concept.  Donc une ",(0,t.jsx)(n.strong,{children:"entit\xe9"})," dans une base de donn\xe9es est une ",(0,t.jsx)(n.strong,{children:"table"})," et pour un mod\xe8le objet une classe de ",(0,t.jsx)(n.strong,{children:"mod\xe8le de donn\xe9es"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"ToTable()"})," permet d'indiquer le nom que devra avoir la table dans la base de donn\xe9es (rappelez-vous que pr\xe9sentement, les tables ont le suffix Tb car il \xe9tait utilis\xe9 dans le DbSet). Il serait possible de s'adapter aux standards propres de l'organisation/technologie en utilisant que des minuscules, PascalCase, camelCase, la pluralisation, le underscore pour une table pivot..."]}),"\n",(0,t.jsxs)(n.p,{children:["Dans la ",(0,t.jsx)(n.strong,{children:"Console du gestionnaire de Package"}),", cr\xe9ez la migration ",(0,t.jsx)(n.strong,{children:"RenommerTables"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration RenommerTables -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Si vous ouvrez le fichier ",(0,t.jsx)(n.strong,{children:"xxx_RenommerTables.cs"})," dans le dossier de migration, il y aura seulement la logique pour renommer les tables. En ",(0,t.jsx)(n.strong,{children:"SQL"}),", cette t\xe2che demanderait beaucoup de code."]}),"\n",(0,t.jsxs)(n.p,{children:["Appliquez la migration avec la commande ",(0,t.jsx)(n.strong,{children:"Update-Database"}),". Il faut sp\xe9cifier la migration ",(0,t.jsx)(n.strong,{children:"RenommerTables"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Pour ce projet, utilisez cette commande."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Update-Database -StartupProject SuperCarte.EF -Migration RenommerTables \n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es sera pr\xe9sente avec les nouveaux noms."]}),"\n",(0,t.jsx)("img",{src:"/4N1_2024/img/13_migration_2.png"}),"\n",(0,t.jsxs)(n.p,{children:["Effectuez \xe9galement la requ\xeate ci-dessous. L'enregistrement ",(0,t.jsx)(n.strong,{children:"Administrateur"})," est toujours l\xe0."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM [Role];\n"})}),"\n",(0,t.jsx)(n.h3,{id:"__efmigrationshistory",children:"__EFMigrationsHistory"}),"\n",(0,t.jsxs)(n.p,{children:["La base de donn\xe9es a \xe9galement une table ",(0,t.jsx)(n.strong,{children:"__EFMigrationsHistory"}),". Cette table permet de lister les migrations qui ont \xe9t\xe9 appliqu\xe9es sur la base de donn\xe9es."]}),"\n",(0,t.jsx)(n.p,{children:"La table a actuellement ces enregistrements."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MigrationId\t\t\t\t\t\t\t\t\t\t\t\t\t\tProductVersion\r\n20230315124209_CreationBD\t\t\t\t\t\t\t\t\t\t7.0.4\r\n20230315131307_RenommerTables\t\t\t\t\t\t\t\t\t7.0.4\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Pour revenir \xe0 l'\xe9tat initial, il faut appliquer de nouveau la migration ",(0,t.jsx)(n.strong,{children:"CreationBD"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Pour ce projet, utilisez cette commande."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Update-Database -Migration CreationBD\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es sera pr\xe9sente avec les anciens noms."]}),"\n",(0,t.jsxs)(n.p,{children:["La table ",(0,t.jsx)(n.strong,{children:"__EFMigrationsHistory"})," a seulement cet enregistrement."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MigrationId\t\t\t\t\t\t\t\t\t\t\t\t\t\tProductVersion\r\n20230315124209_CreationBD\t\t\t\t\t\t\t\t\t\t7.0.4\n"})}),"\n",(0,t.jsx)(n.h3,{id:"cr\xe9er-une-cl\xe9-primaire-compos\xe9e",children:"Cr\xe9er une cl\xe9 primaire compos\xe9e"}),"\n",(0,t.jsxs)(n.p,{children:["Il faut cr\xe9er une cl\xe9 primaire compos\xe9e pour la table ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte.cs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class UtilisateurCarte\r\n{\r\n    public int UtilisateurId { get; set; }\r\n    public int CarteId { get; set; }\r\n    public short Quantite { get; set; }\r\n    public Utilisateur Utilisateur { get; set; } = null!;\r\n    public Carte Carte { get; set; } = null!;\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,t.jsx)(n.strong,{children:"Carte.cs"})," pour ajouter la collection ",(0,t.jsx)(n.strong,{children:"UtilisateurCarteListe"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Carte\r\n{\r\n    public int CarteId { get; set; }\r\n    public string Nom { get; set; } = null!;\r\n    public byte[]? Image { get; set; }\r\n    public short Vie { get; set; }\r\n    public short Armure { get; set; }\r\n    public short Attaque { get; set; }\r\n    public bool EstRare { get; set; }\r\n    public decimal PrixRevente { get; set; }\r\n    public int CategorieId { get; set; }\r\n    public int EnsembleId { get; set; }\r\n    public Categorie Categorie { get; set; } = null!;\r\n    public Ensemble Ensemble { get; set; } = null!;\r\n//highlight-next-line\r\n    public ICollection<UtilisateurCarte> UtilisateurCarteListe { get; set; } = new List<UtilisateurCarte>();\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,t.jsx)(n.strong,{children:"Utilisateur.cs"})," pour ajouter la collection ",(0,t.jsx)(n.strong,{children:"UtilisateurCarteListe"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Utilisateur\r\n{\r\n    public int UtilisateurId {  get; set; }\r\n    public string Prenom { get; set; } = null!;\r\n    public string Nom { get; set; } = null!;\r\n    public string NomUtilisateur { get; set; } = null!;\r\n    public string MotPasseHash { get; set; } = null!;\r\n    public int RoleId { get; set; }\r\n    public Role Role { get; set; } = null!;\r\n    //highlight-next-line\r\n    public ICollection<UtilisateurCarte> UtilisateurCarteListe { get; set; } = new List<UtilisateurCarte>();\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Remplacez le code de la classe ",(0,t.jsx)(n.strong,{children:"SuperCarteContext"})," par celui-ci afin d'ajouter le ",(0,t.jsx)(n.strong,{children:"DBSet<UtilisateurCarte>"})," dans le contexte."]}),"\n",(0,t.jsx)(n.p,{children:"L'ajout est \xe0 la ligne 112. Il a y \xe9galement la sp\xe9cification du nom de la table \xe0 la ligne 94."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration\r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n        });\r\n\r\n//highlight-start\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n        });\r\n//highlight-end\r\n    }\r\n\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n//highlight-next-line\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Effectuez une nouvelle migration nomm\xe9e ",(0,t.jsx)(n.strong,{children:"AjouterTableUtilisateurCarte"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration AjouterTableUtilisateurCarte -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsx)(n.p,{children:"Vous allez avoir ce message d'erreur."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"The entity type 'UtilisateurCarte' requires a primary key to be defined. If you intended to use a keyless entity type, call 'HasNoKey' in 'OnModelCreating'. For more information on keyless entity types, see https://go.microsoft.com/fwlink/?linkid=2141943.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ceci indique que la classe ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"})," n'a pas de cl\xe9 primaire, car il n'y a pas de propri\xe9t\xe9 ",(0,t.jsx)(n.strong,{children:"UtilisateurCarteId"}),". Le g\xe9n\xe9rateur de migration n'est pas en mesure de d\xe9terminer que les propri\xe9t\xe9s ",(0,t.jsx)(n.strong,{children:"UtilisateurId"})," et ",(0,t.jsx)(n.strong,{children:"CarteId"})," sont les cl\xe9s primaires. Il faut donc le sp\xe9cifier dans le contexte."]}),"\n",(0,t.jsxs)(n.p,{children:["Modifiez la partie ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"})," dans la m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnModelCreating()"})," du contexte."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'//Table UtilisateurCarte\r\nmodelBuilder.Entity<UtilisateurCarte>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("UtilisateurCarte");\r\n\r\n    //Sp\xe9cifie la cl\xe9 primaire\r\n    entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasKey()"})," permet de sp\xe9cifier la cl\xe9 primaire. Si la cl\xe9 est repr\xe9sent\xe9e par plusieurs champs, il faut cr\xe9er un objet dynamique ",(0,t.jsx)(n.strong,{children:"new "})," et ins\xe9rer toutes les propri\xe9t\xe9s qui repr\xe9sentent la cl\xe9 primaire."]}),"\n",(0,t.jsxs)(n.p,{children:["Il peut arriver qu'une table n'utilise pas une cl\xe9 artificielle pour la cl\xe9 primaire. Par exemple, la table ",(0,t.jsx)(n.strong,{children:"Etudiant"})," peut avoir comme cl\xe9 primaire le champ ",(0,t.jsx)(n.strong,{children:"DA"})," et non ",(0,t.jsx)(n.strong,{children:"EtudiantId"}),". Il faudrait sp\xe9cifier ",(0,t.jsx)(n.strong,{children:"entity.HasKey(t => t.DA)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Effectuez une nouvelle migration nomm\xe9e ",(0,t.jsx)(n.strong,{children:"AjouterTableUtilisateurCarte"}),". Elle devrait fonctionner."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration AjouterTableUtilisateurCarte\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Dans le fichier de migration ",(0,t.jsx)(n.strong,{children:"xxx_AjouterTableUtilisateurCarte.cs"})," du dossier ",(0,t.jsx)(n.strong,{children:"Migrations"}),", il y a seulement la logique de la cr\xe9ation de la table ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"}),". Il prend en consid\xe9ration les anciennes migrations, dont ",(0,t.jsx)(n.strong,{children:"RemommerTables"})," m\xeame si elle n'est pas actuellement appliqu\xe9e."]}),"\n",(0,t.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,t.jsx)(n.strong,{children:"AjouterTableUtilisateurCarte"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Update-Database -StartupProject SuperCarte.EF -Migration AjouterTableUtilisateurCarte\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura de nouveau les bons noms de table et la table ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"})," est pr\xe9sente avec ses cl\xe9s primaires."]}),"\n",(0,t.jsx)("img",{src:"/4N1_2024/img/13_migration_3.png"}),"\n",(0,t.jsxs)(n.p,{children:["La table ",(0,t.jsx)(n.strong,{children:"__EFMigrationsHistory"})," a toutes les migrations qui ont \xe9t\xe9 appliqu\xe9es \xe0 la base de donn\xe9es. La migration ",(0,t.jsx)(n.strong,{children:"RenommerTables"})," a \xe9t\xe9 ex\xe9cut\xe9e de nouveau, car la version de la BD \xe9tait celle de ",(0,t.jsx)(n.strong,{children:"CreationBD"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"MigrationId\t\t\t\t\t\t\t\t\t\t\t\t\t\tProductVersion\r\n20230315124209_CreationBD\t\t\t\t\t\t\t\t\t\t7.0.4\r\n20230315131307_RenommerTables\t\t\t\t\t\t\t\t\t7.0.4\r\n20230315140002_AjouterTableUtilisateurCarte\t\t\t\t\t\t7.0.4\n"})}),"\n",(0,t.jsx)(n.h3,{id:"type-des-champs---string-decimal-et-date",children:"Type des champs - string, decimal et date"}),"\n",(0,t.jsxs)(n.p,{children:["Actuellement, toutes les chaines de caract\xe8res sont des ",(0,t.jsx)(n.strong,{children:"NVARCHAR(MAX)"}),". Il est de plus en plus fr\xe9quent de ne plus sp\xe9cifier la longueur des chaines de caract\xe8res qui ne sont pas fixes, car il est difficile de d\xe9terminer la bonne longueur pour plusieurs champs. La longueur est souvent sp\xe9cifi\xe9e par l'exp\xe9rience, mais sans consid\xe9ration valable. Le ",(0,t.jsx)(n.strong,{children:"NVARCHAR(MAX)"})," va seulement utiliser l'espace n\xe9cessaire. La gestion des contraintes se fait normalement au niveau du logiciel maintenant. Si la longueur maximale doit \xeatre modifi\xe9e, il n'est pas n\xe9cessaire de modifier la base de donn\xe9es, seulement la partie ",(0,t.jsx)(n.strong,{children:"validation"})," dans le logiciel."]}),"\n",(0,t.jsxs)(n.p,{children:["Mais en tant que programmeur, il faut r\xe9aliser le ",(0,t.jsx)(n.strong,{children:"DEA"})," tel que produit par le concepteur. Si vous \xeates le concepteur, posez-vous la question s'il est n\xe9cessaire de limiter la longueur d'un champ ou de ne pas permettre le ",(0,t.jsx)(n.strong,{children:"unicode"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Le ",(0,t.jsx)(n.strong,{children:"modelBuilder"})," a la m\xe9thode ",(0,t.jsx)(n.strong,{children:"Property()"})," qui permet de sp\xe9cifier les \xe9l\xe9ments sp\xe9cifiques \xe0 un champ. La m\xe9thode ",(0,t.jsx)(n.strong,{children:"Property()"})," est chainable, donc il est possible d'ajouter toutes les sp\xe9cifications d'un coup pour une propri\xe9t\xe9. Elle re\xe7oit en param\xe8tre une fonction ",(0,t.jsx)(n.strong,{children:"Lambda"})," pour sp\xe9cifier la propri\xe9t\xe9. La variable ",(0,t.jsx)(n.strong,{children:"t"})," est utilis\xe9e pour ",(0,t.jsx)(n.strong,{children:"Table"}),". Ensuite, les autres m\xe9thodes chainables permettent de configurer la propri\xe9t\xe9/champ."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour sp\xe9cifier la longueur maximale, c'est la m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasMaxLength()"})," qui permet de la sp\xe9cifier."]}),"\n",(0,t.jsxs)(n.p,{children:["Dans le ",(0,t.jsx)(n.strong,{children:"DEA"}),", ce sont des ",(0,t.jsx)(n.strong,{children:"VARCHAR"})," et non des ",(0,t.jsx)(n.strong,{children:"NVARCHAR"}),". La m\xe9thode ",(0,t.jsx)(n.strong,{children:"IsUnicode(false)"})," permet d'indiquer que ce n'est pas un ",(0,t.jsx)(n.strong,{children:"NVARCHAR"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Voici les exemples pour la configuration des diff\xe9rents cas. La classe compl\xe8te sera fourni \xe0 la fin de la section."}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Role"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:'//Table Role\r\nmodelBuilder.Entity<Role>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Role");\r\n\r\n    entity.Property(t => t.Nom)\r\n        .IsUnicode(false) //VARCHAR ou CHAR\r\n        .HasMaxLength(25); //VARCHAR(25)        \r\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Utilisateur"}),", le champ ",(0,t.jsx)(n.strong,{children:"MotPasseHash"})," est un ",(0,t.jsx)(n.strong,{children:"CHAR(60)"}),". La longueur d'un ",(0,t.jsx)(n.strong,{children:"Hash"})," est fixe \xe0 60 caract\xe8res pour l'algorithme ",(0,t.jsx)(n.strong,{children:"Bcrypt"}),". Ce sera l'algorithme utilis\xe9 pour ce projet. Pour ce cas, il est pertinent pour le concepteur de fixer la longueur. La m\xe9thode ",(0,t.jsx)(n.strong,{children:"IsFixedLength()"})," permet d'indiquer que c'est un ",(0,t.jsx)(n.strong,{children:"NCHAR"})," ou un ",(0,t.jsx)(n.strong,{children:"CHAR"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:'//Table Utilisateur\r\nmodelBuilder.Entity<Utilisateur>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Utilisateur");           \r\n\r\n    entity.Property(t => t.MotPasseHash)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(true) //CHAR\r\n        .HasMaxLength(60);\r\n    \r\n    /*Autres colonnes \xe0 ajouter*/\r\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Carte"}),", le champ ",(0,t.jsx)(n.strong,{children:"PrixRevente"})," doit \xeatre un ",(0,t.jsx)(n.strong,{children:"DECIMAL(8,2)"}),". La m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasPrecision()"})," permet de pr\xe9ciser la pr\xe9cision d'un ",(0,t.jsx)(n.strong,{children:"DECIMAL"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:'//Table Carte\r\nmodelBuilder.Entity<Carte>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Carte");\r\n\r\n    entity.Property(t => t.PrixRevente)\r\n        .HasPrecision(8, 2); //DECIMAL(8,2)\r\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Ensemble"}),", le champ ",(0,t.jsx)(n.strong,{children:"Disponibilite"})," doit \xeatre de type ",(0,t.jsx)(n.strong,{children:"DATE"}),". Actuellement c'est un ",(0,t.jsx)(n.strong,{children:"DATETIME2"}),". La m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasColumnType()"})," permet de sp\xe9cifier directement un type. Il faut s'assurer que le type est compatible avec celui de la classe."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:'//Table Ensemble\r\nmodelBuilder.Entity<Ensemble>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Ensemble");\r\n\r\n    entity.Property(t => t.Disponibilite)\r\n        .HasColumnType("DATE");\r\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Voici la classe ",(0,t.jsx)(n.strong,{children:"SuperCarteContext.cs"})," au complet avec tous les ajustements pour les champs."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="CELLE LA, COPIEZ LA"',children:'using Microsoft.EntityFrameworkCore;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration\r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false) //VARCHAR ou CHAR\r\n                .HasMaxLength(25); //VARCHAR(25)   \r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n\r\n            entity.Property(t => t.Prenom)\r\n                .IsUnicode(false)                    \r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.NomUtilisateur)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.MotPasseHash)\r\n                .IsUnicode(false)\r\n                .IsFixedLength(true) //CHAR\r\n                .HasMaxLength(60);\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(35);\r\n\r\n            entity.Property(t => t.Description)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Disponibilite)\r\n                .HasColumnType("DATE");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(100);\r\n\r\n            entity.Property(t => t.PrixRevente)\r\n                .HasPrecision(8,2);\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n\r\n            //Sp\xe9cifie la cl\xe9 primaire\r\n            entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n        });\r\n    }\r\n\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,t.jsx)(n.strong,{children:"CorrectionType"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration CorrectionType -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,t.jsx)(n.strong,{children:"CorrectionType"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"Update-Database -StartupProject SuperCarte.EF -Migration CorrectionType\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura les nouveaux types pour les champs modifi\xe9s."]}),"\n",(0,t.jsx)(n.h3,{id:"ajout-dune-contrainte-dunicit\xe9",children:"Ajout d'une contrainte d'unicit\xe9"}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Utilisateur"}),", le champ ",(0,t.jsx)(n.strong,{children:"NomUtilisateur"})," doit \xeatre unique."]}),"\n",(0,t.jsx)(n.p,{children:"Cette contrainte est assez importante dans la base de donn\xe9es, car s'il y a un probl\xe8me dans l'application pour faire la validation d'un doublon, l'application aurait une faille de s\xe9curit\xe9."}),"\n",(0,t.jsxs)(n.p,{children:["Une contrainte d'unicit\xe9 permet de cr\xe9er un ",(0,t.jsx)(n.strong,{children:"index"})," de recherche sur le champ et d'indiquer la contrainte ",(0,t.jsx)(n.strong,{children:"UNIQUE"}),". Il faut donc cr\xe9er un ",(0,t.jsx)(n.strong,{children:"index"})," dans le contexte et de le sp\xe9cifier comme unique. La sp\xe9cification est \xe0 la ligne 24. Par contre, dans la base de donn\xe9es, il n'y aura pas de contrainte explicite ",(0,t.jsx)(n.strong,{children:"UNIQUE"})," sur le champ. Ce sera uniquement l'index qui s'occupera de valider l'unicit\xe9. L'ajout de l'index unique est \xe0 la ligne 25 du code ci-dessous."]}),"\n",(0,t.jsx)(n.p,{children:"Remplacez la section pour Table Utilisateur dans SuperCarteContext.cs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'\r\n//Table Utilisateur\r\nmodelBuilder.Entity<Utilisateur>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Utilisateur");\r\n\r\n    entity.Property(t => t.Prenom)\r\n        .IsUnicode(false)                    \r\n        .HasMaxLength(50);\r\n\r\n    entity.Property(t => t.Nom)\r\n        .IsUnicode(false)\r\n        .HasMaxLength(50);\r\n\r\n    entity.Property(t => t.NomUtilisateur)\r\n        .IsUnicode(false)\r\n        .HasMaxLength(50);\r\n\r\n    entity.Property(t => t.MotPasseHash)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(true) //CHAR\r\n        .HasMaxLength(60);\r\n\r\n//highlight-next-line\r\n    entity.HasIndex(t => t.NomUtilisateur).IsUnique(true);\r\n});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,t.jsx)(n.strong,{children:"UtilisateurNomUtilisateurUnique"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration UtilisateurNomUtilisateurUnique -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,t.jsx)(n.strong,{children:"UtilisateurNomUtilisateurUnique"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration UtilisateurNomUtilisateurUnique\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura l'index avec la mention ",(0,t.jsx)(n.strong,{children:"Unique"})," sur le champ ",(0,t.jsx)(n.strong,{children:"NomUtilisateur"}),". Il n'aura pas de contrainte ",(0,t.jsx)(n.strong,{children:"UNIQUE"})," sur le champ, mais le r\xe9sultat est le m\xeame."]}),"\n",(0,t.jsx)(n.h3,{id:"on-delete-no-action",children:"ON DELETE NO ACTION"}),"\n",(0,t.jsxs)(n.p,{children:["Par d\xe9faut, les cl\xe9s \xe9trang\xe8res ont la r\xe8gle ",(0,t.jsx)(n.strong,{children:"ON DELETE CASCADE"}),". Dans certains cas, ce comportement peut \xeatre int\xe9ressant, car ceci permet de supprimer plusieurs enregistrements \xe0 partie de l'enregistrement parent."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"}),", il pourrait \xeatre int\xe9ressant de conserver le ",(0,t.jsx)(n.strong,{children:"ON DELETE CASCADE"})," sur la cl\xe9 \xe9trang\xe8re ",(0,t.jsx)(n.strong,{children:"UtilisateurId"}),". Si l'utilisateur est supprim\xe9, les cartes qu'ils poss\xe8dent le seront \xe9galement."]}),"\n",(0,t.jsxs)(n.p,{children:["Par contre, pour la cl\xe9 \xe9trang\xe8re carte, il n'est pas int\xe9ressant de le faire, car si une carte est supprim\xe9e, elle disparaitrait de tous les utilisateurs. L'administrateur avant de supprimer une carte qui est utilis\xe9e par des utilisateurs devra prendre une action sp\xe9ciale s'il d\xe9sire r\xe9ellement supprimer la carte, soit en offrant une nouvelle carte en compensation. Il serait possible de g\xe9rer ce comportement dans le code uniquement, mais en cas de ",(0,t.jsx)(n.strong,{children:"bug"}),", les cons\xe9quences peuvent \xeatre importantes. Il peut \xeatre pr\xe9f\xe9rable de limiter ce comportement dans la base de donn\xe9es \xe9galement."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour le ",(0,t.jsx)(n.strong,{children:"ON UPDATE"}),", il est toujours \xe0 ",(0,t.jsx)(n.strong,{children:"NO ACTION"})," avec ",(0,t.jsx)(n.strong,{children:"Entity Framework"}),", m\xeame si la table est configur\xe9e de cette fa\xe7on dans la base de donn\xe9es."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour l'instant, toutes les cl\xe9s \xe9trang\xe8res auront ",(0,t.jsx)(n.strong,{children:"ON DELETE NO ACTION"}),". Pour ",(0,t.jsx)(n.strong,{children:"Entity Framework"}),", il faut mettre ",(0,t.jsx)(n.strong,{children:"DeleteBehavior.ClientSetNull"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Il faut donc configurer manuellement dans le ",(0,t.jsx)(n.strong,{children:"contexte"})," la relation ",(0,t.jsx)(n.strong,{children:"Plusieurs \xe0 1"})," avec la m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasOne()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Utilisateur"}),", la relation est avec la table ",(0,t.jsx)(n.strong,{children:"Role"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"//Table Utilisateur\r\nmodelBuilder.Entity<Utilisateur>(entity =>\r\n{\r\n    /** Code pr\xe9c\xe9dent retir\xe9 pour l'exemple uniquement **/\r\n\r\n    entity.HasOne(t => t.Role).WithMany(p => p.UtilisateurListe)\r\n        .HasForeignKey(t => t.RoleId)\r\n        .OnDelete(DeleteBehavior.ClientSetNull);\r\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasOne(t => t.Role)"})," indique qu'il y a une relation ",(0,t.jsx)(n.strong,{children:"Plusieurs \xe0 1"})," avec la table/mod\xe8le ",(0,t.jsx)(n.strong,{children:"Role"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"WithMany(p => p.UtilisateurListe)"})," indique la relation ",(0,t.jsx)(n.strong,{children:"1 \xe0 plusieurs"})," de la table/mod\xe8le ",(0,t.jsx)(n.strong,{children:"Role"})," avec la table/mod\xe8le ",(0,t.jsx)(n.strong,{children:"Utilisateur"}),". La variable ",(0,t.jsx)(n.strong,{children:"p"})," est pour ",(0,t.jsx)(n.strong,{children:"Table Parent"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasForeignKey(t => t.RoleId)"})," indique que la cl\xe9 \xe9trang\xe8re de la table/mod\xe8le ",(0,t.jsx)(n.strong,{children:"Role"})," est la propri\xe9t\xe9 ",(0,t.jsx)(n.strong,{children:"RoleId"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["La m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnDelete(DeleteBehavior.ClientSetNull)"})," permet d'indiquer que la r\xe8gle est ",(0,t.jsx)(n.strong,{children:"No Action"}),". Malgr\xe9 que l'option ",(0,t.jsx)(n.strong,{children:"DeleteBehavior.NoAction"})," existe, il est recommand\xe9 de prendre ",(0,t.jsx)(n.strong,{children:"DeleteBehavior.ClientSetNull"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour la classe ",(0,t.jsx)(n.strong,{children:"Carte"})," et ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"}),", il y a 2 cl\xe9s \xe9trang\xe8res. Il faut le faire pour les 2 cl\xe9s."]}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"Carte"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"//Table Carte\r\nmodelBuilder.Entity<Carte>(entity =>\r\n{\r\n    /** Code pr\xe9c\xe9dent retir\xe9 pour l'exemple uniquement **/\r\n\r\n    entity.HasOne(t => t.Ensemble).WithMany(p => p.CarteListe)\r\n            .HasForeignKey(t => t.EnsembleId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n    entity.HasOne(t => t.Categorie).WithMany(p => p.CarteListe)\r\n            .HasForeignKey(t => t.CategorieId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Pour la table ",(0,t.jsx)(n.strong,{children:"UtilisateurCarte"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"//Table UtilisateurCarte\r\nmodelBuilder.Entity<UtilisateurCarte>(entity =>\r\n{\r\n    /** Code pr\xe9c\xe9dent retir\xe9 pour l'exemple uniquement **/\r\n\r\n    entity.HasOne(t => t.Utilisateur).WithMany(p => p.UtilisateurCarteListe)\r\n            .HasForeignKey(t => t.UtilisateurId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n    entity.HasOne(t => t.Carte).WithMany(p => p.UtilisateurCarteListe)\r\n            .HasForeignKey(t => t.CarteId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Voici le code du contexte ",(0,t.jsx)(n.strong,{children:"SuperCarteContext.cs"})," au complet."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="CELLE LA, COPIEZ LA"',children:'using Microsoft.EntityFrameworkCore;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    private bool _executerSeed = false;\r\n\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {        \r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration            \r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n\r\n                _executerSeed = true;\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false) //VARCHAR ou CHAR\r\n                .HasMaxLength(25); //VARCHAR(25)   \r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n\r\n            entity.Property(t => t.Prenom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.NomUtilisateur)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.MotPasseHash)\r\n                .IsUnicode(false)\r\n                .IsFixedLength(true) //CHAR\r\n                .HasMaxLength(60);\r\n\r\n            entity.HasIndex(t => t.NomUtilisateur).IsUnique(true);\r\n\r\n//highlight-start\r\n            entity.HasOne(t => t.Role).WithMany(p => p.UtilisateurListe)\r\n                .HasForeignKey(t => t.RoleId)\r\n                .OnDelete(DeleteBehavior.ClientSetNull);\r\n                //highlight-end\r\n\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(35);\r\n\r\n            entity.Property(t => t.Description)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Disponibilite)\r\n                .HasColumnType("DATE");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(100);\r\n\r\n            entity.Property(t => t.PrixRevente)\r\n                .HasPrecision(8,2);\r\n\r\n//highlight-start\r\n            entity.HasOne(t => t.Ensemble).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.EnsembleId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Categorie).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.CategorieId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n//highlight-end\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n\r\n            //Sp\xe9cifie la cl\xe9 primaire\r\n            entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n\r\n            entity.HasOne(t => t.Utilisateur).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.UtilisateurId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Carte).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.CarteId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n    }\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,t.jsx)(n.strong,{children:"FKOnDeleteNoAction"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration FKOnDeleteNoAction -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,t.jsx)(n.strong,{children:"UtilisateurNomUtilisateurUnique"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration FKOnDeleteNoAction\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et les cl\xe9s \xe9trang\xe8res auront ",(0,t.jsx)(n.strong,{children:"No Action"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Voici le r\xe9sultat de la 7e section de **sp_help Utilisateur **."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"constraint_type\t\t\tconstraint_name\t\t\t\tdelete_action\tupdate_action\t\r\nFOREIGN KEY\t\t\t\tFK_Utilisateur_Role_RoleId\tNo Action\t\tNo Action\t\t\n"})}),"\n",(0,t.jsx)(n.h2,{id:"seed---ajout-des-donn\xe9es",children:"Seed - Ajout des donn\xe9es"}),"\n",(0,t.jsxs)(n.p,{children:["Pour ajouter des donn\xe9es, il faut le faire dans la m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnModelCreating()"}),". Cette action s'appelle ",(0,t.jsx)(n.strong,{children:"Seed"})," pour semer des donn\xe9es."]}),"\n",(0,t.jsxs)(n.admonition,{title:"ATTENTION",type:"danger",children:[(0,t.jsxs)(n.p,{children:["Avant de poursuivre, il faut retirer l'enregistrement de la table ",(0,t.jsx)(n.strong,{children:"Role"})," qui a \xe9t\xe9 fait manuellement."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"DELETE FROM Role;\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"pr\xe9paration-du-contexte",children:"Pr\xe9paration du contexte"}),"\n",(0,t.jsxs)(n.p,{children:["Pour \xe9viter que le ",(0,t.jsx)(n.strong,{children:"Seed"})," soit toujours ex\xe9cut\xe9, il est pr\xe9f\xe9rable de modifier le contexte. Ce sera l'attribut ",(0,t.jsx)(n.strong,{children:"_executerSeed"})," qui indiquera si le seeder doit ou non \xeatre ex\xe9cut\xe9."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using Microsoft.EntityFrameworkCore;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    //highlight-next-line\r\n    private bool _executerSeed = false;\r\n\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {        \r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration            \r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n//highlight-next-line\r\n                _executerSeed = true;\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false) //VARCHAR ou CHAR\r\n                .HasMaxLength(25); //VARCHAR(25)   \r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n\r\n            entity.Property(t => t.Prenom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.NomUtilisateur)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.MotPasseHash)\r\n                .IsUnicode(false)\r\n                .IsFixedLength(true) //CHAR\r\n                .HasMaxLength(60);\r\n\r\n            entity.HasIndex(t => t.NomUtilisateur).IsUnique(true);\r\n\r\n            entity.HasOne(t => t.Role).WithMany(p => p.UtilisateurListe)\r\n                .HasForeignKey(t => t.RoleId)\r\n                .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(35);\r\n\r\n            entity.Property(t => t.Description)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Disponibilite)\r\n                .HasColumnType("DATE");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(100);\r\n\r\n            entity.Property(t => t.PrixRevente)\r\n                .HasPrecision(8,2);\r\n\r\n            entity.HasOne(t => t.Ensemble).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.EnsembleId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Categorie).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.CategorieId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n\r\n            //Sp\xe9cifie la cl\xe9 primaire\r\n            entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n\r\n            entity.HasOne(t => t.Utilisateur).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.UtilisateurId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Carte).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.CarteId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n//highlight-start\r\n        if(_executerSeed == true)\r\n        {\r\n            Seed(modelBuilder);\r\n        }\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// M\xe9thode qui s\'occupe de la cr\xe9ation des donn\xe9es\r\n    /// </summary>\r\n    private void Seed(ModelBuilder modelBuilder)\r\n    {\r\n        //Les donn\xe9es \xe0 ajouter\r\n    }\r\n//highlight-end\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["\xc0 la ligne 45, l'activation du ",(0,t.jsx)(n.strong,{children:"Seed"})," se fait uniquement si le contexte est initialis\xe9 en mode ",(0,t.jsx)(n.strong,{children:"Migration"})," dans la m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnConfiguring()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["\xc0 la ligne 171, il y a une v\xe9rification avant d'ex\xe9cuter le ",(0,t.jsx)(n.strong,{children:"Seed"})," dans la m\xe9thode ",(0,t.jsx)(n.strong,{children:"OnModelCreating()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"\xc0 la ligne 181, les donn\xe9es seront cr\xe9\xe9es dans cette m\xe9thode."}),"\n",(0,t.jsx)(n.h3,{id:"cr\xe9ation-des-donn\xe9es",children:"Cr\xe9ation des donn\xe9es"}),"\n",(0,t.jsxs)(n.p,{children:["Pour ajouter des donn\xe9es, il faut envoyer un tableau des donn\xe9es dans la m\xe9thode ",(0,t.jsx)(n.strong,{children:"HasData()"})," de l'entit\xe9 en question."]}),"\n",(0,t.jsxs)(n.p,{children:["Il est obligatoire de sp\xe9cifier les cl\xe9s primaires et \xe9trang\xe8res lors d'un ",(0,t.jsx)(n.strong,{children:"Seed"})," \xe0 partir de la migration avec ",(0,t.jsx)(n.strong,{children:"Entity Framework"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Remplaces la m\xe9thode Seed() avec ce code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\r\n/// M\xe9thode qui s\'occupe de la cr\xe9ation des donn\xe9es\r\n/// </summary>\r\nprivate void Seed(ModelBuilder modelBuilder)\r\n{\r\n    //Les donn\xe9es \xe0 ajouter\r\n    Role[] roles = \r\n    {\r\n        new Role() \r\n        { \r\n            RoleId = 1,\r\n            Nom = "Administrateur"                \r\n        },\r\n        new Role()\r\n        {\r\n            RoleId = 2,\r\n            Nom = "Utilisateur"\r\n        },\r\n    };\r\n\r\n    Utilisateur[] utilisateurs =\r\n    {\r\n        new Utilisateur()\r\n        {\r\n            UtilisateurId = 1,\r\n            Prenom = "Fran\xe7ois",\r\n            Nom = "St-Hilaire",\r\n            NomUtilisateur = "fsthilaire",\r\n            MotPasseHash = "$2y$11$IY6NG9FkTSI1dnjLfSbuOuNkuyI7IZHxHSOD5Td6AlwvroUz/vzLK", \r\n\t\t\t//Native3! avec Bcrypt\r\n            RoleId = 1 //Admin\r\n        },\r\n        new Utilisateur()\r\n        {\r\n            UtilisateurId = 2,\r\n            Prenom = "Benoit",\r\n            Nom = "Tremblay",\r\n            NomUtilisateur = "btremblay",\r\n            MotPasseHash = "$2y$11$ewK3YsMGQ1IMKEzJUAjyVe0P19I0gEbTO998mwfVbSSA8nZ6MG/ha", \r\n\t\t\t//Web4MVC! avec Bcrypt\r\n            RoleId = 2 //Utilisateur\r\n        },\r\n        new Utilisateur() \r\n        {\r\n            UtilisateurId = 3,\r\n            Prenom = "Tony",\r\n            Nom = "Stark",\r\n            NomUtilisateur = "tstark",\r\n            MotPasseHash = "$2y$11$VfcNowkWResPQKl0AA3MJ.w1LXBqmMM77YKlyf32Glr9TWG4xxyD2", \r\n\t\t\t//#NotAdmin! avec Bcrypt\r\n            RoleId = 2 //Utilisateur\r\n        }\r\n    };\r\n\r\n    //Ajout dans les tables\r\n    modelBuilder.Entity<Role>().HasData(roles);\r\n    modelBuilder.Entity<Utilisateur>().HasData(utilisateurs);\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Les utilisateurs ont un mot de passe en ",(0,t.jsx)(n.strong,{children:"Hash"})," avec l'algorithme ",(0,t.jsx)(n.strong,{children:"Bcrypt"}),". Le site web ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://bcrypt.online/",children:"https://bcrypt.online/"})})," a permis de les g\xe9n\xe9rer manuellement pour les ins\xe9rer directement. La librairie ",(0,t.jsx)(n.strong,{children:"Bcrypt.Net"})," sera utilis\xe9e dans l'application."]}),"\n",(0,t.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,t.jsx)(n.strong,{children:"Seed_RoleEtUtilisateur"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Add-Migration Seed_RoleEtUtilisateur -StartupProject SuperCarte.EF\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,t.jsx)(n.strong,{children:"Seed_RoleEtUtilisateur"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration Seed_RoleEtUtilisateur\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Ouvrez ",(0,t.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura des donn\xe9es dans les tables ",(0,t.jsx)(n.strong,{children:"Utilisateur"})," et ",(0,t.jsx)(n.strong,{children:"Role"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var t=r(7294);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);