"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[1391],{5197:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var s=r(5893),i=r(1151);const t={sidebar_position:20},o="CRUD EF en LINQ",l={id:"03 Entity Framework/EF_lecture_des_donnees",title:"CRUD EF en LINQ",description:"Lecture des donn\xe9es",source:"@site/docs/03 Entity Framework/EF_lecture_des_donnees.md",sourceDirName:"03 Entity Framework",slug:"/03 Entity Framework/EF_lecture_des_donnees",permalink:"/4N1_2024/docs/03 Entity Framework/EF_lecture_des_donnees",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"NotesSidebar",previous:{title:"Insertion de donn\xe9es",permalink:"/4N1_2024/docs/03 Entity Framework/EF_seed"},next:{title:"Niveau sup\xe9rieur",permalink:"/4N1_2024/docs/05 Injection de d\xe9pendance/app_sans_main"}},a={},d=[{value:"Lecture des donn\xe9es",id:"lecture-des-donn\xe9es",level:2},{value:"Voir le SQL g\xe9n\xe9r\xe9",id:"voir-le-sql-g\xe9n\xe9r\xe9",level:2},{value:"Exemple 1",id:"exemple-1",level:3},{value:"Exemple 2",id:"exemple-2",level:2},{value:"Exemple 3",id:"exemple-3",level:2},{value:"Mise \xe0 jour massive",id:"mise-\xe0-jour-massive",level:2},{value:"Suppression massive",id:"suppression-massive",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"crud-ef-en-linq",children:"CRUD EF en LINQ"}),"\n",(0,s.jsx)(n.h2,{id:"lecture-des-donn\xe9es",children:"Lecture des donn\xe9es"}),"\n",(0,s.jsxs)(n.p,{children:["Inscrivez directement les blocs de code dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," pour tester."]}),"\n",(0,s.jsxs)(n.p,{children:["Vous devez avoir les 2 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," au d\xe9but du fichier."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using IntroEF.Data.Context;\r\nusing IntroEF.Data;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour avoir une connexion \xe0 la base de donn\xe9es, il faut cr\xe9er une instance du ",(0,s.jsx)(n.strong,{children:"contexte"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'GestionPersonnageContext db = new GestionPersonnageContext();\r\nUnivers univers = db.Univers.FirstOrDefault(); //Retourne le premier univers de la base de donn\xe9es\r\nConsole.WriteLine($"Id : {univers.UniversId}");\r\nConsole.WriteLine($"Nom : {univers.Nom}");\r\ndb.Dispose();\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:"Dispose"})," ferme la connexion."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est pr\xe9f\xe9rable d'utiliser un bloc de code ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})}),". La m\xe9thode ",(0,s.jsx)(n.strong,{children:"Dispose"})," est appel\xe9e automatiquement lorsque le bloc de code est termin\xe9."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using (GestionPersonnageContext db = new GestionPersonnageContext())\r\n{\r\n\tUnivers univers = db.Univers.FirstOrDefault();\r\n    Console.WriteLine($"Id : {univers.UniversId}");\r\n\tConsole.WriteLine($"Nom : {univers.Nom}");\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour faire une requ\xeate \xe0 la base de donn\xe9es, il faut utiliser ",(0,s.jsx)(n.strong,{children:"LINQ"})," en syntaxe ",(0,s.jsx)(n.strong,{children:"Query"})," ou ",(0,s.jsx)(n.strong,{children:"Lambda"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using (GestionPersonnageContext db = new GestionPersonnageContext())\r\n{\r\n    List<Univers> lstUniversQuery = (from lqUnivers in db.Univers\r\n                                     orderby\r\n                                         lqUnivers.AnneeCreation descending\r\n                                     select\r\n                                         lqUnivers).ToList();\r\n\r\n    foreach (Univers univers in lstUniversQuery)\r\n    {\r\n        Console.WriteLine($"Id : {univers.UniversId}");\r\n        Console.WriteLine($"Nom : {univers.Nom}");\r\n    }\r\n\r\n    List<Univers> lstUniversLambda = db.Univers.OrderByDescending(u => u.AnneeCreation).ToList();\r\n\r\n    foreach (Univers univers in lstUniversLambda)\r\n    {\r\n        Console.WriteLine($"Id : {univers.UniversId}");\r\n        Console.WriteLine($"Nom : {univers.Nom}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'utiliser le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," sans cr\xe9er un sous bloc de code. Si le ",(0,s.jsx)(n.strong,{children:"contexte"})," doit exister tout le long de la dur\xe9e de vie de la m\xe9thode, il est possible de d\xe9clarer comme ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'private void MaMethode()\r\n{\r\n    //D\xe9claration du contexte par un using\r\n    using GestionPersonnageContext db = new GestionPersonnageContext();\r\n\r\n    List<Univers> lstUniversQuery = (from lqUnivers in db.Univers\r\n                                     orderby\r\n                                         lqUnivers.AnneeCreation descending\r\n                                     select\r\n                                         lqUnivers).ToList();\r\n\r\n    foreach (Univers univers in lstUniversQuery)\r\n    {\r\n        Console.WriteLine($"Id : {univers.UniversId}");\r\n        Console.WriteLine($"Nom : {univers.Nom}");\r\n    }\r\n} //Fin du contexte\n'})}),"\n",(0,s.jsx)(n.h2,{id:"voir-le-sql-g\xe9n\xe9r\xe9",children:"Voir le SQL g\xe9n\xe9r\xe9"}),"\n",(0,s.jsx)(n.p,{children:"Il peut \xeatre int\xe9ressant de voir le SQL g\xe9n\xe9r\xe9."}),"\n",(0,s.jsxs)(n.p,{children:["Le contexte devra \xeatre cr\xe9\xe9 avec des options. Le SQL sera g\xe9n\xe9r\xe9 dans le fichier ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"C:\\eflog\\{tick}.txt"})}),". Il faut que le dossier ",(0,s.jsx)(n.strong,{children:"c:\\eflog"})," existe."]}),"\n",(0,s.jsx)(n.p,{children:"Il y aura un fichier de cr\xe9er par requ\xeate effectu\xe9e \xe0 la base de donn\xe9es."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging(); //Permet de voir les valeurs\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n\t//Les requ\xeates\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"exemple-1",children:"Exemple 1"}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"SQL"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * \r\nFROM Film\r\nWHERE Etoile >= 8;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    List<Film> lstFilmQuery = (from lqFilm in db.Film\r\n                               where\r\n                                    lqFilm.Etoile >= 8\r\n                               select\r\n                                    lqFilm).ToList();\r\n\r\n    List<Film> lstFilmLambda = db.Film.Where(f => f.Etoile >= 8).ToList();\r\n    \r\n    foreach(Film film in lstFilmLambda)\r\n    {\r\n        Console.WriteLine($"Id : {film.FilmId}");\r\n        Console.WriteLine($"Titre : {film.Titre}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [f].[FilmId], [f].[Budget], [f].[DateSortie], [f].[Duree], [f].[Etoile], [f].[Titre]\r\nFROM [Film] AS [f]\r\nWHERE [f].[Etoile] >= CAST(8 AS tinyint)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"exemple-2",children:"Exemple 2"}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"SQL"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * \r\nFROM Film\r\nWHERE Year(DateSortie) = 2019;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    List<Film> lstFilmQuery = (from lqFilm in db.Film\r\n                               where\r\n                                    lqFilm.DateSortie.Year == 2019\r\n                               select\r\n                                    lqFilm).ToList();\r\n\r\n    List<Film> lstFilmLambda = db.Film.Where(f => f.DateSortie.Year == 2019).ToList();\r\n\r\n    foreach(Film film in lstFilmLambda)\r\n    {\r\n        Console.WriteLine($"Id : {film.FilmId}");\r\n        Console.WriteLine($"Titre : {film.Titre}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [f].[FilmId], [f].[Budget], [f].[DateSortie], [f].[Duree], [f].[Etoile], [f].[Titre]\r\nFROM [Film] AS [f]\r\nWHERE DATEPART(year, [f].[DateSortie]) = 2019\n"})}),"\n",(0,s.jsx)(n.h2,{id:"exemple-3",children:"Exemple 3"}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"SQL"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * \r\nFROM Film\r\nORDER BY Year(DateSortie) ASC, Titre DESC;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    List<Film> lstFilmQuery = (from lqFilm in db.Film\r\n                               orderby \r\n                                lqFilm.DateSortie.Year descending, \r\n                                lqFilm.Titre\r\n                               select\r\n                                    lqFilm).ToList();\r\n\r\n    List<Film> lstFilmLambda = db.Film\r\n        .OrderByDescending(f => f.DateSortie.Year)\r\n        .ThenBy(f => f.Titre).ToList();\r\n\r\n    foreach(Film film in lstFilmLambda)\r\n    {\r\n        Console.WriteLine($"Id : {film.FilmId}");\r\n        Console.WriteLine($"Titre : {film.Titre}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Code ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [f].[FilmId], [f].[Budget], [f].[DateSortie], [f].[Duree], [f].[Etoile], [f].[Titre]\r\nFROM [Film] AS [f]\r\nORDER BY DATEPART(year, [f].[DateSortie]) DESC, [f].[Titre]\n"})}),"\n",(0,s.jsx)(n.h1,{id:"modifier",children:"Modifier"}),"\n",(0,s.jsx)(n.p,{children:"Pour \xeatre en mesure de modifier un enregistrement, il faut avoir une instance d'un objet de l'enregistrement."}),"\n",(0,s.jsxs)(n.p,{children:["Il n'y a pas d'action directe comme ",(0,s.jsx)(n.strong,{children:"SQL"})," pour le faire en une seule commande."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"UPDATE Univers SET Nom = 'DC Comics' WHERE UniversId = 2; --En supposant que DC = 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour faire la m\xeame chose avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", il faut faire un ",(0,s.jsx)(n.strong,{children:"SELECT"})," pour obtenir l'enregistrement et ensuite modifier les valeurs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    //Obetnir l\'univers \xe0 modifier\r\n    Univers univers = (from lqUnivers in db.Univers\r\n                        where\r\n                             lqUnivers.UniversId == 2\r\n                        select\r\n                             lqUnivers).First();\r\n\r\n    //Appliquer la modification\r\n    univers.Nom = "DC Comics";    \r\n\r\n    //Obtenir la liste de tous les univers\r\n    List<Univers> lstUnivers = db.Univers.ToList();\r\n\r\n    //Afficher tous les univers\r\n    foreach(Univers u in lstUnivers)\r\n    {\r\n        Console.WriteLine($"Id : {u.UniversId}");\r\n        Console.WriteLine($"Nom : {u.Nom}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ex\xe9cutez le code et allez voir dans la base de donn\xe9es. Est-ce que l'enregistrement s'y retrouve ? Non il n'est pas dans la base de donn\xe9es."}),"\n",(0,s.jsxs)(n.p,{children:["Pourtant, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"foreach"})})," sur tous les enregistrements de la table l'a affich\xe9."]}),"\n",(0,s.jsxs)(n.p,{children:["Regardez le code ",(0,s.jsx)(n.strong,{children:"SQL"})," g\xe9n\xe9r\xe9. Il aura seulement les 2 ",(0,s.jsx)(n.strong,{children:"SELECT"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["L'enregistrement n'est pas dans la base de donn\xe9es, car l'ajout a \xe9t\xe9 fait en m\xe9moire uniquement dans le ",(0,s.jsx)(n.strong,{children:"contexte"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est important d'appeler la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})})," pour indiquer au contexte qu'il faut appliquer les modifications \xe0 la base de donn\xe9es."]}),"\n",(0,s.jsx)(n.p,{children:"Ex\xe9cutez ce code. La modification sera appliqu\xe9e."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    //Obtenir l\'univers \xe0 modifier\r\n    Univers univers = (from lqUnivers in db.Univers\r\n                        where\r\n                             lqUnivers.UniversId == 2\r\n                        select\r\n                             lqUnivers).First();\r\n\r\n    //Appliquer la modification\r\n    univers.Nom = "DC Comics";\r\n\r\n    db.SaveChanges();    \r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Dans le code g\xe9n\xe9r\xe9, il y aura un ",(0,s.jsx)(n.strong,{children:"UPDATE"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"info: 2023-02-22 13:57:52.904 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) \r\n      Executed DbCommand (86ms) [Parameters=[@p1='2', @p0='DC Comics' (Nullable = false) (Size = 100) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\r\n      SET IMPLICIT_TRANSACTIONS OFF;\r\n      SET NOCOUNT ON;\r\n      UPDATE [Univers] SET [Nom] = @p0\r\n      OUTPUT 1\r\n      WHERE [UniversId] = @p1;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"mise-\xe0-jour-massive",children:"Mise \xe0 jour massive"}),"\n",(0,s.jsxs)(n.p,{children:["Contrairement au langage ",(0,s.jsx)(n.strong,{children:"SQL"}),", il n'est pas possible de faire une mise \xe0 jour sur plusieurs enregistrements en fonction de sa condition."]}),"\n",(0,s.jsx)(n.p,{children:"Voici par exemple, il faut masquer l'identit\xe9 r\xe9elle de tous les personnages de l'univers Marvel."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"UPDATE Personnage SET IdentiteReelle = 'Confidentielle' WHERE UniversId = 1; --En supposant que Marvel = 1;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Si la table a 1 million de personnages de Marvel, cette simple requ\xeate est en mesure de mettre \xe0 jour tous les enregistrements."}),"\n",(0,s.jsxs)(n.p,{children:["Avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", il faut faire en plusieurs \xe9tapes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"R\xe9cup\xe9rer tous les enregistrements"}),"\n",(0,s.jsx)(n.li,{children:"Parcourir les enregistrements"}),"\n",(0,s.jsx)(n.li,{children:"Assign\xe9 la nouvelle valeur \xe0 chaque enregistrement"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    //Obtenir les personnages \xe0 mettre \xe0 jour\r\n    List<Personnage> lstPersonnage =\r\n        (from lqPersonnage in db.Personnage\r\n         where\r\n            lqPersonnage.UniversId == 1\r\n         select lqPersonnage).ToList();\r\n\r\n    \r\n    foreach(Personnage personnage in lstPersonnage)\r\n    {\r\n        personnage.IdentiteReelle = "Confidentielle";\r\n    }\r\n\r\n    db.SaveChanges();    \r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez que le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})})," se fait uniquement \xe0 la fin. Il est possible de faire plusieurs modifications et d'enregistrer les modifications \xe0 la fin."]}),"\n",(0,s.jsxs)(n.p,{children:["Est-ce qu'il aura un seul ou plusieurs ",(0,s.jsx)(n.strong,{children:"UPDATE"})," ? Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"info: 2023-02-22 13:59:54.801 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) \r\n      Executed DbCommand (39ms) [Parameters=[@p1='1', @p0='Confidentielle' (Size = 100) (DbType = AnsiString), @p3='2', @p2='Confidentielle' (Size = 100) (DbType = AnsiString), @p5='5', @p4='Confidentielle' (Size = 100) (DbType = AnsiString), @p7='6', @p6='Confidentielle' (Size = 100) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\r\n      SET NOCOUNT ON;\r\n      UPDATE [Personnage] SET [IdentiteReelle] = @p0\r\n      OUTPUT 1\r\n      WHERE [PersonnageId] = @p1;\r\n      UPDATE [Personnage] SET [IdentiteReelle] = @p2\r\n      OUTPUT 1\r\n      WHERE [PersonnageId] = @p3;\r\n      UPDATE [Personnage] SET [IdentiteReelle] = @p4\r\n      OUTPUT 1\r\n      WHERE [PersonnageId] = @p5;\r\n      UPDATE [Personnage] SET [IdentiteReelle] = @p6\r\n      OUTPUT 1\r\n      WHERE [PersonnageId] = @p7;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il y en a plusieurs. Pour des mises \xe0 jour massives, ",(0,s.jsx)(n.strong,{children:"SQL"})," a toujours son utilit\xe9."]}),"\n",(0,s.jsx)(n.h1,{id:"ajouter",children:"Ajouter"}),"\n",(0,s.jsx)(n.p,{children:"Pour ajouter un nouvel enregistrement dans la base de donn\xe9es, il faut cr\xe9er un nouvel objet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using IntroEF.Data.Context;\r\nusing IntroEF.Data;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nvar optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    //Obetnir l\'univers \xe0 modifier\r\n    Univers univers = new Univers()\r\n    {\r\n        Nom = "Teenage mutant ninja turtles",\r\n        AnneeCreation = 1984,\r\n        Proprietaire = "Paramount",\r\n        SiteWeb = "https://www.teenagemutantninjaturtles.com/"\r\n    };\r\n\r\n    //L\'ajouter dans la base de donn\xe9es\r\n    //Le contexte est en mesure de d\xe9terminer la table par le type de l\'objet\r\n    db.Add(univers);\r\n\r\n    //Affiche la cl\xe9, elle sera \xe0 0\r\n    Console.WriteLine($"Id : {univers.UniversId}");\r\n\r\n    db.SaveChanges();\r\n\r\n    //Affiche la cl\xe9, elle aura une valeur\r\n    Console.WriteLine($"Id : {univers.UniversId}");\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Remarquez que la cl\xe9 n'est pas sp\xe9cifi\xe9e lors de la cr\xe9ation de l'objet. \xc0 la ligne 26, la valeur de la cl\xe9 est 0, car le contexte ne s'est pas mis \xe0 jour avec la base de donn\xe9es."}),"\n",(0,s.jsxs)(n.p,{children:["Une fois que la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})})," a \xe9t\xe9 appel\xe9e, la valeur de la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"UniversId"})," a \xe9t\xe9 mise \xe0 jour avec celle qui a \xe9t\xe9 autog\xe9n\xe9r\xe9e par la base de donn\xe9es."]}),"\n",(0,s.jsx)(n.h1,{id:"supprimer",children:"Supprimer"}),"\n",(0,s.jsx)(n.p,{children:"Pour supprimer un enregistrement, il faut faire une technique similaire \xe0 la mise \xe0 jour."}),"\n",(0,s.jsxs)(n.p,{children:["Pour supprimer l'univers ",(0,s.jsx)(n.strong,{children:"Teenage mutant ninja turtles"}),", il faut faire cette requ\xeate."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DELETE FROM Univers WHERE Nom = 'Teenage mutant ninja turtles';\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", il faut faire en plusieurs \xe9tapes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"R\xe9cup\xe9rer l'enregistrement"}),"\n",(0,s.jsxs)(n.li,{children:["Le retirer du ",(0,s.jsx)(n.strong,{children:"DBSet"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    Univers univers = db.Univers.Where(u => u.Nom == "Teenage mutant ninja turtles").First();\r\n\r\n    //Le contexte est en mesure de d\xe9terminer la table par le type de l\'objet\r\n    db.Remove(univers);\r\n\r\n    db.SaveChanges();\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"suppression-massive",children:"Suppression massive"}),"\n",(0,s.jsxs)(n.p,{children:["Contrairement au langage ",(0,s.jsx)(n.strong,{children:"SQL"}),", il n'est pas possible de supprimer plusieurs enregistrements en fonction de sa condition."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour supprimer toutes les r\xe9f\xe9rences de ",(0,s.jsx)(n.strong,{children:"Spideman"})," dans les films, il faudrait faire ceci en ",(0,s.jsx)(n.strong,{children:"SQL"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DELETE FROM [Distribution] WHERE PersonnageId = 1; --En supposant que Spiderman = 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", il faut faire en plusieurs \xe9tapes."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"R\xe9cup\xe9rer toutes les donn\xe9es"}),"\n",(0,s.jsxs)(n.li,{children:["Les retirer du ",(0,s.jsx)(n.strong,{children:"DBSet"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n\t//Obtenir les distributions \xe0 supprimer\r\n    List<Distribution> lstDistribution =\r\n        (from lqDistribution in db.Distribution\r\n         where\r\n            lqDistribution.PersonnageId == 1\r\n         select lqDistribution).ToList();\r\n    \r\n    //Le contexte est en mesure de d\xe9terminer la table par le type de l\'objet\r\n    db.RemoveRange(lstDistribution);\r\n\r\n    db.SaveChanges();\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),". Encore une fois, il y a plusieurs requ\xeates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"info: 2023-02-22 14:07:33.395 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) \r\n      Executed DbCommand (16ms) [Parameters=[@p0='3', @p1='1', @p2='5', @p3='1'], CommandType='Text', CommandTimeout='30']\r\n      SET NOCOUNT ON;\r\n      DELETE FROM [Distribution]\r\n      OUTPUT 1\r\n      WHERE [FilmId] = @p0 AND [PersonnageId] = @p1;\r\n      DELETE FROM [Distribution]\r\n      OUTPUT 1\r\n      WHERE [FilmId] = @p2 AND [PersonnageId] = @p3;\n"})}),"\n",(0,s.jsx)(n.h1,{id:"transaction",children:"Transaction"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Entity Framework"})," effectue toutes les modifications(ajout, suppression, mise \xe0 jour) de la base de donn\xe9es dans la m\xe9moire de son contexte."]}),"\n",(0,s.jsxs)(n.p,{children:["Toutes les actions sont effectu\xe9es lors de l'ex\xe9cution de la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Est-ce que le comportement de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})})," est comme celui d'une transaction ?"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'var optBuilder = new DbContextOptionsBuilder<GestionPersonnageContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext(optBuilder.Options))\r\n{\r\n    Film film1 = new Film()\r\n    {\r\n        Titre = "Film #1",\r\n        DateSortie = new DateTime(2019, 7, 29),\r\n        Etoile = 4,\r\n        Duree = 123        \r\n    };\r\n\r\n    Film film2 = new Film()\r\n    {\r\n        Titre = "Film #2",\r\n        DateSortie = new DateTime(2017, 8, 9),\r\n        Etoile = 100, //Ne respecte pas la contrainte CHECK de 1 \xe0 10\r\n        Duree = 135\r\n    };\r\n\r\n    Film film3 = new Film()\r\n    {\r\n        Titre = "Film #3",\r\n        DateSortie = new DateTime(2021, 12, 17),\r\n        Etoile = 9,\r\n        Duree = 99\r\n    };    \r\n\r\n    //Ajout des nouveaux films dans le contexte\r\n    db.Add(film1);\r\n    db.Add(film2);\r\n    db.Add(film3);\r\n\r\n    db.SaveChanges();\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Lors de l'ex\xe9cution du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})}),", il y aura une exception."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'SqlException\xa0: The MERGE statement conflicted with the CHECK constraint "CK_Film_Etoile". The conflict occurred in database "eDA_4N1_GestionPersonnage", table "dbo.Film", column \'Etoile\'.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Est-ce qu'une partie des donn\xe9es seront dans la base de donn\xe9es ? Il n'y aura aucun des 3 films, car la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})})," effectue une transaction."]}),"\n",(0,s.jsxs)(n.p,{children:["La gestion de transaction se fait automatiquement, il faut seulement bien g\xe9rer quand est-ce que la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChanges()"})})," doit \xeatre appel\xe9e."]}),"\n",(0,s.jsx)(n.h1,{id:"m\xe9thode-dextension",children:"M\xe9thode d'extension"}),"\n",(0,s.jsxs)(n.p,{children:["Dans une conception objet, il serait int\xe9ressant d'ajouter une m\xe9thode dans la classe ",(0,s.jsx)(n.strong,{children:"Univers"})," qui permettrait d'afficher son information dans la console. Cette approche permet de favoriser la r\xe9utilisation du code, donc d'\xeatre plus ",(0,s.jsx)(n.strong,{children:"DRY"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Ajoutez cette m\xe9thode dans la classe ",(0,s.jsx)(n.strong,{children:"Univers"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'public void AfficherConsole()\r\n{\r\n    Console.WriteLine($"Id : {UniversId}");\r\n    Console.WriteLine($"Nom : {Nom}");\r\n    Console.WriteLine($"Ann\xe9e de cr\xe9ation : {AnneeCreation}");\r\n    Console.WriteLine($"Site Web : {SiteWeb}");\r\n    Console.WriteLine($"Propri\xe9taire : {Proprietaire}");\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Maintenant, il est possible de faire ceci dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"using (GestionPersonnageContext db = new GestionPersonnageContext())\r\n{\r\n    List<Univers> lstUniversQuery = (from lqUnivers in db.Univers\r\n                                     orderby\r\n                                         lqUnivers.AnneeCreation descending\r\n                                     select\r\n                                         lqUnivers).ToList();\r\n\r\n    foreach (Univers univers in lstUniversQuery)\r\n    {\r\n        univers.AfficherConsole();\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il faut maintenant ajouter dans la table le champ ",(0,s.jsx)(n.strong,{children:"TelephoneProprietaire"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE Univers\r\nADD TelephoneProprietaire VARCHAR(15);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il faut mettre \xe0 jour le contexte avec ",(0,s.jsx)(n.strong,{children:"Scaffold-DbContext"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Scaffold-DbContext "Server=localhost\\SQLExpress;Database=eDA_4N1_GestionPersonnage;Trusted_Connection=True;Trust Server Certificate=true;" Microsoft.EntityFrameworkCore.SqlServer -Context GestionPersonnageContext -OutputDir Data -ContextDir Data\\Context\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Compilez de nouveau le code. Il y a une erreur pour la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AfficherConsole()"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Elle n'existe plus dans la classe ",(0,s.jsx)(n.strong,{children:"Univers"}),". Pourtant, la nouvelle propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"TelephoneProprietaire"})," est pr\xe9sente."]}),"\n",(0,s.jsx)(n.p,{children:"Lorsqu'une classe est g\xe9n\xe9r\xe9e et mise \xe0 jour par un outil d'autog\xe9n\xe9ration de code, dans la majorit\xe9 des cas, tous les changements manuels ne seront pas conserv\xe9s."}),"\n",(0,s.jsxs)(n.p,{children:["De plus, selon les principes ",(0,s.jsx)(n.strong,{children:"SOLID"}),", le ",(0,s.jsx)(n.strong,{children:"S"})," est pour une responsabilit\xe9 simple. Pour ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", une classe du mod\xe8le doit contenir seulement les donn\xe9es d'un enregistrement et les propri\xe9t\xe9s de navigations. Elle ne peut pas avoir d'autres responsabilit\xe9s. De plus, il faut \xe9viter de mettre des fonctionnalit\xe9s li\xe9es directement \xe0 l'interface utilisateur dans des classes de mod\xe8les, car il serait possible d'utiliser ces mod\xe8les pour une application web, ensuite une console et WPF."]}),"\n",(0,s.jsxs)(n.p,{children:["Donc, pour \xeatre en mesure d'ajouter des fonctionnalit\xe9s, il faut utiliser des m\xe9thodes d'extension. Le ",(0,s.jsx)(n.strong,{children:"O"})," de ",(0,s.jsx)(n.strong,{children:"SOLID"})," est ",(0,s.jsx)(n.strong,{children:"(open/close)"}),", c'est-\xe0-dire une classe doit \xeatre ferm\xe9e \xe0 la modification directe, mais ouverte \xe0 l'extension. C'est avec ce principe qu'il sera possible d'ajouter la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AfficherConsole()"})})," dans la classe ",(0,s.jsx)(n.strong,{children:"Univers"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un nouveau dossier ",(0,s.jsx)(n.strong,{children:"Extensions"})," dans le projet et cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"UniversConsoleExtensions"}),". Cette classe contiendra les m\xe9thodes pour la console."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'/// <summary>\r\n/// Classe statique qui regroupe les m\xe9thodes d\'extension pour la console du mod\xe8le Univers\r\n/// </summary>\r\npublic static class UniversConsoleExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui affiche l\'information d\'un univers \xe0 la console\r\n    /// </summary>\r\n    /// <param name="univers">Univers</param>\r\n    public static void AfficherConsole(this Univers univers)\r\n    {\r\n        Console.WriteLine($"Id : {univers.UniversId}");\r\n        Console.WriteLine($"Nom : {univers.Nom}");\r\n        Console.WriteLine($"Ann\xe9e de cr\xe9ation : {univers.AnneeCreation}");\r\n        Console.WriteLine($"Site Web : {univers.SiteWeb}");\r\n        Console.WriteLine($"Propri\xe9taire : {univers.Proprietaire}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour ajouter des m\xe9thodes d'extension, il faut obligatoirement les cr\xe9er dans une classe ",(0,s.jsx)(n.strong,{children:"static"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode doit \xe9galement \xeatre ",(0,s.jsx)(n.strong,{children:"static"}),". Remarquez le param\xe8tre, il d\xe9bute par ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"this"})}),". Ceci indique que le premier param\xe8tre consiste \xe0 l'objet qui utilisera la m\xe9thode d'extension."]}),"\n",(0,s.jsx)(n.p,{children:"Voici un exemple."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"Univers u1 = new Univers();\r\n\r\n//Par extension\r\nu1.AfficherConsole();\r\n\r\n//Directement\r\nUniversConsoleExtensions.AfficherConsole(u1);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"u1.AfficherConsole()"})}),"  est en r\xe9alit\xe9 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UniversConsoleExtensions.AfficherConsole(u1);"})})," pour le compilateur."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"}),", est-ce que la m\xe9thode disponible ? Pour quelle soit disponible, il faut ajouter le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," qui contient la classe d'extension."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using IntroEF.Data.Context;\r\nusing IntroEF.Data;\r\nusing IntroEF.Extensions; //Donne acc\xe8s \xe0 AfficherConsole()\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext())\r\n{\r\n    List<Univers> lstUniversQuery = (from lqUnivers in db.Univers\r\n                                     orderby\r\n                                         lqUnivers.AnneeCreation descending\r\n                                     select\r\n                                         lqUnivers).ToList();\r\n\r\n    foreach (Univers univers in lstUniversQuery)\r\n    {\r\n        univers.AfficherConsole();        \r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Il est possible d'ajouter des param\xe8tres dans la m\xe9thode."}),"\n",(0,s.jsxs)(n.p,{children:["Remplacez le code de la classe ",(0,s.jsx)(n.strong,{children:"UniversConsoleExtensions"})," par celui-ci."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'/// <summary>\r\n/// Classe statique qui regroupe les m\xe9thodes d\'extension pour la console du mod\xe8le Univers\r\n/// </summary>\r\npublic static class UniversConsoleExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui affiche l\'information d\'un univers \xe0 la console\r\n    /// </summary>\r\n    /// <param name="univers">Univers</param>\r\n    /// <param name="majuscule">Affiche le texte en majuscule. Faux par d\xe9faut.</param>\r\n    public static void AfficherConsole(this Univers univers, bool majuscule = false)\r\n    {\r\n        if (majuscule == true)\r\n        {\r\n            //En majuscule\r\n            Console.WriteLine($"Id : {univers.UniversId}");\r\n            Console.WriteLine($"Nom : {univers.Nom.ToUpper()}");\r\n            Console.WriteLine($"Id : {univers.UniversId}");\r\n            Console.WriteLine($"Ann\xe9e de cr\xe9ation : {univers.AnneeCreation}");\r\n            Console.WriteLine($"Site Web : {univers.SiteWeb.ToUpper()}");\r\n            Console.WriteLine($"Propri\xe9taire : {univers.Proprietaire.ToUpper()}");\r\n        }\r\n        else\r\n        {\r\n            //Aucun changement\r\n            Console.WriteLine($"Id : {univers.UniversId}");\r\n            Console.WriteLine($"Nom : {univers.Nom}");\r\n            Console.WriteLine($"Ann\xe9e de cr\xe9ation : {univers.AnneeCreation}");\r\n            Console.WriteLine($"Site Web : {univers.SiteWeb}");\r\n            Console.WriteLine($"Propri\xe9taire : {univers.Proprietaire}");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Il est donc possible de faire ceci."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using IntroEF.Data.Context;\r\nusing IntroEF.Data;\r\nusing IntroEF.Extensions; //Donne acc\xe8s \xe0 AfficherConsole()\r\n\r\nusing (GestionPersonnageContext db = new GestionPersonnageContext())\r\n{\r\n    List<Univers> lstUniversQuery = (from lqUnivers in db.Univers\r\n                                     orderby\r\n                                         lqUnivers.AnneeCreation descending\r\n                                     select\r\n                                         lqUnivers).ToList();\r\n\r\n    foreach (Univers univers in lstUniversQuery)\r\n    {\r\n        univers.AfficherConsole(); //false par d\xe9faut => UniversConsoleExtensions.AfficherConsole(univers);       \r\n        univers.AfficherConsole(false); //false sp\xe9cifi\xe9 => UniversConsoleExtensions.AfficherConsole(univers, false);\r\n        univers.AfficherConsole(true); //true sp\xe9cifi\xe9 ==> UniversConsoleExtensions.AfficherConsole(univers, true);\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de le faire sur une collection \xe9galement."}),"\n",(0,s.jsxs)(n.p,{children:["Dans la classe ",(0,s.jsx)(n.strong,{children:"UniversConsoleExtensions"}),", ajoutez la m\xe9thode ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"/// <summary>\r\n/// M\xe9thode qui affiche l'information d'une liste d'univers \xe0 la console\r\n/// </summary>\r\n/// <param name=\"lstUnivers\"></param>\r\npublic static void AfficherConsole(this List<Univers> lstUnivers)\r\n{\r\n    if(lstUnivers?.Count > 0)\r\n    {\r\n        foreach (Univers univers in lstUnivers)\r\n        {\r\n            univers.AfficherConsole();\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de simplifier le code dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," par celui-ci."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using (GestionPersonnageContext db = new GestionPersonnageContext())\r\n{\r\n    List<Univers> lstUniversQuery = (from lqUnivers in db.Univers\r\n                                     orderby\r\n                                         lqUnivers.AnneeCreation descending\r\n                                     select\r\n                                         lqUnivers).ToList();\r\n\r\n    lstUniversQuery.AfficherConsole();\r\n\r\n    //Ou directement en lambda\r\n    db.Univers.OrderByDescending(u => u.AnneeCreation).ToList().AfficherConsole();\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>o});var s=r(7294);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);