"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[4499],{7352:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var n=t(5893),i=t(1151);const s={sidebar_position:820,draft:!1},a="Tests unitaires",l={id:"Tests/test_unitaire",title:"Tests unitaires",description:"\x3c!-- pour la prochaine fois, il faudrait ajouter du blahblah sur comment on d\xe9cide quoi tester, et le fait qu'un test unitaire est normalement associ\xe9 \xe0 une specs provenant de l'analyse. Par exemple: le bouton Effacer de la liste des categories est allum\xe9 si une cat\xe9gorie est s\xe9lectionn\xe9e et que cette cat\xe9gorie n'a pas de d\xe9pendances. Ca donne le contexte pour le test.",source:"@site/docs/80-Tests/test_unitaire.md",sourceDirName:"80-Tests",slug:"/Tests/test_unitaire",permalink:"/4N1_2024/docs/Tests/test_unitaire",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:820,frontMatter:{sidebar_position:820,draft:!1},sidebar:"NotesSidebar",previous:{title:"Structure d'un test",permalink:"/4N1_2024/docs/Tests/structure_test"},next:{title:"Planification",permalink:"/4N1_2024/docs/Enseignant/a_planning"}},u={},o=[{value:"Modification de la cible du projet",id:"modification-de-la-cible-du-projet",level:2},{value:"Ajout des d\xe9pendances des projets",id:"ajout-des-d\xe9pendances-des-projets",level:2},{value:"Installation des librairies",id:"installation-des-librairies",level:2},{value:"Structures des dossiers et fichiers",id:"structures-des-dossiers-et-fichiers",level:2},{value:"Tester une extension",id:"tester-une-extension",level:2},{value:"Test VersUtilisateurModel - Version 1",id:"test-versutilisateurmodel---version-1",level:3},{value:"Test VersUtilisateurModel - Version 2",id:"test-versutilisateurmodel---version-2",level:3},{value:"Tester un validateur",id:"tester-un-validateur",level:2},{value:"Ajout des classes \xe0 tester",id:"ajout-des-classes-\xe0-tester",level:3},{value:"Retour aux tests",id:"retour-aux-tests",level:3},{value:"Propri\xe9t\xe9 Quantite",id:"propri\xe9t\xe9-quantite",level:3},{value:"Fichier ressource",id:"fichier-ressource",level:3},{value:"Validation des tests",id:"validation-des-tests",level:3},{value:"Tester un service - UtilisateurCarteService",id:"tester-un-service---utilisateurcarteservice",level:2},{value:"Ajout pour les tests",id:"ajout-pour-les-tests",level:3},{value:"Test ObtenirCartesUtilisateurAsync",id:"test-obtenircartesutilisateurasync",level:3},{value:"Test ObtenirAsync",id:"test-obtenirasync",level:3},{value:"Insertion des cl\xe9s",id:"insertion-des-cl\xe9s",level:4},{value:"Conversion de UtilisateurCarte vers UtilisateurCarteModel",id:"conversion-de-utilisateurcarte-vers-utilisateurcartemodel",level:4},{value:"Tester AjouterAsync",id:"tester-ajouterasync",level:3},{value:"AjouterAsync_ModeleInvalide_RepoNonAjout",id:"ajouterasync_modeleinvalide_repononajout",level:4},{value:"Tester un repository",id:"tester-un-repository",level:2},{value:"Tester ViewModel - ListeCategoriesVM",id:"tester-viewmodel---listecategoriesvm",level:2},{value:"Test SupprimerCommande_CategorieNonSelectionnee_NePeutSupprimer",id:"test-supprimercommande_categorienonselectionnee_nepeutsupprimer",level:3},{value:"Test SupprimerCommande_CategorieAvecDependance_NePeutSupprimer",id:"test-supprimercommande_categorieavecdependance_nepeutsupprimer",level:3},{value:"Test SupprimerCommande_CategorieDepandenceNull_NePeutSupprimer",id:"test-supprimercommande_categoriedepandencenull_nepeutsupprimer",level:3},{value:"Test SupprimerCommande_CategorieSansDependance_PeutSupprimer",id:"test-supprimercommande_categoriesansdependance_peutsupprimer",level:3},{value:"Autre test",id:"autre-test",level:3}];function c(e){const r={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"tests-unitaires",children:"Tests unitaires"}),"\n",(0,n.jsxs)(r.p,{children:["Vous devez cr\xe9er un nouveau projet de type ",(0,n.jsx)(r.strong,{children:"xUnit"})," dans votre solution."]}),"\n",(0,n.jsxs)(r.p,{children:["Nommez le projet ",(0,n.jsx)(r.strong,{children:"SuperCarte.UTest"})," et utilisez ",(0,n.jsx)(r.strong,{children:".NET 7"}),". Le ",(0,n.jsx)(r.strong,{children:"U"})," est pour ",(0,n.jsx)(r.strong,{children:"Unitaire"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"modification-de-la-cible-du-projet",children:"Modification de la cible du projet"}),"\n",(0,n.jsxs)(r.p,{children:["Il faut modifier la cible du projet. Le projet ",(0,n.jsx)(r.strong,{children:"UTest"})," utilisera le projet ",(0,n.jsx)(r.strong,{children:".WPF"})," qui est disponible uniquement pour ",(0,n.jsx)(r.strong,{children:"Windows"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Effectuez un double-clic sur l'ent\xeate du projet ",(0,n.jsx)(r.strong,{children:"SuperCarte.UTest"})," pour voir le ",(0,n.jsx)(r.strong,{children:"XML"})," de configuration."]}),"\n",(0,n.jsxs)(r.p,{children:["Vous devez modifier la balise ",(0,n.jsx)(r.strong,{children:"<TargetFramework>net7.0</TargetFramework>"})," par ",(0,n.jsx)(r.strong,{children:"<TargetFramework>net7.0-windows</TargetFramework>"}),". Enregistrez le fichier."]}),"\n",(0,n.jsx)(r.p,{children:"Dans l'exemple ci-dessous, la balise est \xe0 la ligne 4."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-xml",metastring:'title="Modifier uniquement cette ligne"',children:'<Project Sdk="Microsoft.NET.Sdk">\r\n\r\n  <PropertyGroup>\r\n  //highlight-next-line\r\n    <TargetFramework>net7.0-windows</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n  /* **** */\r\n</Project>\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Supprimez la classe ",(0,n.jsx)(r.strong,{children:"UnitTest1.cs"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"ajout-des-d\xe9pendances-des-projets",children:"Ajout des d\xe9pendances des projets"}),"\n",(0,n.jsxs)(r.p,{children:["Effectuez un clic-droit sur le dossier ",(0,n.jsx)(r.strong,{children:"D\xe9pendances"})," du projet ",(0,n.jsx)(r.strong,{children:"SuperCarte.UTest"}),". S\xe9lectionnez ",(0,n.jsx)(r.strong,{children:"Ajouter une r\xe9f\xe9rence de projet..."}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Cochez ",(0,n.jsx)(r.strong,{children:"SuperCarte.WPF"}),", ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core"})," et ",(0,n.jsx)(r.strong,{children:"SuperCarte.EF"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Compilez le projet. Si vous avez les erreurs ci-dessous, l'\xe9tape pr\xe9c\xe9dente n'a pas \xe9t\xe9 faite correctement."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Gravit\xe9\tCode\tDescription\tProjet\tFichier\tLigne\t\xc9tat de la suppression\r\nErreur\tNETSDK1005\tLe fichier de composants \\SuperCarteApp\\SuperCarte.ITest\\obj\\project.assets.json' n'a aucune cible pour 'net7.0'. V\xe9rifiez que la restauration s'est ex\xe9cut\xe9e et que vous avez inclus 'net7.0' dans TargetFrameworks pour votre projet.\tSuperCarte.Test\tC:\\Program Files\\dotnet\\sdk\\7.0.102\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t267\t\r\n\r\nGravit\xe9\tCode\tDescription\tProjet\tFichier\tLigne\t\xc9tat de la suppression\r\nErreur\t\tLe projet \xab\xa0..\\SuperCarte.WPF\\SuperCarte.WPF.csproj\xa0\xbb cible \xab\xa0net7.0-windows\xa0\xbb. Il ne peut pas \xeatre r\xe9f\xe9renc\xe9 par un projet qui cible \xab\xa0.NETCoreApp,Version=v7.0\xa0\xbb.\tSuperCarte.Test\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets\t1830\t\n"})}),"\n",(0,n.jsx)(r.h2,{id:"installation-des-librairies",children:"Installation des librairies"}),"\n",(0,n.jsx)(r.p,{children:"Il faut installer les librairies qui seront utiles pour les tests."}),"\n",(0,n.jsxs)(r.p,{children:["Dans la ",(0,n.jsx)(r.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,n.jsx)(r.strong,{children:"Projet par d\xe9faut"})," soit ",(0,n.jsx)(r.strong,{children:"SuperCarte.UTest"})," dans la console."]}),"\n",(0,n.jsxs)(r.p,{children:["La librairie pour cr\xe9er des simulacres ",(0,n.jsx)(r.strong,{children:"Moq"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Install-Package Moq\n"})}),"\n",(0,n.jsxs)(r.p,{children:["La librairie ",(0,n.jsx)(r.strong,{children:"AutoFixture"})," pour cr\xe9er des objets avec des valeurs."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Install-Package AutoFixture\n"})}),"\n",(0,n.jsxs)(r.p,{children:["La librairie pour faciliter les assertions ",(0,n.jsx)(r.strong,{children:"FluentAssertions"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Install-Package FluentAssertions\n"})}),"\n",(0,n.jsx)(r.h2,{id:"structures-des-dossiers-et-fichiers",children:"Structures des dossiers et fichiers"}),"\n",(0,n.jsx)(r.p,{children:"Afin de se retrouver dans les tests, il faut cr\xe9er une structure de dossiers qui repr\xe9sentent les projets."}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la structure ci-dessous dans le projet ",(0,n.jsx)(r.strong,{children:"SuperCarte.UTest"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Core\r\n\u251c\u2500\u2500 Extensions\r\n\u251c\u2500\u2500 Services\r\n\u251c\u2500\u2500 Validateurs\r\nWPF\r\n\u251c\u2500\u2500 ViewModels\n"})}),"\n",(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsxs)(r.p,{children:["Il faudrait \xe9galement cr\xe9er un dossier ",(0,n.jsx)(r.strong,{children:"Core\\Repositories"})," pour les tests unitaires des ",(0,n.jsx)(r.strong,{children:"repositories"}),". Mais ils ne seront pas test\xe9s."]})}),"\n",(0,n.jsxs)(r.p,{children:["Par exemple, les tests unitaires de la classe ",(0,n.jsx)(r.strong,{children:"RoleService"})," sera dans la classe ",(0,n.jsx)(r.strong,{children:"RoleServiceTest"}),"  dans le dossier ",(0,n.jsx)(r.strong,{children:"Unitaires\\Core\\Services"}),"."]}),"\n",(0,n.jsx)(r.h1,{id:"exemple-de-tests-unitaires",children:"Exemple de tests unitaires"}),"\n",(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Vous ne pouvez pas reprendre la m\xeame m\xe9thode pour le TP 3"}),", \xe0 l'exception du validateur."]})}),"\n",(0,n.jsxs)(r.p,{children:["Pour chacune des classes test\xe9es unitairement, il faut cr\xe9er une classe avec le m\xeame nom et en ajoutant le suffixe ",(0,n.jsx)(r.strong,{children:"Test"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"tester-une-extension",children:"Tester une extension"}),"\n",(0,n.jsxs)(r.p,{children:["Il n'est pas demand\xe9 de tester une extension dans le ",(0,n.jsx)(r.strong,{children:"TP 3"}),". Cette exemple est pour comprendre le fonctionnement du test."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurMapExtensionTest.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"Core\\Extensions"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.UTest.Unitaires.Core.Extensions;\r\n\r\n/// <summary>\r\n/// Tests unitaires pour la classe UtilisateurMapExtension\r\n/// </summary>\r\npublic class UtilisateurMapExtensionTest\r\n{\r\n\t\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"test-versutilisateurmodel---version-1",children:"Test VersUtilisateurModel - Version 1"}),"\n",(0,n.jsxs)(r.p,{children:["Il faut s'assurer que toutes les propri\xe9t\xe9s identiques de la classe ",(0,n.jsx)(r.strong,{children:"Utilisateur"})," sont identiques dans le nouvel objet ",(0,n.jsx)(r.strong,{children:"UtilisateurModel"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Le nom du test est ",(0,n.jsx)(r.strong,{children:"VersUtilisateurModel_CreerObjet_ValeursIdentiques"}),"."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"La m\xe9thode : VersUtilisateurModel"}),"\n",(0,n.jsx)(r.li,{children:"Le cas : CreerObjet"}),"\n",(0,n.jsx)(r.li,{children:"Le r\xe9sultat : ValeursIdentiques"}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Voici le squelette d'un test:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="NE PAS COPIER"',children:"[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques1()\r\n{\r\n\t//Arrangement (Arrange)\r\n    \r\n    //Action (Act)\r\n    \r\n    //Assertion (Assert)\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Premi\xe8rement, il faut cr\xe9er l'objet ",(0,n.jsx)(r.strong,{children:"Utilisateur"})," \xe0 convertir (ligne 12 \xe0 20) et les constantes pour les valeurs (ligne 5 \xe0 10). Il est pr\xe9f\xe9rable d'utiliser des constantes au lieu de recopier les valeurs pour \xe9viter les erreurs de copie."]}),"\n",(0,n.jsxs)(r.p,{children:["Ensuite, il faut appeler la m\xe9thode \xe0 tester (ligne 23). Le nom de la variable qui est retourn\xe9e par le test poss\xe8de le suffixe ",(0,n.jsx)(r.strong,{children:"Actuel"})," ",(0,n.jsx)(r.strong,{children:"(ou Actual en anglais)"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Finalement, il faut mettre les assertions (lignes 26 \xe0 30). Il faut comparer toutes les propri\xe9t\xe9s."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n   //Arrangement (Arrange)\r\n   const int utilisateurId = 9000;\r\n   const string prenom = "TestPrenom";\r\n   const string nom = "TestNom";\r\n   const string nomUtilisateur = "TestNomUtilisateur";\r\n   const string motPasseHash = "TestHash";\r\n   const int roleId = 71;\r\n\r\n   Utilisateur utilisateur = new Utilisateur()\r\n   {\r\n       UtilisateurId = utilisateurId,\r\n       Prenom = prenom,\r\n       Nom = nom,\r\n       NomUtilisateur = nomUtilisateur,\r\n       MotPasseHash = motPasseHash,\r\n       RoleId = roleId\r\n   };\r\n\r\n   //Action (Act)\r\n   UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n   //Assertion (Assert)\r\n   Assert.Equal(utilisateurId, utilisateurModelActuel.UtilisateurId);\r\n   Assert.Equal(prenom, utilisateurModelActuel.Prenom);\r\n   Assert.Equal(nom, utilisateurModelActuel.Nom);\r\n   Assert.Equal(nomUtilisateur, utilisateurModelActuel.NomUtilisateur);\r\n   Assert.Equal(roleId, utilisateurModelActuel.RoleId);\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Pour ex\xe9cuter le test, ouvrez l'explorateur de tests (Affichage/Explorateur de tests) et appuyez sur le bouton vert."}),"\n",(0,n.jsx)(r.p,{children:"Vous devriez obtenir une erreur indiquant que VersUtilisateurModel() n'existe pas. Pour r\xe9gler cette erreur, ajoutez"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Extensions;\n"})}),"\n",(0,n.jsx)(r.p,{children:"R\xe9d\xe9marrez le test, cette fois-ci, il sera r\xe9ussi."}),"\n",(0,n.jsxs)(r.p,{children:["Pour s'assurer qu'il fonctionne bien, modifiez temporairement la m\xe9thode de ",(0,n.jsx)(r.strong,{children:"VersUtilisateurModel"})," la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurMapExtension"})," pour le code ci-dessous. Il faut retirer la copie du champ ",(0,n.jsx)(r.strong,{children:"Prenom"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public static UtilisateurModel VersUtilisateurModel(this Utilisateur item)\r\n{\r\n    return new UtilisateurModel()\r\n    {\r\n        UtilisateurId = item.UtilisateurId,\r\n        //highlight-next-line\r\n        //Prenom = item.Prenom,\r\n        Nom = item.Nom,\r\n        NomUtilisateur = item.NomUtilisateur,            \r\n        RoleId = item.RoleId\r\n    };\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cutez le test. Il sera en \xe9chec. Le message est de l'\xe9chec est celui-ci."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{children:"Message:\u2009\r\nAssert.Equal() Failure\r\nExpected: TestPrenom\r\nActual:   (null)\n"})}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Il est toujours bon de faire ",(0,n.jsx)(r.em,{children:"planter"})," un test afin de s'assurer qu'il teste vraiment quelquechose et ainsi s'\xe9viter de faux positifs. N'h\xe9sitez pas \xe0 introduire une erreur dans votre code pour chaque test (et de l'enlever imm\xe9diatement)"]})}),"\n",(0,n.jsxs)(r.p,{children:["Remettez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"VersUtilisateurModel"})," \xe0 son \xe9tat original."]}),"\n",(0,n.jsx)(r.h3,{id:"test-versutilisateurmodel---version-2",children:"Test VersUtilisateurModel - Version 2"}),"\n",(0,n.jsx)(r.p,{children:"Le probl\xe8me avec la version pr\xe9c\xe9dente est que si un nouveau champ est ajout\xe9 dans les mod\xe8les, mais qu'il n'est pas copi\xe9, le test va tout de m\xeame fonctionner."}),"\n",(0,n.jsxs)(r.p,{children:["Ajoutez la propri\xe9t\xe9 ci-dessous dans la classe ",(0,n.jsx)(r.strong,{children:"Utilisateur"})," et ",(0,n.jsx)(r.strong,{children:"UtilisateurModel"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public string PropTest { get; set; } = null!;\n"})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cutez de nouveau le test 1. Il sera un succ\xe8s. La premi\xe8re raison pour qu'il soit r\xe9ussi est que la propri\xe9t\xe9 n'a pas \xe9t\xe9 assign\xe9e dans le test."}),"\n",(0,n.jsx)(r.p,{children:"Nous allons cr\xe9er la version 2 du test. La nouvelle propri\xe9t\xe9 est ajout\xe9e (lignes 11 et 21)."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    const int utilisateurId = 9000;\r\n    const string prenom = "TestPrenom";\r\n    const string nom = "TestNom";\r\n    const string nomUtilisateur = "TestNomUtilisateur";\r\n    const string motPasseHash = "TestHash";        \r\n    const int roleId = 71;\r\n    //highlight-next-line\r\n    const string propTest = "TestPropTest"; //Ajout\r\n       \r\n    Utilisateur utilisateur = new Utilisateur()\r\n    {\r\n        UtilisateurId = utilisateurId,\r\n        Prenom = prenom,\r\n        Nom = nom,\r\n        NomUtilisateur = nomUtilisateur,\r\n        MotPasseHash = motPasseHash,\r\n        RoleId = roleId,\r\n        //highlight-next-line\r\n        PropTest = propTest //Ajout\r\n    };\r\n\r\n    //Action (Act)\r\n    UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n    //Assertion (Assert)\r\n    Assert.Equal(utilisateurId, utilisateurModelActuel.UtilisateurId);\r\n    Assert.Equal(prenom, utilisateurModelActuel.Prenom);\r\n    Assert.Equal(nom, utilisateurModelActuel.Nom);\r\n    Assert.Equal(nomUtilisateur, utilisateurModelActuel.NomUtilisateur);\r\n    Assert.Equal(roleId, utilisateurModelActuel.RoleId);\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Le test est encore un succ\xe8s lors de son ex\xe9cution car la nouvelle propri\xe9t\xe9 n'est pas test\xe9e."}),"\n",(0,n.jsx)(r.p,{children:"Modifiez la m\xe9thode par celle-ci. Il y a maintenant l'assertion \xe0 la ligne 33."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    const int utilisateurId = 9000;\r\n    const string prenom = "TestPrenom";\r\n    const string nom = "TestNom";\r\n    const string nomUtilisateur = "TestNomUtilisateur";\r\n    const string motPasseHash = "TestHash";        \r\n    const int roleId = 71;\r\n    const string propTest = "TestPropTest"; //Ajout\r\n       \r\n    Utilisateur utilisateur = new Utilisateur()\r\n    {\r\n        UtilisateurId = utilisateurId,\r\n        Prenom = prenom,\r\n        Nom = nom,\r\n        NomUtilisateur = nomUtilisateur,\r\n        MotPasseHash = motPasseHash,\r\n        RoleId = roleId,\r\n        PropTest = propTest //Ajout\r\n    };\r\n\r\n    //Action (Act)\r\n    UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n    //Assertion (Assert)\r\n    Assert.Equal(utilisateurId, utilisateurModelActuel.UtilisateurId);\r\n    Assert.Equal(prenom, utilisateurModelActuel.Prenom);\r\n    Assert.Equal(nom, utilisateurModelActuel.Nom);\r\n    Assert.Equal(nomUtilisateur, utilisateurModelActuel.NomUtilisateur);\r\n    Assert.Equal(roleId, utilisateurModelActuel.RoleId);\r\n    //highlight-next-line\r\n    Assert.Equal(propTest, utilisateurModelActuel.PropTest);\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Le test ne fonctionne plus car la m\xe9thode ",(0,n.jsx)(r.strong,{children:"VersUtilisateurModel"})," ne transfert pas la valeur."]}),"\n",(0,n.jsxs)(r.p,{children:["Est-ce un bon test ? Il faut s'assurer \xe0 chaque fois que le mod\xe8le est modifi\xe9 de se souvenir de modifier ce test. En cas d'oubli, le test indique que tout est beau, car la propri\xe9t\xe9 n'est pas dans l'assertion, mais dans la r\xe9alit\xe9, il y a une probl\xe9matique. Si la m\xe9thode ",(0,n.jsx)(r.strong,{children:"VersUtilisateurModel"})," a un bug, il est possible que ce ne soit pas d\xe9tect\xe9."]}),"\n",(0,n.jsx)(r.p,{children:"Nous allons modifier la fonction afin que le test soit automatiquement \xe9volutive. En cas de modification du mod\xe8le, il sera toujours fonctionnel."}),"\n",(0,n.jsxs)(r.p,{children:["En premier lieu, la librairie ",(0,n.jsx)(r.strong,{children:"FluentAssertions"})," permet de comparer les propri\xe9t\xe9s de 2 objets pour v\xe9rifier qu'ils sont identiques. Il n'est pas n\xe9cessaire que les objets soient du m\xeame type, mais les propri\xe9t\xe9s doivent avoir le m\xeame nom."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 26, la m\xe9thode ",(0,n.jsx)(r.strong,{children:"utilisateurModelActuel.Should().BeEquivalentTo(utilisateur);"})," permet de comparer un ",(0,n.jsx)(r.strong,{children:"UtilisateurModel"})," avec un ",(0,n.jsx)(r.strong,{children:"Utilisateur"})," comme r\xe9f\xe9rence. Par contre, la classe ",(0,n.jsx)(r.strong,{children:"Utilisateur"})," a des propri\xe9t\xe9s suppl\xe9mentaires (Navigations et MotPasseHash). Il faut ajouter l'option ",(0,n.jsx)(r.strong,{children:"options => options.ExcludingMissingMembers()"})," pour faire la comparaison uniquement avec les propri\xe9t\xe9s identiques. Maintenant, l'assertion est \xe9volutive. En ajoutant une propri\xe9t\xe9 dans le mod\xe8le de donn\xe9es et du domaine, il ne sera pas n\xe9cessaire de l'ajouter."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    const int utilisateurId = 9000;\r\n    const string prenom = "TestPrenom";\r\n    const string nom = "TestNom";\r\n    const string nomUtilisateur = "TestNomUtilisateur";\r\n    const string motPasseHash = "TestHash";\r\n    const int roleId = 71;\r\n\r\n    Utilisateur utilisateur = new Utilisateur()\r\n    {\r\n        UtilisateurId = utilisateurId,\r\n        Prenom = prenom,\r\n        Nom = nom,\r\n        NomUtilisateur = nomUtilisateur,\r\n        MotPasseHash = motPasseHash,\r\n        RoleId = roleId\r\n    };\r\n\r\n    //Action (Act)\r\n    UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n    //Assertion (Assert)\r\n    //highlight-next-line\r\n    utilisateurModelActuel.Should().BeEquivalentTo(utilisateur, options => options.ExcludingMissingMembers());\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Ex\xe9cutez le test et c'est un succ\xe8s. Il devrait \xe9chouer, car le correctif n'a pas \xe9t\xe9 fait dans la m\xe9thode ",(0,n.jsx)(r.strong,{children:"VersUtilisateurModel()"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["La raison est que la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"PropTest"})," n'a pas \xe9t\xe9 assign\xe9e dans l'arrangement. Donc, la propri\xe9t\xe9 \xe0 la valeur par d\xe9faut. Et la comparaison est identique, car dans la m\xe9thode \xe0 tester, il n'y a pas d'assignation \xe9galement. C'est donc une v\xe9rification de valeur par d\xe9faut \xe0 valeur par d\xe9faut, donc la comparaison est valide."]}),"\n",(0,n.jsxs)(r.p,{children:["Modifiez la m\xe9thode par celle-ci. Les lignes 11 et 21 sont pour l'assignation de la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"PropTest"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    const int utilisateurId = 9000;\r\n    const string prenom = "TestPrenom";\r\n    const string nom = "TestNom";\r\n    const string nomUtilisateur = "TestNomUtilisateur";\r\n    const string motPasseHash = "TestHash";\r\n    const int roleId = 71;\r\n    //highlight-next-line\r\n    const string propTest = "TestPropTest";\r\n\r\n    Utilisateur utilisateur = new Utilisateur()\r\n    {\r\n        UtilisateurId = utilisateurId,\r\n        Prenom = prenom,\r\n        Nom = nom,\r\n        NomUtilisateur = nomUtilisateur,\r\n        MotPasseHash = motPasseHash,\r\n        RoleId = roleId,\r\n        //highlight-next-line\r\n        PropTest = propTest\r\n    };\r\n\r\n    //Action (Act)\r\n    UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n    //Assertion (Assert)\r\n    utilisateurModelActuel.Should().BeEquivalentTo(utilisateur, options => options.ExcludingMissingMembers());\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cutez le test et il sera maintenant en \xe9chec. Est-ce que le test est bon ? Plus ou moins, car il faut penser de mettre \xe0 jour le test \xe0 chaque modification du mod\xe8le, sinon la valeur par d\xe9faut sera utilis\xe9 pour la comparaison."}),"\n",(0,n.jsxs)(r.p,{children:["La librairie ",(0,n.jsx)(r.strong,{children:"AutoFixture"})," permet de cr\xe9er des objets et que les propri\xe9t\xe9s aient des valeurs diff\xe9rentes de celles par d\xe9faut."]}),"\n",(0,n.jsx)(r.p,{children:"Modifiez la m\xe9thode par celle-ci."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 5, il y a un objet ",(0,n.jsx)(r.strong,{children:"Fixture"})," qui permet de cr\xe9er des objets."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 6 \xe0 10, c'est la m\xe9canique de cr\xe9ation. Il est possible d'exclure des propri\xe9t\xe9s avec la m\xe9thode ",(0,n.jsx)(r.strong,{children:"Without()"}),". Il est important d'exclure les propri\xe9t\xe9s de navigation ou du moins minimalement la propri\xe9t\xe9 de navigation ",(0,n.jsx)(r.strong,{children:"1 \xe0 plusieurs (UtilisateurCarteListe)"})," . Il est important de faire ceci, car il y a une r\xe9f\xe9rence circulaire entre les classes du mod\xe8le de donn\xe9es avec ",(0,n.jsx)(r.strong,{children:"EntityFramework"}),". Si l'exclusion n'est pas faite, il y aura une exception, car l'objet sera toujours en cr\xe9ation circulaire."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    var fixture = new Fixture();\r\n    Utilisateur utilisateur =\r\n        fixture.Build<Utilisateur>()\r\n            .Without(u => u.Role)\r\n            .Without(u => u.UtilisateurCarteListe)\r\n            .Create();\r\n\r\n    //Action (Act)\r\n    UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n    //Assertion (Assert)\r\n    utilisateurModelActuel.Should().BeEquivalentTo(utilisateur, options => options.ExcludingMissingMembers());\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cutez de nouveau le test et il sera en \xe9chec."}),"\n",(0,n.jsxs)(r.p,{children:["Retirez la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"PropTest"})," de la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurModel"})," uniquement. Ex\xe9cutez le test et il sera positif. Il devrait toujours \xe9chouer. La raison est que la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"PropTest"})," n'est plus dans l'assertion, car elle est exclue par l'option ",(0,n.jsx)(r.strong,{children:"ExcludingMissingMembers()"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Il serait id\xe9al d'indiquer manuellement les propri\xe9t\xe9s \xe0 exclure. La m\xe9thode ",(0,n.jsx)(r.strong,{children:".Excluding()"})," permet de sp\xe9cifier une propri\xe9t\xe9 \xe0 ignorer."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers ",children:"[Fact]\r\npublic void VersUtilisateurModel_CreerObjet_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    var fixture = new Fixture();\r\n    Utilisateur utilisateur =\r\n        fixture.Build<Utilisateur>()\r\n            .Without(u => u.Role)\r\n            .Without(u => u.UtilisateurCarteListe)\r\n            .Create();\r\n\r\n    //Action (Act)\r\n    UtilisateurModel utilisateurModelActuel = utilisateur.VersUtilisateurModel();\r\n\r\n    //Assertion (Assert)\r\n    utilisateurModelActuel.Should().BeEquivalentTo(utilisateur, \r\n    //highlight-start\r\n        options => options.Excluding(x => x.MotPasseHash)\r\n                          .Excluding(x => x.Role)\r\n                          .Excluding(x => x.UtilisateurCarteListe));\r\n    //highlight-end\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cutez de nouveau le test. Le test sera un \xe9chec comme voulu."}),"\n",(0,n.jsxs)(r.p,{children:["Ajoutez de nouveau la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"PropTest"})," de la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurModel"})," et testez de nouveau. Le test est toujours en \xe9chec comme voulu."]}),"\n",(0,n.jsxs)(r.p,{children:["Retirez la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"PropTest"})," des classes ",(0,n.jsx)(r.strong,{children:"UtilisateurModel"})," et ",(0,n.jsx)(r.strong,{children:"Utilisateur"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Testez de nouveau et le test sera un succ\xe8s comme voulu."}),"\n",(0,n.jsx)(r.p,{children:"Cette version du test est \xe9volutive et teste r\xe9ellement la copie."}),"\n",(0,n.jsx)(r.p,{children:"Il n'est pas toujours possible de r\xe9aliser des tests \xe9volutifs. Il est important que lorsqu'on modifie une classe, de s'assurer que les tests unitaires correspondants sont complets."}),"\n",(0,n.jsx)(r.h2,{id:"tester-un-validateur",children:"Tester un validateur"}),"\n",(0,n.jsx)(r.p,{children:"Pour un validateur, il faut s'assurer que la validation fonctionne bien lorsque les valeurs sont valides et lorsque les valeurs sont invalides. Il faut tester les 2 possibilit\xe9s. Il faut \xe9galement tester tous les cas de validation (limites) pour une propri\xe9t\xe9."}),"\n",(0,n.jsx)(r.h3,{id:"ajout-des-classes-\xe0-tester",children:"Ajout des classes \xe0 tester"}),"\n",(0,n.jsx)(r.p,{children:"Pour ce test, nous avons besoin d'ajouter un peu de code. Ce code \xe9tait dans la section WPF partie 5 qui n'est plus enseign\xe9e."}),"\n",(0,n.jsx)(r.admonition,{title:"Attention",type:"warning",children:(0,n.jsx)(r.p,{children:"Ce code n'est pas complet. Il ne comprend que le code minimal n\xe9cessaire pour les tests."})}),"\n",(0,n.jsxs)(r.p,{children:["Ajoutez l'interface ",(0,n.jsx)(r.strong,{children:"Core/Validateurs/IValidateurPropriete.cs"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Validateurs;\r\n\r\n/// <summary>\r\n/// Interface qui valide un mod\xe8le du domaine avec la possibilit\xe9 de sp\xe9cifier des propri\xe9t\xe9s sp\xe9cifiques\r\n/// </summary>\r\n/// <typeparam name="TModele">Type du mod\xe8le du domaine \xe0 valider</typeparam>\r\npublic interface IValidateurPropriete<TModele> where TModele : class\r\n{\r\n    /// <summary>\r\n    /// Valider un objet du mod\xe8le du domaine pour des propri\xe9t\xe9s sp\xe9cifiques\r\n    /// </summary>\r\n    /// <param name="modele">Mod\xe8le \xe0 valider</param>\r\n    /// <param name="proprietesAValider">Propri\xe9t\xe9</param>\r\n    /// <returns>R\xe9sultat de la validation</returns>\r\n    Task<ValidationModel> ValiderAsync(TModele modele, params string[] proprietesAValider);\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Ainsi que ",(0,n.jsx)(r.strong,{children:"Core/Validateurs/UtilisateurCarteValidateur.cs"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using FluentValidation;\r\nusing FluentValidation.Results;\r\nusing SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Validateurs;\r\n\r\n/// <summary>\r\n/// Classe qui valide le mod\xe8le UtilisateurCarteModel\r\n/// </summary>\r\npublic class UtilisateurCarteValidateur : AbstractValidator<UtilisateurCarteModel>, IValidateurPropriete<UtilisateurCarteModel>\r\n{\r\n    private readonly IUtilisateurCarteRepo _utilisateurCarteRepo;\r\n    private readonly IUtilisateurRepo _utilisateurRepo;\r\n    private readonly ICarteRepo _carteRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="utilisateurCarteRepo">Repository de UtilisateurCarte</param>\r\n    /// <param name="utilisateurRepo">Repository de Utilisateur</param>\r\n    /// <param name="carteRepo">Repository de Carte</param>\r\n    public UtilisateurCarteValidateur(IUtilisateurCarteRepo utilisateurCarteRepo,\r\n        IUtilisateurRepo utilisateurRepo, ICarteRepo carteRepo)\r\n    {\r\n        _utilisateurCarteRepo = utilisateurCarteRepo;\r\n        _utilisateurRepo = utilisateurRepo;\r\n        _carteRepo = carteRepo;\r\n\r\n        RuleFor(i => (int)i.Quantite).Cascade(CascadeMode.Stop)\r\n            .InclusiveBetween(1, short.MaxValue).WithMessage($"La quantit\xe9 doit \xeatre entre 1 et {short.MaxValue:N0}");\r\n    }\r\n\r\n    public async Task<ValidationModel> ValiderAsync(UtilisateurCarteModel modele, params string[] proprietesAValider)\r\n    {\r\n        ValidationResult validationResult;\r\n\r\n        if (proprietesAValider?.Length > 0)\r\n        {\r\n            //Il y a des propri\xe9t\xe9s \xe0 valider\r\n            validationResult = await this.ValidateAsync(modele, o => o.IncludeProperties(proprietesAValider));\r\n        }\r\n        else\r\n        {\r\n            //Il n\'y a aucune propri\xe9t\xe9 \xe0 valider\r\n            validationResult = await base.ValidateAsync(modele);\r\n        }\r\n\r\n        return validationResult.VersValidationModel();\r\n    }\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Ainsi que ",(0,n.jsx)(r.strong,{children:"Core/Models/UtilisateurCarteModel.cs"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une carte d'un utilisateur\r\n/// </summary>\r\npublic class UtilisateurCarteModel\r\n{\r\n    public int UtilisateurId { get; set; }\r\n    public int CarteId { get; set; }\r\n    public short Quantite { get; set; }\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"retour-aux-tests",children:"Retour aux tests"}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteValidateurTest.cs"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"UTest/Core/Validateurs"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.UTest.Core.Validateurs;\r\n\r\n/// <summary>\r\n/// Tests unitaires pour la classe UtilisateurCarteValidateur\r\n/// </summary>\r\npublic class UtilisateurCarteValidateurTest\r\n{\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Le validateur classique a seulement une m\xe9thode ",(0,n.jsx)(r.strong,{children:"ValiderAsync()"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Ce validateur poss\xe8de 2 param\xe8tres. Il n'y aura pas d'exemple pour l'utilisation du 2e param\xe8tre."}),"\n",(0,n.jsx)(r.p,{children:"Pour un validateur, il est important de tester une propri\xe9t\xe9 \xe0 la fois, avec plusieurs valeurs. Les cas limites sont importants."}),"\n",(0,n.jsx)(r.p,{children:"Par exemple, pour une chaine de caract\xe8res, il faut tester toutes les variations du champ obligatoire."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Vide"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Null"}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["\n",(0,n.jsx)(r.p,{children:"Uniquement espace."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Pour une propri\xe9t\xe9 qui a une valeur minimale ou maximale, il faut tester les cas limites ( limite -1, limite, limite+1)."}),"\n",(0,n.jsx)(r.p,{children:"Il faut \xe9galement tester le cas valide et non valide."}),"\n",(0,n.jsx)(r.h3,{id:"propri\xe9t\xe9-quantite",children:"Propri\xe9t\xe9 Quantite"}),"\n",(0,n.jsxs)(r.p,{children:["La propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"Quantite"})," peut accepter une valeur entre 1 et 32 767 (valeur maximale du ",(0,n.jsx)(r.strong,{children:"short"}),")."]}),"\n",(0,n.jsx)(r.p,{children:"Pour le test qui s'assure que le champ est valide, il faut tester les valeurs limites."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"1"}),"\n",(0,n.jsxs)(r.li,{children:["32 767 (",(0,n.jsx)(r.strong,{children:"short.MaxValue"}),")"]}),"\n",(0,n.jsx)(r.li,{children:"Et une entre les 2"}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Pour le test qui s'assure que le champ est invalide, il faut tester les valeurs en dehors."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"0"}),"\n",(0,n.jsx)(r.li,{children:"-10"}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Si la propri\xe9t\xe9 acceptait entre 1 et 250, il faudrait \xe9galement tester 251. Mais pour ce validateur, il n'est pas possible de sp\xe9cifier une valeur au-del\xe0 du maximum du type."}),"\n",(0,n.jsxs)(r.p,{children:["Afin d'\xe9viter d'\xe9crire plusieurs tests pour chacune des valeurs, il est possible d'utiliser l'annotation ",(0,n.jsx)(r.strong,{children:"[Theory]"})," au lieu de ",(0,n.jsx)(r.strong,{children:"[Fact]"}),". Cette nouvelle annotation permet de sp\xe9cifier les param\xe8tres pour le m\xeame test avec l'annotation ",(0,n.jsx)(r.strong,{children:"[InlineData]"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"ValiderAsync_Quantite_Valide"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Remarquez que la m\xe9thode poss\xe8de un param\xe8tre ",(0,n.jsx)(r.strong,{children:"quantite"})," (ligne 5)."]}),"\n",(0,n.jsxs)(r.p,{children:["La m\xe9thode a plusieurs annotations (ligne 2 \xe0 4). Ce test sera ex\xe9cut\xe9 3 fois. La premi\xe8re fois, le param\xe8tre ",(0,n.jsx)(r.strong,{children:"quantite"})," aura la valeur 1. La deuxi\xe8me fois, la valeur sera 32 767 et la troisi\xe8me fois, la valeur sera 15657."]}),"\n",(0,n.jsxs)(r.p,{children:["La propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"Quantite"})," de l'objet ",(0,n.jsx)(r.strong,{children:"utilisateurCarteModel"})," utilise la valeur du param\xe8tre (ligne 10)."]}),"\n",(0,n.jsx)(r.p,{children:"Il faut ensuite cr\xe9er les simulacres pour les d\xe9pendances. Il n'est pas n\xe9cessaire de les configurer, car pour ce test, elles ne seront pas utilis\xe9es (lignes 13 \xe0 15)."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 17, il y a la cr\xe9ation du service et \xe0 la ligne 23 il y a l'ex\xe9cution."}),"\n",(0,n.jsxs)(r.p,{children:["Finalement, l'assertion doit se faire sur la propri\xe9t\xe9 des messages d'erreur. Il n'est pas possible d'utiliser la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"EstValide"}),", car cette propri\xe9t\xe9 consid\xe8re toutes les erreurs. Les autres propri\xe9t\xe9s sont ignor\xe9es dans le test, donc elles ne sont pas contr\xf4l\xe9es. Il n'est pas possible de pr\xe9dire leur comportement. Donc, si le ",(0,n.jsx)(r.strong,{children:"dictionnaire"})," d'erreur ne contient pas la propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"Quantite"})," (ligne 26), la propri\xe9t\xe9 est valide."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Theory]\r\n[InlineData(1)] //Min\r\n[InlineData(short.MaxValue)] //Max\r\n[InlineData(15657)] //Entre les 2\r\npublic async Task ValiderAsync_Quantite_Valide(short quantite)\r\n{\r\n    //Arrangement (Arrange)\r\n    UtilisateurCarteModel utilisateurCarteModel = new UtilisateurCarteModel()\r\n    {\r\n        Quantite = quantite\r\n    };\r\n\r\n    var utilisateurCarteRepo = new Mock<IUtilisateurCarteRepo>();\r\n    var carteRepo = new Mock<ICarteRepo>();\r\n    var utilisateurRepo = new Mock<IUtilisateurRepo>();\r\n            \r\n    UtilisateurCarteValidateur utilisateurCarteValidateur =\r\n        new UtilisateurCarteValidateur(utilisateurCarteRepo.Object,\r\n                                        utilisateurRepo.Object,\r\n                                       carteRepo.Object);\r\n\r\n    //Action (Act)\r\n    ValidationModel validationModel = await utilisateurCarteValidateur.ValiderAsync(utilisateurCarteModel);\r\n\r\n    //Assertion (Assert) \r\n    //highlight-next-line\r\n    Assert.False(validationModel.ErreurParPropriete.ContainsKey(nameof(utilisateurCarteModel.Quantite)));\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Voici le test pour le cas invalide."}),"\n",(0,n.jsx)(r.p,{children:"Le tout est identique, \xe0 l'exception des valeurs pour la quantit\xe9 et l'assertion. Maintenant, pour que le test soit r\xe9ussi, il faut que l'erreur soit pr\xe9sente."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Theory]\r\n//highlight-start\r\n[InlineData(0)] //Limite\r\n[InlineData(-10)] //N\xe9gatif    \r\n//highlight-end\r\npublic async Task ValiderAsync_Quantite_NonValide(short quantite)\r\n{\r\n    //Arrangement (Arrange)\r\n    UtilisateurCarteModel utilisateurCarteModel = new UtilisateurCarteModel()\r\n    {\r\n        Quantite = quantite\r\n    };\r\n\r\n    var utilisateurCarteRepo = new Mock<IUtilisateurCarteRepo>();\r\n    var carteRepo = new Mock<ICarteRepo>();\r\n    var utilisateurRepo = new Mock<IUtilisateurRepo>();\r\n\r\n    UtilisateurCarteValidateur utilisateurCarteValidateur =\r\n        new UtilisateurCarteValidateur(utilisateurCarteRepo.Object,\r\n                                       utilisateurRepo.Object,\r\n                                       carteRepo.Object);\r\n\r\n    //Action (Act)\r\n    ValidationModel validationModel = await utilisateurCarteValidateur.ValiderAsync(utilisateurCarteModel);\r\n\r\n    //Assertion (Assert)     \r\n    //highlight-next-line   \r\n    Assert.True(validationModel.ErreurParPropriete.ContainsKey(nameof(utilisateurCarteModel.Quantite)));\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"fichier-ressource",children:"Fichier ressource"}),"\n",(0,n.jsx)(r.p,{children:"Pour un validateur qui utilise un fichier ressource, il faut \xe9galement cr\xe9er un simulacre."}),"\n",(0,n.jsxs)(r.p,{children:["Dans le projet ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core"}),", cr\xe9ez le fichier ressource ",(0,n.jsx)(r.strong,{children:"ResUtilisateurCarteValidateur.resx"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"Resx"}),". N'oubliez pas de le mettre ",(0,n.jsx)(r.strong,{children:"public"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Ajoutez la valeur ci-dessous."}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Nom"}),(0,n.jsx)(r.th,{children:"Valeur"})]})}),(0,n.jsx)(r.tbody,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"Quantite_PlageInvalide"}),(0,n.jsx)(r.td,{children:"La valeur doit \xeatre entre 1 et 32 767 inclusivement."})]})})]}),"\n",(0,n.jsxs)(r.p,{children:["Modifiez la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteValidateur"})," pour recevoir la d\xe9pendance ",(0,n.jsx)(r.strong,{children:"IStringLocalizer<ResUtilisateurCarteValidateur>"}),"(lignes 19, 30 et 35)."]}),"\n",(0,n.jsx)(r.p,{children:"La r\xe8gle pour la quantit\xe9 utilise le texte du fichier ressource (ligne 38)."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using FluentValidation;\r\nusing FluentValidation.Results;\r\nusing Microsoft.Extensions.Localization;\r\nusing SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\nusing SuperCarte.Core.Resx;\r\n\r\nnamespace SuperCarte.Core.Validateurs;\r\n\r\n/// <summary>\r\n/// Classe qui valide le mod\xe8le UtilisateurCarteModel\r\n/// </summary>\r\npublic class UtilisateurCarteValidateur : AbstractValidator<UtilisateurCarteModel>, IValidateurPropriete<UtilisateurCarteModel>\r\n{\r\n    private readonly IUtilisateurCarteRepo _utilisateurCarteRepo;\r\n    private readonly IUtilisateurRepo _utilisateurRepo;\r\n    private readonly ICarteRepo _carteRepo;\r\n    //highlight-next-line\r\n    private readonly IStringLocalizer<ResUtilisateurCarteValidateur> _resUtilisateurCarteValidateur;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="utilisateurCarteRepo">Repository de UtilisateurCarte</param>\r\n    /// <param name="utilisateurRepo">Repository de Utilisateur</param>\r\n    /// <param name="carteRepo">Repository de Carte</param>\r\n    /// <param name="resUtilisateurCarteValidateur">Fichier ressource ResUtilisateurCarteValidateur</param>\r\n    public UtilisateurCarteValidateur(IUtilisateurCarteRepo utilisateurCarteRepo,\r\n        IUtilisateurRepo utilisateurRepo, ICarteRepo carteRepo,\r\n        //highlight-next-line\r\n        IStringLocalizer<ResUtilisateurCarteValidateur> resUtilisateurCarteValidateur)\r\n    {\r\n        _utilisateurCarteRepo = utilisateurCarteRepo;\r\n        _utilisateurRepo = utilisateurRepo;\r\n        _carteRepo = carteRepo;\r\n        //highlight-next-line\r\n        _resUtilisateurCarteValidateur = resUtilisateurCarteValidateur;\r\n\r\n        RuleFor(i => (int)i.Quantite).Cascade(CascadeMode.Stop)\r\n        //highlight-next-line\r\n            .InclusiveBetween(1, short.MaxValue).WithMessage(resUtilisateurCarteValidateur["Quantite_PlageInvalide"]);\r\n    }\r\n\r\n    public async Task<ValidationModel> ValiderAsync(UtilisateurCarteModel modele, params string[] proprietesAValider)\r\n    {\r\n        ValidationResult validationResult;\r\n\r\n        if (proprietesAValider?.Length > 0)\r\n        {\r\n            //Il y a des propri\xe9t\xe9s \xe0 valider\r\n            validationResult = await this.ValidateAsync(modele, o => o.IncludeProperties(proprietesAValider));\r\n        }\r\n        else\r\n        {\r\n            //Il n\'y a aucune propri\xe9t\xe9 \xe0 valider\r\n            validationResult = await base.ValidateAsync(modele);\r\n        }\r\n\r\n        return validationResult.VersValidationModel();\r\n    }\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Il faudra maintenant cr\xe9er, dans les tests, un simulacre pour le message d'erreur car il est n\xe9cessaire dans le constructeur du validateur."}),"\n",(0,n.jsxs)(r.p,{children:["Pour le test ",(0,n.jsx)(r.strong,{children:"valide"}),", il faut configurer le simulacre pour retourner un message d'erreur, peu importe la ressource demand\xe9e (ligne 17). Ce message peut \xeatre n'importe quoi, car il ne sera pas test\xe9 dans l'assertion."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Theory]\r\n[InlineData(1)] //Min\r\n[InlineData(short.MaxValue)] //Max\r\n[InlineData(15657)] //Entre les 2\r\npublic async Task ValiderAsync_Quantite_Valide(short quantite)\r\n{\r\n    //Arrangement (Arrange)\r\n    UtilisateurCarteModel utilisateurCarteModel = new UtilisateurCarteModel()\r\n    {\r\n        Quantite = quantite\r\n    };\r\n\r\n    var utilisateurCarteRepo = new Mock<IUtilisateurCarteRepo>();\r\n    var carteRepo = new Mock<ICarteRepo>();\r\n    var utilisateurRepo = new Mock<IUtilisateurRepo>();\r\n    var ressource = new Mock<IStringLocalizer<ResUtilisateurCarteValidateur>>();\r\n    //highlight-next-line\r\n    ressource.Setup(x => x[It.IsAny<string>()]).Returns(new LocalizedString("Test", "Message erreur Test"));\r\n\r\n    UtilisateurCarteValidateur utilisateurCarteValidateur =\r\n        new UtilisateurCarteValidateur(utilisateurCarteRepo.Object,\r\n                                       utilisateurRepo.Object,\r\n                                       carteRepo.Object,\r\n                                       ressource.Object);\r\n\r\n    //Action (Act)\r\n    ValidationModel validationModel = await utilisateurCarteValidateur.ValiderAsync(utilisateurCarteModel);\r\n\r\n    //Assertion (Assert)        \r\n    Assert.False(validationModel.ErreurParPropriete.ContainsKey(nameof(utilisateurCarteModel.Quantite)));\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Pour le test ",(0,n.jsx)(r.strong,{children:"non valide"}),", il faut configurer le message d'erreur et v\xe9rifier dans l'assertion que c'est ce m\xeame message qui est retourn\xe9. Il y a un risque que le validateur n'utilise pas la bonne cl\xe9 de ressource. Il faut donc le valider que c'est bien la bonne ressource qui est utilis\xe9e."]}),"\n",(0,n.jsx)(r.p,{children:"Le fonctionnement d'un Mock est le suivant: si la cl\xe9 de message \"Quantite_PlageInvalide\" est demand\xe9e, alors retourne messageErreurAttendu (ligne 18). Ce qui est important, ce n'est pas le contenu du message retourn\xe9, c'est le fait que la bonne cl\xe9 ait \xe9t\xe9 demand\xe9e."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 7, il faut cr\xe9er la constante pour le message d'erreur attendu. Il est utilis\xe9 pour configurer le simulacre de la ressource \xe0 la ligne 18, et v\xe9rifier que c'est bien le bon message qui est retourn\xe9 \xe0 la ligne 31."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 31, il y a une nouvelle assertion qui v\xe9rifie que le message d'erreur attendu est celui qui a \xe9t\xe9 obtenu."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Theory]\r\n[InlineData(0)] //Limite\r\n[InlineData(-10)] //N\xe9gatif    \r\npublic async Task ValiderAsync_Quantite_NonValide(short quantite)\r\n{\r\n    //Arrangement (Arrange)       \r\n    //highlight-next-line \r\n    const string messageErreurAttendu = "Quantite_PlageInvalide_Test";\r\n\r\n    UtilisateurCarteModel utilisateurCarteModel = new UtilisateurCarteModel()\r\n    {\r\n        Quantite = quantite\r\n    };\r\n\r\n    var utilisateurCarteRepo = new Mock<IUtilisateurCarteRepo>();\r\n    var carteRepo = new Mock<ICarteRepo>();\r\n    var utilisateurRepo = new Mock<IUtilisateurRepo>();\r\n    var ressource = new Mock<IStringLocalizer<ResUtilisateurCarteValidateur>>();\r\n    //highlight-next-line\r\n    ressource.Setup(x => x["Quantite_PlageInvalide"]).Returns(new LocalizedString("Quantite_PlageInvalide", messageErreurAttendu));       \r\n\r\n    UtilisateurCarteValidateur utilisateurCarteValidateur =\r\n        new UtilisateurCarteValidateur(utilisateurCarteRepo.Object,\r\n                                       utilisateurRepo.Object,\r\n                                       carteRepo.Object,\r\n                                       ressource.Object);\r\n\r\n    //Action (Act)\r\n    ValidationModel validationModel = await utilisateurCarteValidateur.ValiderAsync(utilisateurCarteModel);\r\n\r\n    //Assertion (Assert)        \r\n    Assert.True(validationModel.ErreurParPropriete.ContainsKey(nameof(utilisateurCarteModel.Quantite)));\r\n    //highlight-next-line\r\n    Assert.Equal(messageErreurAttendu, validationModel.ErreurParPropriete[nameof(utilisateurCarteModel.Quantite)]);\r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cuter le test, il devrait passer."}),"\n",(0,n.jsx)(r.h3,{id:"validation-des-tests",children:"Validation des tests"}),"\n",(0,n.jsx)(r.p,{children:"Il est toujours bon de v\xe9rifier si les tests sont valides. Pour ce faire, on veut provoquer une erreur."}),"\n",(0,n.jsx)(r.p,{children:"Vous pouvez changer les valeurs dans le test lui m\xeame, ou changer le code qui est test\xe9."}),"\n",(0,n.jsx)(r.p,{children:"Par exemple, pour le test de valide, on pourrait changer la valeur 1 pour -1 dans le test. Le test devrait alors donner une erreur."}),"\n",(0,n.jsx)(r.p,{children:"Autre exemple, dans UtilisateurCarteValidateur, au lieu de"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:'WithMessage(resUtilisateurCarteValidateur["Quantite_PlageInvalide"])'})}),"\n",(0,n.jsx)(r.p,{children:"inscrivez"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:'WithMessage("allo")'})}),"\n",(0,n.jsxs)(r.p,{children:["Le test pour invalide devrait alors indiquer ",(0,n.jsx)(r.strong,{children:'Expected: "Quantite_PlageInvalide_Test" Actual allo'})]}),"\n",(0,n.jsxs)(r.p,{children:["Il est tr\xe8s important de faire ",(0,n.jsx)(r.em,{children:"planter"})," un test au moins une fois afin de s'assurer qu'il teste quelquechose."]}),"\n",(0,n.jsx)(r.h2,{id:"tester-un-service---utilisateurcarteservice",children:"Tester un service - UtilisateurCarteService"}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteServiceTest"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"SupertCarte.UTest/Core/Services"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace SuperCarte.UTest.Core.Services;\r\n\r\n/// <summary>\r\n/// Tests unitaires pour la classe UtilisateurCarteService\r\n/// </summary>\r\npublic class UtilisateurCarteServiceTest\r\n{\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"ajout-pour-les-tests",children:"Ajout pour les tests"}),"\n",(0,n.jsx)(r.p,{children:"Ici aussi les tests sont pour du code qui \xe9tait pr\xe9vu pour la partie 5 des notes de cours sur WPF. Nous allons donc ajouter un peu de code pour les faire."}),"\n",(0,n.jsx)(r.admonition,{title:"Attention",type:"warning",children:(0,n.jsx)(r.p,{children:"Ce code n'est pas complet. Il ne comprend que le code minimal n\xe9cessaire pour les tests."})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Extensions"})," ajoutez la classe ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteMapExtension.cs"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Extensions;\r\npublic static class UtilisateurCarteMapExtension\r\n{\r\n    public static UtilisateurCarteModel VersUtilisateurCarteModel(this UtilisateurCarte item)\r\n    {\r\n        return new UtilisateurCarteModel()\r\n        {\r\n            UtilisateurId = item.UtilisateurId,\r\n            CarteId = item.CarteId,\r\n            Quantite = item.Quantite\r\n        };\r\n    }\r\n\r\n     public static UtilisateurCarte VersUtilisateurCarte(this UtilisateurCarteModel item)\r\n    {\r\n        return new UtilisateurCarte()\r\n        {\r\n            UtilisateurId = item.UtilisateurId,\r\n            CarteId = item.CarteId,\r\n            Quantite = item.Quantite\r\n        };\r\n    }\r\n\r\n    public static void Copie(this UtilisateurCarteModel itemDestination, UtilisateurCarte utilisateurCarteSource, bool copierClePrimaire)\r\n    {\r\n        if (copierClePrimaire == true)\r\n        {\r\n            itemDestination.UtilisateurId = utilisateurCarteSource.UtilisateurId;\r\n            itemDestination.CarteId = utilisateurCarteSource.CarteId;\r\n        }\r\n\r\n        itemDestination.Quantite = utilisateurCarteSource.Quantite;\r\n    }\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Repositories/IUtilisateurCarteRepo.cs"}),", ajoutez cette d\xe9claration:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"    Task<UtilisateurCarte?> ObtenirParCleAsync(int utilisateurId, int carteId);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Repositories/UtilisateurCarteRepo.cs"}),", ajoutez cette fonction:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<UtilisateurCarte?> ObtenirParCleAsync(int utilisateurId, int carteId)\r\n{\r\n    return await (from lqUtilisateurCarte in _bd.UtilisateurCarteTb\r\n                  where\r\n                       lqUtilisateurCarte.UtilisateurId == utilisateurId &&\r\n                       lqUtilisateurCarte.CarteId == carteId\r\n                  select\r\n                    lqUtilisateurCarte).FirstOrDefaultAsync();\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Services/IUtilisateurCarteService.cs"}),", ajoutez ces d\xe9clarations:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"    Task<UtilisateurCarteModel?> ObtenirAsync(int utilisateurId, int carteId);\r\n    Task<bool> AjouterAsync(UtilisateurCarteModel utilisateurCarteModel);\r\n    Task<ValidationModel> ValiderAsync(UtilisateurCarteModel utilisateurCarteModel, bool validerPourAjout);\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Services/UtilisateurCarteService.cs"}),", ajoutez ce using:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using SuperCarte.Core.Extensions;\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Services/UtilisateurCarteService.cs"}),", modifiez le constructeur et ajoutez _utilisateurCarteValidateur:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"    private readonly IValidateurPropriete<UtilisateurCarteModel> _utilisateurCarteValidateur;\r\n\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:" public UtilisateurCarteService(IUtilisateurCarteRepo utilisateurCarteRepo,\r\n     IValidateurPropriete<UtilisateurCarteModel> utilisateurCarteValidateur)\r\n {\r\n     _utilisateurCarteRepo = utilisateurCarteRepo;\r\n     _utilisateurCarteValidateur = utilisateurCarteValidateur;\r\n }\r\n\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Dans ",(0,n.jsx)(r.strong,{children:"SuperCarte.Core/Services/UtilisateurCarteService.cs"}),", ajoutez ces fonctions:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"//////\r\npublic async Task<UtilisateurCarteModel?> ObtenirAsync(int utilisateurId, int carteId)\r\n{\r\n    UtilisateurCarte? utilisateurCarte = await _utilisateurCarteRepo.ObtenirParCleAsync(utilisateurId, carteId);\r\n\r\n    return utilisateurCarte?.VersUtilisateurCarteModel();\r\n}\r\n \r\npublic async Task<bool> AjouterAsync(UtilisateurCarteModel utilisateurCarteModel)\r\n{\r\n    if ((await ValiderAsync(utilisateurCarteModel, true)).EstValide == true)\r\n    {\r\n        //Transformation de l'objet du mod\xe8le du domaine en objet du mod\xe8le de donn\xe9es\r\n        UtilisateurCarte utilisateurCarte = utilisateurCarteModel.VersUtilisateurCarte();\r\n\r\n        //Ajout dans repository avec enregistrement imm\xe9diat\r\n        await _utilisateurCarteRepo.AjouterAsync(utilisateurCarte, true);\r\n\r\n        utilisateurCarteModel.Copie(utilisateurCarte, false);\r\n\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}\r\n\r\npublic async Task<ValidationModel> ValiderAsync(UtilisateurCarteModel utilisateurCarteModel, bool validerPourAjout)\r\n{\r\n    if (validerPourAjout == true)\r\n    {\r\n        return await _utilisateurCarteValidateur.ValiderAsync(utilisateurCarteModel);\r\n    }\r\n    else\r\n    {\r\n        return await _utilisateurCarteValidateur.ValiderAsync(utilisateurCarteModel,\r\n            nameof(utilisateurCarteModel.Quantite));\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"test-obtenircartesutilisateurasync",children:"Test ObtenirCartesUtilisateurAsync"}),"\n",(0,n.jsxs)(r.p,{children:["Est-ce qu'il y a quelque chose \xe0 tester dans la m\xe9thode ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteServices.cs/ObtenirCartesUtilisateurAsync"})," ?"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<List<QuantiteCarteDetailModel>> ObtenirCartesUtilisateurAsync(int utilisateurId)\r\n{\r\n    return await _utilisateurCarteRepo.ObtenirCartesUtilisateurAsync(utilisateurId);\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Cette m\xe9thode effectue uniquement un appel au ",(0,n.jsx)(r.strong,{children:"repository"})," sans aucune logique. Il n'est pas n\xe9cessaire de faire un test pour cette m\xe9thode."]}),"\n",(0,n.jsxs)(r.p,{children:["Le seul test possible serait de s'assurer que la m\xe9thode retourne exactement la m\xeame chose de ce que le ",(0,n.jsx)(r.strong,{children:"repository"})," retourne. Les tests doivent avoir une valeur et celui-ci n\u2019en donne pas r\xe9ellement. Comment ce test s'appellerait-il ? S'il est difficile de nommer le test, c'est souvent un indicateur qu'il n'est pas utile."]}),"\n",(0,n.jsx)(r.h3,{id:"test-obtenirasync",children:"Test ObtenirAsync"}),"\n",(0,n.jsxs)(r.p,{children:["Voici la m\xe9thode ",(0,n.jsx)(r.strong,{children:"ObtenirAsync"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<UtilisateurCarteModel?> ObtenirAsync(int utilisateurId, int carteId)\r\n{\r\n    UtilisateurCarte? utilisateurCarte = await _utilisateurCarteRepo.ObtenirParCleAsync(utilisateurId, carteId);\r\n\r\n    return utilisateurCarte?.VersUtilisateurCarteModel();\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Est-ce qu'il faut la tester ? Celle-ci \xe0 2 cas de test."}),"\n",(0,n.jsx)(r.h4,{id:"insertion-des-cl\xe9s",children:"Insertion des cl\xe9s"}),"\n",(0,n.jsxs)(r.p,{children:["Le premier test est de s'assurer que les param\xe8tres ne sont pas invers\xe9s en appelant le ",(0,n.jsx)(r.strong,{children:"repository"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"ObtenirAsync_ParametreRepo_BonOrdre()"})," dans ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteServiceTest"}),". Remarquez que la m\xe9thode est asynchrone, car celle \xe0 tester est asynchrone."]}),"\n",(0,n.jsx)(r.p,{children:"Il faut cr\xe9er les constantes pour les cl\xe9s (lignes 5 et 6)."}),"\n",(0,n.jsx)(r.p,{children:"Le service a 2 d\xe9pendances. Il faut cr\xe9er les simulacres. Il n'est pas n\xe9cessaire de les configurer (lignes 8 et 9)."}),"\n",(0,n.jsxs)(r.p,{children:["Ensuite, il faut ex\xe9cuter la m\xe9thode (ligne 16). La m\xe9thode est asynchrone, il ne faut pas oublier le ",(0,n.jsx)(r.strong,{children:"await"}),". Il n'est pas n\xe9cessaire de r\xe9cup\xe9rer l'objet de retour, car il n'est pas n\xe9cessaire \xe0 l'assertion."]}),"\n",(0,n.jsx)(r.p,{children:"Finalement, l'assertion est sur le comportement."}),"\n",(0,n.jsx)(r.p,{children:"Il est possible de v\xe9rifier si un appel a \xe9t\xe9 fait sur une m\xe9thode d'un simulacre."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 19, il est v\xe9rifi\xe9 que la m\xe9thode est appel\xe9e seulement une fois avec les param\xe8tres de l'arrangement. Il est important que les valeurs des cl\xe9s soient diff\xe9rentes pour d\xe9tecter leur inversion. \xc0 la ligne 20, l'assertion est que la m\xe9thode n'est jamais appel\xe9e avec une inversion."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic async Task ObtenirAsync_ParametreRepo_BonOrdre()\r\n{\r\n    //Arrangement (Arrange)\r\n    const int utilisateurId = 4;\r\n    const int carteId = 5;\r\n\r\n    var utilisateurCarteRepository = new Mock<IUtilisateurCarteRepo>();\r\n    var utilisateurCarteValidateur = new Mock<IValidateurPropriete<UtilisateurCarteModel>>();\r\n\r\n    UtilisateurCarteService utilisateurCarteService =\r\n        new UtilisateurCarteService(utilisateurCarteRepository.Object,\r\n                                    utilisateurCarteValidateur.Object);\r\n\r\n    //Action (Act)\r\n    await utilisateurCarteService.ObtenirAsync(utilisateurId, carteId);\r\n\r\n    //Assertion (Assert)\r\n    utilisateurCarteRepository.Verify(x => x.ObtenirParCleAsync(utilisateurId, carteId), Times.Once);\r\n    utilisateurCarteRepository.Verify(x => x.ObtenirParCleAsync(carteId, utilisateurId), Times.Never);\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Ex\xe9cutez le test, il devrait passer."}),"\n",(0,n.jsxs)(r.p,{children:["Mais comme recommend\xe9, il faut que le test plante afin de s'assurer que l'on test la bonne chose. Modifiez temporairement la m\xe9thode ",(0,n.jsx)(r.strong,{children:"ObtenirAsync()"})," du service par celle-ci. Le programmeur a utilis\xe9 2 fois la cl\xe9 ",(0,n.jsx)(r.strong,{children:"utilisateurId"}),". Testez de nouveau et le test sera en \xe9chec."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<UtilisateurCarteModel?> ObtenirAsync(int utilisateurId, int carteId)\r\n{\r\n    //highlight-next-line\r\n    UtilisateurCarte? utilisateurCarte = await _utilisateurCarteRepo.ObtenirParCleAsync(utilisateurId, utilisateurId);\r\n\r\n    return utilisateurCarte?.VersUtilisateurCarteModel();\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"R\xe9-ex\xe9cutez le test. Cette fois-ci, il sera en erreur."}),"\n",(0,n.jsx)(r.p,{children:"Remettez la fonction ObtenirAsync comme elle \xe9tait."}),"\n",(0,n.jsx)(r.h4,{id:"conversion-de-utilisateurcarte-vers-utilisateurcartemodel",children:"Conversion de UtilisateurCarte vers UtilisateurCarteModel"}),"\n",(0,n.jsxs)(r.p,{children:["Le 2e test est de s'assurer que la conversion de ",(0,n.jsx)(r.strong,{children:"UtilisateurCarte"})," vers ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteModel"})," est correcte."]}),"\n",(0,n.jsx)(r.p,{children:"Cette conversion est effectu\xe9e par la ligne"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="NE PAS COPIER"',children:"        return utilisateurCarte?.VersUtilisateurCarteModel();\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Est-ce n\xe9cessaire de tester ce cas si le test unitaire de ",(0,n.jsx)(r.strong,{children:"utilisateurCarte?.VersUtilisateurCarteModel()"})," a d\xe9j\xe0 \xe9t\xe9 fait ?"]}),"\n",(0,n.jsxs)(r.admonition,{type:"note",children:[(0,n.jsx)(r.p,{children:"Ici, on ne veut pas tester si le programmeur \xe0 utiliser ou non la bonne fonction, on veut savoir si, peut importe comment c'est fait, que c'est bien fait."}),(0,n.jsx)(r.p,{children:"Le but de la fonction ObtenirAsync est d'obtenir un objet de donn\xe9e \xe0 partir de la source (ici une bd) et de retourner un objet du domaine. Il faut donc v\xe9rifier que cette conversion est bien faite."})]}),"\n",(0,n.jsx)(r.p,{children:"Imaginez que le programmeur oublie d'utiliser la m\xe9thode d'extension et il le fait directement dans la classe comme dans l'exemple ci-dessous. Tester VersUtilisateurCarteModel() serait inutile dans ce cas-ci. Un test ne doit pas d\xe9pendre d'un autre test pour le consid\xe9rer valide."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="NE PAS COPIER"',children:"public async Task<UtilisateurCarteModel?> ObtenirAsync(int utilisateurId, int carteId)\r\n{\r\n    UtilisateurCarte? utilisateurCarte = await _utilisateurCarteRepo.ObtenirParCleAsync(utilisateurId, carteId);\r\n    \r\n    if(utilisateurCarte != null)\r\n\t{\r\n        return new UtilisateurCarteModel()\r\n        {\r\n            UtilisateurId = utilisateurCarte.UtilisateurId,\r\n            CarteId = utilisateurCarte.CarteId,\r\n            Quantite = utilisateurCarte.Quantite\r\n        };\r\n    }\r\n    else\r\n    {\r\n        return null;\r\n    }\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Voici la m\xe9thode pour le test. Ajoutez la dans ",(0,n.jsx)(r.strong,{children:"UtilisateurCarteServiceTests"})]}),"\n",(0,n.jsxs)(r.p,{children:["Aux lignes 5 \xe0 10, l'objet est cr\xe9\xe9 \xe0 l'aide de la librairie ",(0,n.jsx)(r.strong,{children:"AutoFixture"})," pour assigner tous les champs."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 13, il faut configurer le simulacre pour le ",(0,n.jsx)(r.strong,{children:"repository"})," pour retourner l'utilisateur g\xe9n\xe9r\xe9 \xe0 la ligne 6. \xc9galement, ce sont les vraies valeurs qui sont sp\xe9cifi\xe9es pour les cl\xe9e dans la configuration. Mais il aurait \xe9t\xe9 aussi valide de mettre ",(0,n.jsx)(r.strong,{children:"It.IsAny<int>()"}),", car le test s'occupe uniquement de la conversion. Le test ",(0,n.jsx)(r.strong,{children:"ObtenirAsync_ParametreRepo_BonOrdre"})," s'occupe de l'ordre des param\xe8tres."]}),"\n",(0,n.jsxs)(r.p,{children:["Le mock pour le repository (ligne 12) est configur\xe9 de la facon suivante (ligne 13): si un appel \xe0 ObtenirParCleAsync est fait, retourne utilisateurCarte. L'action du test va donc appeler la vrai fonction UtilisateurCarteService/ObtenirAsync() (ligne 22). Celle-ci va appeler ",(0,n.jsx)(r.strong,{children:"_utilisateurCarteRepo.ObtenirParCleAsync"}),", mais \xe9tant donn\xe9 que _utilisateurCarteRepo est g\xe9n\xe9r\xe9 via une interface, ce n'est pas le vrai qui sera inject\xe9, c'est le Mock. Ce Mock interceptera donc ObtenirParCleAsync et retournera utilisateurCarte. C'est donc notre utilisateurCarte qui sera converti en UtilisateurCarteModel. Donc c'est la convertion qui est test\xe9e."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 27, la librairie ",(0,n.jsx)(r.strong,{children:"FluentValidation"})," fait la comparaison entre l'objet du mod\xe8le du domaine obtenu avec celui cr\xe9\xe9."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic async Task ObtenirAsync_DataVersModeleNonNull_ValeursIdentiques()\r\n{\r\n    //Arrangement (Arrange)\r\n    var fixture = new Fixture();        \r\n    UtilisateurCarte utilisateurCarte =\r\n        fixture.Build<UtilisateurCarte>()\r\n            .Without(uc=> uc.Utilisateur)\r\n            .Without(uc => uc.Carte)\r\n            .Create();\r\n\r\n    var utilisateurCarteRepository = new Mock<IUtilisateurCarteRepo>();\r\n    utilisateurCarteRepository.Setup(x => x.ObtenirParCleAsync(utilisateurCarte.UtilisateurId, utilisateurCarte.CarteId))\r\n        .ReturnsAsync(utilisateurCarte);\r\n    var utilisateurCarteValidateur = new Mock<IValidateurPropriete<UtilisateurCarteModel>>();\r\n\r\n    UtilisateurCarteService utilisateurCarteService =\r\n        new UtilisateurCarteService(utilisateurCarteRepository.Object,\r\n                                    utilisateurCarteValidateur.Object);\r\n\r\n    //Action (Act)\r\n    UtilisateurCarteModel utilisateurCarteModelActuel = \r\n        await utilisateurCarteService.ObtenirAsync(utilisateurCarte.UtilisateurId, utilisateurCarte.CarteId);\r\n\r\n    //Assertion (Assert)\r\n    utilisateurCarteModelActuel.Should()\r\n        .BeEquivalentTo(utilisateurCarte, options => options.ExcludingMissingMembers());\r\n\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Modifiez la m\xe9thode du service avec la version ci-dessous."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<UtilisateurCarteModel?> ObtenirAsync(int utilisateurId, int carteId)\r\n{\r\n    UtilisateurCarte? utilisateurCarte = await _utilisateurCarteRepo.ObtenirParCleAsync(utilisateurId, carteId);\r\n    \r\n    if(utilisateurCarte != null)\r\n\t{\r\n        return new UtilisateurCarteModel()\r\n        {\r\n            UtilisateurId = utilisateurCarte.UtilisateurId,\r\n            CarteId = utilisateurCarte.CarteId,\r\n            Quantite = utilisateurCarte.Quantite\r\n        };\r\n    }\r\n    else\r\n    {\r\n        return null;\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"R\xe9ex\xe9cutez le test. Le test sera encore un succ\xe8s."}),"\n",(0,n.jsx)(r.p,{children:"Maintenant remplacer utilisateurCarte.Quantite \xe0 la ligne 11 par un entier quelconque, et reex\xe9cutez le test. Il devrait planter. Je dis bien \"devrait\" car il la fixture g\xe9n\xe8re un nombre al\xe9ratoire pour cette quantit\xe9. Il y a donc une faible chance que la valeur al\xe9atoire et votre valeur soit les m\xeames. Si c'est le cas, r\xe9essayez une autre fois... s'il n'y a toujours pas d'erreur ... allez vous acheter un 6/49."}),"\n",(0,n.jsx)(r.p,{children:"Remettez la fonction \xe0 son \xe9tat original."}),"\n",(0,n.jsx)(r.h3,{id:"tester-ajouterasync",children:"Tester AjouterAsync"}),"\n",(0,n.jsx)(r.p,{children:"CategorieService/AjouterAsync"}),"\n",(0,n.jsx)(r.p,{children:"Pour cette m\xe9thode, il y a plusieurs cas."}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Si l'objet n'est pas valide, l'enregistrement ne s'effectue pas."}),"\n",(0,n.jsx)(r.li,{children:"Si le mod\xe8le est valide, l'enregistrement s'effectue"}),"\n",(0,n.jsx)(r.li,{children:"Avant l'insertion, l'objet du mod\xe8le du domaine est converti correctement en mod\xe8le de donn\xe9e"}),"\n",(0,n.jsx)(r.li,{children:"Apr\xe8s l'insertion, l'objet du mod\xe8le de donn\xe9es est mis \xe0 jour \xe0 partir du mod\xe8le."}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Seulement le premier test sera pr\xe9sent\xe9."}),"\n",(0,n.jsxs)(r.p,{children:["Les 2 derniers sont plus complexes, car il faut intercepter l'objet envoyer en param\xe8tre. Il faut utiliser la notion de ",(0,n.jsx)(r.strong,{children:"callback"})," dans la configuration du ",(0,n.jsx)(r.strong,{children:"mock"}),". Cette notion ne sera pas pr\xe9sent\xe9e."]}),"\n",(0,n.jsx)(r.h4,{id:"ajouterasync_modeleinvalide_repononajout",children:"AjouterAsync_ModeleInvalide_RepoNonAjout"}),"\n",(0,n.jsxs)(r.p,{children:["Le premier test est de s'assurer que le ",(0,n.jsx)(r.strong,{children:"repository"})," n'ajoute pas l'objet lorsque le mod\xe8le du domaine n'est pas valide. Ce test est un test comportemental, car il ne valide pas un r\xe9sultat, mais si un comportement est bien ex\xe9cut\xe9."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"AjouterAsync_ModeleInvalide_RepoNonAjout()"}),". Remarquez que la m\xe9thode est asynchrone, car celle \xe0 tester est asynchrone."]}),"\n",(0,n.jsx)(r.p,{children:"Il faut cr\xe9er l'objet du mod\xe8le \xe0 ajouter (ligne 5). Cet objet peut \xeatre vide, car il ne sera pas r\xe9ellement valid\xe9 ou ajout\xe9."}),"\n",(0,n.jsxs)(r.p,{children:["Il faut cr\xe9er l'objet ",(0,n.jsx)(r.strong,{children:"ValidationModel"})," avec une erreur(lignes 7 et 8)."]}),"\n",(0,n.jsxs)(r.p,{children:["Le ",(0,n.jsx)(r.strong,{children:"validateur"})," (ligne 10) est cr\xe9\xe9. \xc0 la ligne 11, il faut le configurer pour retourner le ",(0,n.jsx)(r.strong,{children:"ValidationModel"})," en erreur lorsque l'objet du mod\xe8le lui est envoy\xe9."]}),"\n",(0,n.jsxs)(r.p,{children:["Il faut \xe9galement un ",(0,n.jsx)(r.strong,{children:"repository"})," (ligne 13).   Aucune configuration n'est n\xe9cessaire."]}),"\n",(0,n.jsx)(r.p,{children:"Le service est cr\xe9\xe9 \xe0 la ligne 15."}),"\n",(0,n.jsx)(r.p,{children:"\xc0 la ligne 20, la m\xe9thode est ex\xe9cut\xe9e en envoyant l'objet du mod\xe8le de la ligne 5."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 23, la premi\xe8re assertion est qu'il faut s'assurer que la m\xe9thode ",(0,n.jsx)(r.strong,{children:"ValiderAsync()"})," du validateur a \xe9t\xe9 appel\xe9e seulement une fois avec le mod\xe8le du domaine qui a \xe9t\xe9 envoy\xe9."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 24, la 2e assertion est qu'il faut s'assurer que la m\xe9thode ",(0,n.jsx)(r.strong,{children:"AjouterAsync()"})," du ",(0,n.jsx)(r.strong,{children:"repository"})," n'est jamais appel\xe9e, peu importe les param\xe8tres."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'[Fact]\r\npublic async Task AjouterAsync_ModeleInvalide_RepoNonAjout()\r\n{\r\n    //Arrangement (Arrange)\r\n    UtilisateurCarteModel utilisateurCarteModel = new UtilisateurCarteModel();\r\n    \r\n    var validationModel = new ValidationModel();\r\n    validationModel.AssignerErreur("testPropriete", "testMessage");\r\n\r\n    var utilisateurCarteValidateur = new Mock<IValidateurPropriete<UtilisateurCarteModel>>();\r\n    utilisateurCarteValidateur.Setup(x => x.ValiderAsync(It.IsAny<UtilisateurCarteModel>())).ReturnsAsync(validationModel);\r\n\r\n    var utilisateurCarteRepository = new Mock<IUtilisateurCarteRepo>();\r\n    \r\n    UtilisateurCarteService utilisateurCarteService =\r\n        new UtilisateurCarteService(utilisateurCarteRepository.Object,\r\n                                    utilisateurCarteValidateur.Object); \r\n    \r\n    //Action (Act)        \r\n    await utilisateurCarteService.AjouterAsync(utilisateurCarteModel);\r\n    \r\n    //Assertion (Assert)\r\n    utilisateurCarteValidateur.Verify(x => x.ValiderAsync(utilisateurCarteModel), Times.Once);\r\n    utilisateurCarteRepository.Verify(x => x.AjouterAsync(It.IsAny<UtilisateurCarte>(), It.IsAny<bool>()), Times.Never);\r\n    \r\n}\n'})}),"\n",(0,n.jsx)(r.p,{children:"Si vous ex\xe9cutez le test, il va passer."}),"\n",(0,n.jsx)(r.p,{children:"Pour v\xe9rifier si le test est fonctionnel, mettez en commentaire la ligne 8. Le validateur ne donnera donc pas d'erreur et la m\xe9thode AjouterAsync sera ex\xe9cut\xe9."}),"\n",(0,n.jsx)(r.p,{children:"Mais si AjouterAsync est appel\xe9, est-ce qu'un enregistrement sera ajout\xe9 dans la bd ?"}),"\n",(0,n.jsx)(r.p,{children:"La r\xe9ponse est non, car le repository est mocked aussi. Mais si on avait utilis\xe9 un vrai repository (par exemple, si celui-ci n'\xe9tait pas inject\xe9), alors oui, le test aurait ajout\xe9 une entr\xe9e. Il faut donc faire attention aux tests pour ne pas corrompre la bd si elle est en production. Mais si vous avez bien fait les choses, et que vous inject\xe9 un repository mock, alors pas de risque."}),"\n",(0,n.jsx)(r.h2,{id:"tester-un-repository",children:"Tester un repository"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"IMPORTANT"}),". Le repository n'est plus \xe0 tester pour le ",(0,n.jsx)(r.strong,{children:"TP 3"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"tester-viewmodel---listecategoriesvm",children:"Tester ViewModel - ListeCategoriesVM"}),"\n",(0,n.jsxs)(r.p,{children:["Pour tester le ",(0,n.jsx)(r.strong,{children:"ViewModel"}),", il faut regarder le comportement des propri\xe9t\xe9s et des commandes en fonction d'un changement d'\xe9tat d'une propri\xe9t\xe9 ou d'un appel d'une commande."]}),"\n",(0,n.jsx)(r.p,{children:"Nous allons faire le test pour l'\xe9tat du bouton supprimer."}),"\n",(0,n.jsx)(r.admonition,{title:"Rappel",type:"info",children:(0,n.jsx)(r.p,{children:"Si nous nous rappelons la logique de l'interface, le bouton supprimer pour les cat\xe9gories est disponible seulement si une cat\xe9gorie est s\xe9lectionn\xe9e dans la liste et si cette cat\xe9gorie n'est associ\xe9 \xe0 aucune carte (voir ListeCategorieVM/PeutSupprimer qui est utilis\xe9 dans le constructeur afin de bloquer SupprimerCommande  )"})}),"\n",(0,n.jsx)(r.p,{children:"Il faut tester les 4 cas ci-dessous :"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Aucune cat\xe9gorie s\xe9lectionn\xe9e"}),"\n",(0,n.jsx)(r.li,{children:"La cat\xe9gorie a des d\xe9pendances"}),"\n",(0,n.jsxs)(r.li,{children:["La cat\xe9gorie retourne un objet ",(0,n.jsx)(r.strong,{children:"null"})," pour la d\xe9pendance"]}),"\n",(0,n.jsx)(r.li,{children:"La cat\xe9gorie n'a pas de d\xe9pendance"}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,n.jsx)(r.strong,{children:"ListeCategoriesVMTest"})," dans le dossier ",(0,n.jsx)(r.strong,{children:"UTest\\WPF\\ViewModels"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"/// <summary>\r\n/// Tests unitaires pour la classe ListeCategoriesVM\r\n/// </summary>\r\npublic class ListeCategoriesVMTest\r\n{\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"test-supprimercommande_categorienonselectionnee_nepeutsupprimer",children:"Test SupprimerCommande_CategorieNonSelectionnee_NePeutSupprimer"}),"\n",(0,n.jsx)(r.p,{children:"Ce test permet de d\xe9terminer qu'il n'est pas possible d'ex\xe9cuter la commande si aucune cat\xe9gorie n'est s\xe9lectionn\xe9e."}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"SupprimerCommande_CategorieNonSelectionnee_NePeutSupprimer()"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["La classe ",(0,n.jsx)(r.strong,{children:"ListeCategoriesVM"})," a 4 d\xe9pendances."]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"INavigateur"}),"\n",(0,n.jsx)(r.li,{children:"INotification"}),"\n",(0,n.jsx)(r.li,{children:"ICategorieService"}),"\n",(0,n.jsx)(r.li,{children:"IAuthentificateur"}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Il faut cr\xe9er un simulacre pour chacun des services avec la librairie ",(0,n.jsx)(r.strong,{children:"Moq"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Pour ce test, il faut consid\xe9rer que l'utilisateur est autoris\xe9 \xe0 utiliser la commande. Il faut donc configurer le simulacre (lignes 12 et 13). Donc peu importe le r\xf4le demand\xe9, l'authentificateur retourne toujours ",(0,n.jsx)(r.strong,{children:"true"})," pour ce test."]}),"\n",(0,n.jsxs)(r.p,{children:["Ensuite, il faut cr\xe9er le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," en injectant les simulacres (ligne 15)."]}),"\n",(0,n.jsx)(r.p,{children:"Ensuite, il faut faire les actions. Il y en a 2."}),"\n",(0,n.jsx)(r.p,{children:"La premi\xe8re action est d'indiquer qu'aucune cat\xe9gorie n'est s\xe9lectionn\xe9e (ligne 21)."}),"\n",(0,n.jsxs)(r.p,{children:["Ensuite, il faut r\xe9cup\xe9rer la valeur de la m\xe9thode ",(0,n.jsx)(r.strong,{children:"CanExecute()"})," de la commande ",(0,n.jsx)(r.strong,{children:"SupprimerCommande"})," (ligne 23)."]}),"\n",(0,n.jsxs)(r.p,{children:["Finalement, l'assertion est que la valeur de ",(0,n.jsx)(r.strong,{children:"canExecuteActuel"})," doit \xeatre \xe0 ",(0,n.jsx)(r.strong,{children:"false"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic void SupprimerCommande_CategorieNonSelectionnee_NePeutSupprimer()\r\n{\r\n    //Arrangement (Arrange)\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n\r\n    var categorieService = new Mock<ICategorieService>();        \r\n\r\n    var authentificateur = new Mock<IAuthentificateur>();  \r\n    //L'utilisateur est autoris\xe9\r\n    authentificateur.Setup(x => x.EstAutorise(It.IsAny<string[]>())).Returns(true);\r\n    authentificateur.Setup(x => x.EstAutoriseAsync(It.IsAny<string[]>())).ReturnsAsync(true);\r\n    \r\n    ListeCategoriesVM listeCategoriesVM = new ListeCategoriesVM(authentificateur.Object,\r\n                                                                    notification.Object,\r\n                                                                    categorieService.Object,\r\n                                                                    navigateur.Object);\r\n    \r\n    //Action (Act)    \r\n    listeCategoriesVM.CategorieSelection = null;\r\n\r\n    bool canExecuteActuel = listeCategoriesVM.SupprimerCommande.CanExecute(It.IsAny<object>());\r\n\r\n    //Assertion (Assert)\r\n    Assert.False(canExecuteActuel);\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Ici pour faire planter le test, il suffit d'ajouter un ",(0,n.jsx)(r.strong,{children:"return true"})," au d\xe9but de ",(0,n.jsx)(r.strong,{children:"PeutSupprimer()"})," afin de simuler une erreur de logique dans cette fonction car c'est celle-ci qui controle si SupprimerCommande peut s'ex\xe9cuter ou non. Dans ce test, on v\xe9rifiait si le fait de n'avoir rien de s\xe9lectionn\xe9 (ligne 21) emp\xeachait d'effacer."]}),"\n",(0,n.jsx)(r.h3,{id:"test-supprimercommande_categorieavecdependance_nepeutsupprimer",children:"Test SupprimerCommande_CategorieAvecDependance_NePeutSupprimer"}),"\n",(0,n.jsx)(r.p,{children:"Ce test permet de d\xe9terminer qu'il n'est pas possible d'ex\xe9cuter la commande si la cat\xe9gorie s\xe9lectionn\xe9e a une d\xe9pendance."}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"SupprimerCommande_CategorieAvecDependance_NePeutSupprimer()"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Le test est assez similaire au pr\xe9c\xe9dent. Il faut maintenant configurer la m\xe9thode ",(0,n.jsx)(r.strong,{children:"ObtenirDependance()"})," de ",(0,n.jsx)(r.strong,{children:"CategorieService"})," pour indiquer qu'il y a une d\xe9pendance (ligne 9)."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 22, il faut cr\xe9er un objet de type  ",(0,n.jsx)(r.strong,{children:"CategorieModel"})," pour indiquer qu'une cat\xe9gorie est s\xe9lectionn\xe9e."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic void SupprimerCommande_CategorieAvecDependance_NePeutSupprimer()\r\n{\r\n    //Arrangement (Arrange)\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n\r\n    var categorieService = new Mock<ICategorieService>();\r\n    categorieService.Setup(x => x.ObtenirDependance(It.IsAny<int>())).Returns(new CategorieDependance() { NbCartes = 1 });\r\n\r\n    var authentificateur = new Mock<IAuthentificateur>();\r\n    //L'utilisateur est autoris\xe9\r\n    authentificateur.Setup(x => x.EstAutorise(It.IsAny<string[]>())).Returns(true);\r\n    authentificateur.Setup(x => x.EstAutoriseAsync(It.IsAny<string[]>())).ReturnsAsync(true);\r\n\r\n    ListeCategoriesVM listeCategoriesVM = new ListeCategoriesVM(authentificateur.Object,\r\n                                                                notification.Object,\r\n                                                                categorieService.Object,\r\n                                                                navigateur.Object);\r\n\r\n    //Action (Act)        \r\n    listeCategoriesVM.CategorieSelection = new CategorieModel();\r\n\r\n    bool canExecuteActuel = listeCategoriesVM.SupprimerCommande.CanExecute(It.IsAny<object>());\r\n\r\n    //Assertion (Assert)\r\n    Assert.False(canExecuteActuel);\r\n}\n"})}),"\n",(0,n.jsx)(r.p,{children:"Ici aussi, la fonction qu'on test ultimement est PeutSupprimer(). Donc en ajoutant return true au d\xe9but de cette fonction, on v\xe9rifie que le test est ok."}),"\n",(0,n.jsxs)(r.p,{children:["Est-ce que vous voyez une faille dans le test qui pourrait indiquer un mauvais r\xe9sultat en cas d'une modification du logiciel ? Imaginez qu'une nouvelle table utilise ",(0,n.jsx)(r.strong,{children:"Categorie"})," comme cl\xe9 \xe9trang\xe8re. La classe ",(0,n.jsx)(r.strong,{children:"CategorieDependance"})," va avoir une nouvelle propri\xe9t\xe9 ",(0,n.jsx)(r.strong,{children:"NbNouvelleTables"}),". Il faudra penser de modifier le test pour en tenir compte et \xe9galement le ",(0,n.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"Avez-vous une solution pour ceci ?"}),"\n",(0,n.jsxs)(r.p,{children:["Il faudrait modifier le concept des classes de type ",(0,n.jsx)(r.strong,{children:"D\xe9pendance"}),". Est-ce n\xe9cessaire d'avoir le nombre d'\xe9l\xe9ments par d\xe9pendance ? Si ce n'est pas n\xe9cessaire, il suffirait de retourner un bool\xe9en pour indiquer s'il y a une d\xe9pendance ou non. Si le nombre de d\xe9pendances est n\xe9cessaire, il faudrait modifier la classe comme ci-dessous."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:'showLineNumbers title="NE PAS COPIER"',children:"public class CategorieDependance\r\n{\r\n    public int CategorieId { get; init; }\r\n    public int NbCartes { get; init; }\r\n    public int NbNouvelleTables { get; init; }\r\n    \r\n    public bool PossedeDependance()\r\n    {\r\n    \treturn NbCartes > 0 || NbNouvelleTables > 0;\r\n    }\r\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["Le ",(0,n.jsx)(r.strong,{children:"ViewModel"})," serait prot\xe9g\xe9 par l'\xe9volution des d\xe9pendances."]}),"\n",(0,n.jsxs)(r.p,{children:["Mais le d\xe9veloppeur devra s'assurer qu'\xe0 chaque nouvelle d\xe9pendance pour une table, de mettre \xe0 jour le ",(0,n.jsx)(r.strong,{children:"repository"}),", le mod\xe8le du domaine, le service... Il sera difficile pour un test unitaire de s'assurer que le programmeur n'a rien oubli\xe9."]}),"\n",(0,n.jsx)(r.p,{children:"La cr\xe9ation d'un test peut remettre en question la conception de l'application."}),"\n",(0,n.jsx)(r.h3,{id:"test-supprimercommande_categoriedepandencenull_nepeutsupprimer",children:"Test SupprimerCommande_CategorieDepandenceNull_NePeutSupprimer"}),"\n",(0,n.jsxs)(r.p,{children:["Ce test permet de d\xe9terminer qu'il est possible d'ex\xe9cuter la commande si la cat\xe9gorie s\xe9lectionn\xe9e retourne une d\xe9pendance ",(0,n.jsx)(r.strong,{children:"null"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 9, le simulacre retourne un objet ",(0,n.jsx)(r.strong,{children:"null"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:" [Fact]\r\npublic void SupprimerCommande_CategorieDepandenceNull_NePeutSupprimer()\r\n{\r\n    //Arrangement (Arrange)\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n\r\n    var categorieService = new Mock<ICategorieService>();\r\n    categorieService.Setup(x => x.ObtenirDependance(It.IsAny<int>())).Returns((CategorieDependance)null);\r\n\r\n    var authentificateur = new Mock<IAuthentificateur>();\r\n    //L'utilisateur est autoris\xe9\r\n    authentificateur.Setup(x => x.EstAutorise(It.IsAny<string[]>())).Returns(true);\r\n    authentificateur.Setup(x => x.EstAutoriseAsync(It.IsAny<string[]>())).ReturnsAsync(true);\r\n\r\n    ListeCategoriesVM listeCategoriesVM = new ListeCategoriesVM(authentificateur.Object,\r\n                                                                notification.Object,\r\n                                                                categorieService.Object,\r\n                                                                navigateur.Object);\r\n    \r\n    //Action (Act)        \r\n    listeCategoriesVM.CategorieSelection = new CategorieModel();\r\n    bool canExecuteActuel = listeCategoriesVM.SupprimerCommande.CanExecute(It.IsAny<object>());\r\n\r\n    //Assertion (Assert)\r\n    Assert.False(canExecuteActuel);\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"test-supprimercommande_categoriesansdependance_peutsupprimer",children:"Test SupprimerCommande_CategorieSansDependance_PeutSupprimer"}),"\n",(0,n.jsx)(r.p,{children:"Ce test permet de d\xe9terminer qu'il est possible d'ex\xe9cuter la commande si la cat\xe9gorie s\xe9lectionn\xe9e n'a aucune d\xe9pendance."}),"\n",(0,n.jsxs)(r.p,{children:["\xc0 la ligne 9, le simulacre ne retourne un objet ",(0,n.jsx)(r.strong,{children:"CategorieDependance"})," avec aucune carte."]}),"\n",(0,n.jsxs)(r.p,{children:["Cr\xe9ez la m\xe9thode ",(0,n.jsx)(r.strong,{children:"SupprimerCommande_CategorieSansDependance_PeutSupprimer()"}),"."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic void SupprimerCommande_CategorieSansDependance_PeutSupprimer()\r\n{\r\n    //Arrangement (Arrange)\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n\r\n    var categorieService = new Mock<ICategorieService>();\r\n    categorieService.Setup(x => x.ObtenirDependance(It.IsAny<int>())).Returns(new CategorieDependance() { NbCartes = 0 });\r\n\r\n    var authentificateur = new Mock<IAuthentificateur>();\r\n    //L'utilisateur est autoris\xe9\r\n    authentificateur.Setup(x => x.EstAutorise(It.IsAny<string[]>())).Returns(true);\r\n    authentificateur.Setup(x => x.EstAutoriseAsync(It.IsAny<string[]>())).ReturnsAsync(true);\r\n\r\n    ListeCategoriesVM listeCategoriesVM = new ListeCategoriesVM(authentificateur.Object,\r\n                                                                notification.Object,\r\n                                                                categorieService.Object,\r\n                                                                navigateur.Object);\r\n\r\n    //Action (Act)        \r\n    listeCategoriesVM.CategorieSelection = new CategorieModel();\r\n    bool canExecuteActuel = listeCategoriesVM.SupprimerCommande.CanExecute(It.IsAny<object>());\r\n\r\n    //Assertion (Assert)\r\n    Assert.True(canExecuteActuel);\r\n}\n"})}),"\n",(0,n.jsx)(r.h3,{id:"autre-test",children:"Autre test"}),"\n",(0,n.jsx)(r.p,{children:"Il faudrait \xe9galement s'assurer que lorsque la cat\xe9gorie s\xe9lectionn\xe9e est modifi\xe9e que la commande est notifi\xe9e."}),"\n",(0,n.jsx)(r.p,{children:"Il faut notifier uniquement lorsque la nouvelle cat\xe9gorie est diff\xe9rente de l'ancienne."}),"\n",(0,n.jsxs)(r.p,{children:["Pour \xeatre en mesure de le faire, il faut ajouter une m\xe9thode \xe0 l'\xe9v\xe9nement ",(0,n.jsx)(r.strong,{children:"CanExecuteChanged"})," de la commande (ligne 25). Cette m\xe9thode incr\xe9mente un compteur \xe0 chaque appel."]}),"\n",(0,n.jsx)(r.p,{children:"L'assertion d\xe9termine si le compteur correspond \xe0 la valeur attendue (ligne 38)."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"[Fact]\r\npublic void CategorieSelection_ModificationValeur_NotifierCommande()\r\n{\r\n    //Arrangement (Arrange)\r\n    var navigateur = new Mock<INavigateur>();\r\n    var notification = new Mock<INotification>();\r\n    var categorieService = new Mock<ICategorieService>();        \r\n\r\n    var authentificateur = new Mock<IAuthentificateur>();\r\n    //L'utilisateur est autoris\xe9\r\n    authentificateur.Setup(x => x.EstAutorise(It.IsAny<string[]>())).Returns(true);\r\n    authentificateur.Setup(x => x.EstAutoriseAsync(It.IsAny<string[]>())).ReturnsAsync(true);\r\n\r\n    CategorieModel? categorieModel1 = new CategorieModel();\r\n    CategorieModel? categorieModel2 = null;\r\n    CategorieModel? categorieModel3 = new CategorieModel();\r\n\r\n    ListeCategoriesVM listeCategoriesVM = new ListeCategoriesVM(authentificateur.Object,\r\n                                                                notification.Object,\r\n                                                                categorieService.Object,\r\n                                                                navigateur.Object);\r\n\r\n    int nbCanExecuteChangedActuel = 0;\r\n\r\n    listeCategoriesVM.SupprimerCommande.CanExecuteChanged += delegate\r\n    {\r\n        nbCanExecuteChangedActuel++;\r\n    };\r\n\r\n    //Action (Act)        \r\n    listeCategoriesVM.CategorieSelection = categorieModel1;\r\n    listeCategoriesVM.CategorieSelection = categorieModel2;\r\n    listeCategoriesVM.CategorieSelection = categorieModel3;\r\n    listeCategoriesVM.CategorieSelection = categorieModel1;\r\n    listeCategoriesVM.CategorieSelection = categorieModel1;//Ne doit pas faire changer\r\n\r\n    //Assertion (Assert)\r\n    Assert.Equal(4, nbCanExecuteChangedActuel);        \r\n}\n"})})]})}function d(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>l,a:()=>a});var n=t(7294);const i={},s=n.createContext(i);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);