"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[9421],{6298:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});var s=r(5893),i=r(1151);const o={sidebar_position:10},a="EF Navigation",t={id:"Entity Framework 2/EF_navigation",title:"EF Navigation",description:"Dans EF relations entre les \xe9l\xe9ments utilisent l'agr\xe9gation d'objet et de liste selon le sens de la relation.",source:"@site/docs/50-Entity Framework 2/EF_navigation.md",sourceDirName:"50-Entity Framework 2",slug:"/Entity Framework 2/EF_navigation",permalink:"/4N1_2024/docs/Entity Framework 2/EF_navigation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"NotesSidebar",previous:{title:"Extension de classe",permalink:"/4N1_2024/docs/Entity Framework/methode_extension"},next:{title:"EF_jointure",permalink:"/4N1_2024/docs/Entity Framework 2/EF_jointure"}},l={},d=[{value:"Classe du mod\xe8le - Propri\xe9t\xe9 de navigation",id:"classe-du-mod\xe8le---propri\xe9t\xe9-de-navigation",level:2},{value:"Log des op\xe9rations SQL",id:"log-des-op\xe9rations-sql",level:2},{value:"Jointure classique",id:"jointure-classique",level:2},{value:"<code>join</code>",id:"join",level:3},{value:"Propri\xe9t\xe9 de navigation",id:"propri\xe9t\xe9-de-navigation",level:2},{value:"M\xe9lange de <code>join</code> et navigation",id:"m\xe9lange-de-join-et-navigation",level:2},{value:"Plusieurs niveaux de navigation  - plusieurs \xe0 1 -&gt; plusieurs \xe0 1",id:"plusieurs-niveaux-de-navigation----plusieurs-\xe0-1---plusieurs-\xe0-1",level:2},{value:"Navagion \xe0 plusieurs niveaux - 1 \xe0 plusieurs -&gt; plusieurs \xe0 1",id:"navagion-\xe0-plusieurs-niveaux---1-\xe0-plusieurs---plusieurs-\xe0-1",level:2},{value:"Classe d&#39;extension",id:"classe-dextension",level:2},{value:"Compte - <code>Count()</code>",id:"compte---count",level:2},{value:"Somme - <code>Sum()</code>",id:"somme---sum",level:2},{value:"Moyenne - <code>Average()</code>",id:"moyenne---average",level:2}];function c(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"ef-navigation",children:"EF Navigation"}),"\n",(0,s.jsx)(e.p,{children:"Dans EF relations entre les \xe9l\xe9ments utilisent l'agr\xe9gation d'objet et de liste selon le sens de la relation."}),"\n",(0,s.jsxs)(e.p,{children:["Pour cette section, nous allons r\xe9utiliser la bd ",(0,s.jsx)(e.strong,{children:"GestionPersonnage"})]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/07_dea_GestionFilm.jpg"}),"\n",(0,s.jsxs)(e.p,{children:["Notez que nous avons renomm\xe9 la table ",(0,s.jsx)(e.strong,{children:"Univers"})," pour ",(0,s.jsx)(e.strong,{children:"Franchise"})," afin de r\xe9gler un probl\xe8me de conflit de nom."]}),"\n",(0,s.jsx)(e.admonition,{type:"warning",children:(0,s.jsxs)(e.p,{children:["Veuillez changer le projet de d\xe9marrage pour ",(0,s.jsx)(e.strong,{children:"LinqCRUD"})]})}),"\n",(0,s.jsx)(e.h2,{id:"classe-du-mod\xe8le---propri\xe9t\xe9-de-navigation",children:"Classe du mod\xe8le - Propri\xe9t\xe9 de navigation"}),"\n",(0,s.jsxs)(e.p,{children:["La table ",(0,s.jsx)(e.strong,{children:"Personnage"})," a une relation ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"})," avec la table ",(0,s.jsx)(e.strong,{children:"Franchise"}),". Un personnage \xe0 une seule franchise."]}),"\n",(0,s.jsxs)(e.p,{children:["\xc0 l'inverse, un ",(0,s.jsx)(e.strong,{children:"Franchise"})," a une relation ",(0,s.jsx)(e.strong,{children:"1 \xe0 plusieurs"})," avec la table **Personnage. Une franchise contient plusieurs personnages."]}),"\n",(0,s.jsxs)(e.p,{children:["La table ",(0,s.jsx)(e.strong,{children:"Personnage"})," a une relation ",(0,s.jsx)(e.strong,{children:"1 \xe0 plusieurs"})," avec la table ",(0,s.jsx)(e.strong,{children:"Distribution"}),". Un personnage peut faire partie de la distribution de plusieurs films."]}),"\n",(0,s.jsx)(e.p,{children:"Dans une base de donn\xe9es relationnelle, ces relations fonctionnent gr\xe2ce aux jointures des cl\xe9s \xe9trang\xe8res."}),"\n",(0,s.jsxs)(e.p,{children:["Dans un mod\xe8le objet, ces relations peuvent \xeatre repr\xe9sent\xe9es par des r\xe9f\xe9rences vers un objet dans le cas d'une relation ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"})," et par composition dans une relation ",(0,s.jsx)(e.strong,{children:"1 \xe0 plusieurs"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Une classe du mod\xe8le contient les propri\xe9t\xe9s qui correspondent aux champs de la table."}),"\n",(0,s.jsxs)(e.p,{children:["Cette classe a \xe9galement des propri\xe9t\xe9s de ",(0,s.jsx)(e.strong,{children:"navigation"}),". Ces propri\xe9t\xe9s permettent de repr\xe9senter les relations ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"})," et ",(0,s.jsx)(e.strong,{children:"1 \xe0 plusieurs"})," de la table."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici la classe ",(0,s.jsx)(e.strong,{children:"Personnage"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public partial class Personnage\r\n{\r\n    public int PersonnageId { get; set; }\r\n    public String Nom { get; set; } = null!;\r\n    public String? IdentiteReelle { get; set; }\r\n    public DateOnly DateNaissance { get; set; }\r\n    public bool EstVilain { get; set; }\r\n    public int FranchiseId { get; set; }\r\n    public Franchise Franchise { get; set; } = null!;\r\n    public ICollection<Distribution> DistributionListe { get; set; } = new List<Distribution>();\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["La ligne 10 repr\xe9sente la relation ",(0,s.jsx)(e.strong,{children:"1 \xe0 plusieurs"})," avec la table ",(0,s.jsx)(e.strong,{children:"Distribution"}),". Un personnage poss\xe8de une liste de distribution. Cette liste peut \xeatre vide dans le cas que le personnage n'appartienne \xe0 aucune distribution ou contenir plusieurs \xe9l\xe9ments si le personnage appartient \xe0 plusieurs distributions."]}),"\n",(0,s.jsxs)(e.p,{children:["La ligne 9 repr\xe9sente la relation ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"})," avec la table ",(0,s.jsx)(e.strong,{children:"Franchise"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Ces propri\xe9t\xe9s se nomment ",(0,s.jsx)(e.strong,{children:"navigation"}),", car il est possible de naviguer vers l'objet parent ou les objets enfants directement sans utiliser une jointure classique."]}),"\n",(0,s.jsx)(e.h2,{id:"log-des-op\xe9rations-sql",children:"Log des op\xe9rations SQL"}),"\n",(0,s.jsxs)(e.p,{children:["Afin de cr\xe9er un log des commandes SQL ex\xe9cut\xe9es lors d'un scrpt LINQ, ajouter ces lignes avant vos requ\xeates dans ",(0,s.jsx)(e.strong,{children:"Program.cs"})," du projet ",(0,s.jsx)(e.strong,{children:"LinqCRUD"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'var optBuilder = new DbContextOptionsBuilder<UniversContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\n'})}),"\n",(0,s.jsx)(e.h2,{id:"jointure-classique",children:"Jointure classique"}),"\n",(0,s.jsxs)(e.p,{children:["Les exemples ci-dessous sont tous des ",(0,s.jsx)(e.strong,{children:"INNER JOIN"}),". Le ",(0,s.jsx)(e.strong,{children:"LEFT OUTER JOIN"})," sera pr\xe9sent\xe9 plus tard en session."]}),"\n",(0,s.jsx)(e.h3,{id:"join",children:(0,s.jsx)(e.code,{children:"join"})}),"\n",(0,s.jsxs)(e.p,{children:["Cette approche est identique \xe0 ",(0,s.jsx)(e.strong,{children:"SQL"}),". Il faut effectuer la jointure en utilisant les cl\xe9s \xe9trang\xe8res. Pour les grosses requ\xeates, cette approche est parfois plus performante, car elle reproduit g\xe9n\xe9ralement la requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," optimale."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," \xe0 reproduire."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",metastring:"showLineNumbers",children:"SELECT\r\n\tPersonnage.PersonnageId,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom AS FranchiseNom\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le code ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var resultatPersonnage = (from lqPersonnage in db.PersonnageTb\r\n                          join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n                          select\r\n                            new\r\n                            {\r\n                                PersonnageId = lqPersonnage.PersonnageId,\r\n                                PersonnageNom = lqPersonnage.Nom,\r\n                                FranchiseId = lqFranchise.FranchiseId,\r\n                                FranchiseNom = lqFranchise.Nom\r\n                            }).ToList();    \r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["La ligne 4 repr\xe9sente la jointure ",(0,s.jsx)(e.strong,{children:"inner join"}),". L'enregistrement de la table ",(0,s.jsx)(e.strong,{children:"Franchise"})," est repr\xe9sent\xe9 par la variable ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"lqFranchise"})}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [u].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Dans la requ\xeate ci-dessus, l'objet de retour est dynamique. Le ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"select"})})," contient un ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"new {}"})}),". L'utilisation d'objet de retour dynamique est pratique si l'objet est utilis\xe9 uniquement dans le bloc de code. S'il faut cr\xe9er une extension pour g\xe9rer l'affichage de ceci, il faut cr\xe9er un objet pr\xe9cis."]}),"\n",(0,s.jsxs)(e.p,{children:["Dans le dossier ",(0,s.jsx)(e.strong,{children:"Data"}),", cr\xe9ez l'objet ",(0,s.jsx)(e.strong,{children:"InfoPersonnage"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"namespace IntroEF.Data;\r\n\r\npublic class InfoPersonnage\r\n{\r\n    public int PersonnageId { get; set; }\r\n    public string PersonnageNom { get; set; } = null!;\r\n    public int FranchiseId { get; set; }\r\n    public string FranchiseNom { get; set;} = null!;\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Dans la d\xe9finition des tables ",(0,s.jsx)(e.strong,{children:"Franchise"})," et ",(0,s.jsx)(e.strong,{children:"Personnage"}),", les champs ",(0,s.jsx)(e.strong,{children:"Nom"})," ne sont pas ",(0,s.jsx)(e.strong,{children:"nullable"}),". Pour \xe9viter des avertissements du compilateur, il faut indiquer que leur valeur par d\xe9faut est ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"null!"})}),". Cette d\xe9claration indique au compilateur et au programmeur que si la valeur est ",(0,s.jsx)(e.strong,{children:"null"}),", il ne faut pas la consid\xe9rer r\xe9ellement ",(0,s.jsx)(e.strong,{children:"null"}),". Elle devrait avoir une valeur, mais elle n'est pas disponible (Nous y reviendrons avec ",(0,s.jsx)(e.strong,{children:"eager-loading"}),")."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate avec l'utilisation de la classe ",(0,s.jsx)(e.strong,{children:"InfoPersonnage"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var resultatPersonnage = (from lqPersonnage in db.PersonnageTb\r\n                      join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n                      select\r\n                        new InfoPersonnage()\r\n                        {\r\n                            PersonnageId = lqPersonnage.PersonnageId,\r\n                            PersonnageNom = lqPersonnage.Nom,\r\n                            FranchiseId = lqFranchise.FranchiseId,\r\n                            FranchiseNom = lqFranchise.Nom\r\n                        }).ToList();   \n"})}),"\n",(0,s.jsxs)(e.p,{children:["Il est possible d'utiliser la variable ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"lqFranchise"})})," pour le tri et les conditions."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT\r\n\tPersonnage.PersonnageId,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom AS FranchiseNom\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nWHERE\r\n\tFranchise.Proprietaire != 'Disney' AND\r\n\tPersonnage.EstVilain = 1\r\nORDER BY\r\n\tFranchise.Nom,\r\n\tPersonnage.Nom DESC;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici son \xe9quivalent en ",(0,s.jsx)(e.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'var resultatPersonnage = (from lqPersonnage in db.PersonnageTb\r\n                      join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n                      where\r\n                        lqFranchise.Proprietaire != "Disney" &&\r\n                        lqPersonnage.EstVilain == true\r\n                      orderby\r\n                        lqFranchise.Nom,\r\n                        lqPersonnage.Nom descending\r\n                      select\r\n                        new InfoPersonnage()\r\n                        {\r\n                            PersonnageId = lqPersonnage.PersonnageId,\r\n                            PersonnageNom = lqPersonnage.Nom,\r\n                            FranchiseId = lqFranchise.FranchiseId,\r\n                            FranchiseNom = lqFranchise.Nom\r\n                        }).ToList(); \n'})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [u].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [u].[Proprietaire] <> 'Disney' AND [p].[EstVilain] = CAST(1 AS bit)\r\nORDER BY [u].[Nom], [p].[Nom] DESC\n"})}),"\n",(0,s.jsx)(e.p,{children:"Il est possible de faire plusieurs jointures."}),"\n",(0,s.jsxs)(e.p,{children:["Voici une requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," pour obtenir l'information d'une distribution pour le film #2."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici la version ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var infoDistribution = (from lqDistribution in db.DistributionTb\r\n                        join lqPersonnage in db.PersonnageTb on lqDistribution.PersonnageId equals lqPersonnage.PersonnageId\r\n                        join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n                        join lqFilm in db.FilmTb on lqDistribution.FilmId equals lqFilm.FilmId\r\n                        where\r\n                          lqDistribution.FilmId == 2\r\n                        select\r\n                          new \r\n                          {\r\n                              Titre = lqFilm.Titre,\r\n                              FranchiseNom = lqFranchise.Nom,\r\n                              PersonnageNom = lqPersonnage.Nom,\r\n                              Acteur = lqDistribution.Acteur\r\n                          }).ToList();\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [f].[Titre], [u].[Nom] AS [FranchiseNom], [p].[Nom] AS [PersonnageNom], [d].[Acteur]\r\nFROM [Distribution] AS [d]\r\nINNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nINNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\r\nWHERE [d].[FilmId] = 2\n"})}),"\n",(0,s.jsx)(e.h2,{id:"propri\xe9t\xe9-de-navigation",children:"Propri\xe9t\xe9 de navigation"}),"\n",(0,s.jsx)(e.p,{children:"Toutes les requ\xeates de la section 3.1 peuvent \xeatre simplifi\xe9es en utilisant les propri\xe9t\xe9s de navigation."}),"\n",(0,s.jsxs)(e.p,{children:["La propri\xe9t\xe9 de navigation repr\xe9sente la relation, donc ",(0,s.jsx)(e.strong,{children:"Entity Framework"})," va cr\xe9er la jointure automatiquement."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," \xe0 reproduire."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT\r\n\tPersonnage.PersonnageId,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom AS FranchiseNom\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le code ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'var optBuilder = new DbContextOptionsBuilder<UniversContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\r\n\r\nusing (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var infoPersonnage = (from lqPersonnage in db.PersonnageTb                          \r\n                          select\r\n                            new\r\n                            {\r\n                                PersonnageId = lqPersonnage.PersonnageId,\r\n                                PersonnageNom = lqPersonnage.Nom,\r\n                                FranchiseId = lqPersonnage.FranchiseId,\r\n                                FranchiseNom = lqPersonnage.Franchise.Nom //Jointure par navigation\r\n                            }).ToList();\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Le mot cl\xe9 ",(0,s.jsx)(e.strong,{children:"join"})," n'est plus utilis\xe9. Par contre \xe0 la ligne 15, l'obtention du nom de l'franchise se fait par la propri\xe9t\xe9 ",(0,s.jsx)(e.strong,{children:"Franchise"})," de la classe ",(0,s.jsx)(e.strong,{children:"Personnage"}),". Cette propri\xe9t\xe9 est une r\xe9f\xe9rence \xe0 l'enregistrement."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici le code ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [p].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\n"})}),"\n",(0,s.jsx)(e.p,{children:"Il s'agit exactement de la m\xeame requ\xeate g\xe9n\xe9r\xe9e \xe0 la section 3.1."}),"\n",(0,s.jsx)(e.p,{children:"Il est possible d'utiliser la navigation pour le tri et les conditions."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici son \xe9quivalent en ",(0,s.jsx)(e.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'var infoPersonnage = (from lqPersonnage in db.PersonnageTb                          \r\n                      where\r\n                        lqPersonnage.Franchise.Proprietaire != "Disney" &&\r\n                        lqPersonnage.EstVilain == true\r\n                      orderby\r\n                        lqPersonnage.Franchise.Nom,\r\n                        lqPersonnage.Nom descending\r\n                      select\r\n                        new InfoPersonnage()\r\n                        {\r\n                            PersonnageId = lqPersonnage.PersonnageId,\r\n                            PersonnageNom = lqPersonnage.Nom,\r\n                            FranchiseId = lqPersonnage.FranchiseId,\r\n                            FranchiseNom = lqPersonnage.Franchise.Nom\r\n                        }).ToList();\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [p].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [u].[Proprietaire] <> 'Disney' AND [p].[EstVilain] = CAST(1 AS bit)\r\nORDER BY [u].[Nom], [p].[Nom] DESC\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Encore une fois, le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"})," est identique \xe0 celui de la section 3.1."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici une requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," pour obtenir l'information d'une distribution pour le film #2."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici la version ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var infoDistribution = (from lqDistribution in db.DistributionTb\r\n                        where\r\n                          lqDistribution.FilmId == 2\r\n                        select\r\n                          new\r\n                          {\r\n                              Titre = lqDistribution.Film.Titre,\r\n                              FranchiseNom = lqDistribution.Personnage.Franchise.Nom,\r\n                              PersonnageNom = lqDistribution.Personnage.Nom,\r\n                              Acteur = lqDistribution.Acteur\r\n                          }).ToList();\n"})}),"\n",(0,s.jsx)(e.p,{children:"Remarquez la ligne 8, la navigation remonte de 2 niveaux dans la structure des jointures."}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [f].[Titre], [u].[Nom] AS [FranchiseNom], [p].[Nom] AS [PersonnageNom], [d].[Acteur]\r\nFROM [Distribution] AS [d]\r\nINNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\r\nINNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [d].[FilmId] = 2\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Il n'est pas tout \xe0 fait identique \xe0 la section 3, car les ",(0,s.jsx)(e.strong,{children:"jointures"})," ne sont pas dans le m\xeame ordre. En ",(0,s.jsx)(e.strong,{children:"SQL"}),", les ",(0,s.jsx)(e.strong,{children:"INNER JOIN"})," sont interchangeables dans l'ordre."]}),"\n",(0,s.jsxs)(e.p,{children:["Il est possible d'utiliser la technique du ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"join"})})," et de les interchanger \xe9galement comme dans l'exemple ci-dessous."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var infoDistribution = (from lqFilm in db.FilmTb\r\n                        join lqDistribution in db.DistributionTb on lqFilm.FilmId equals lqDistribution.FilmId\r\n                        join lqPersonnage in db.PersonnageTb on lqDistribution.PersonnageId equals lqPersonnage.PersonnageId\r\n                        join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n                        where\r\n                          lqDistribution.FilmId == 2\r\n                        select\r\n                          new\r\n                          {\r\n                              Titre = lqFilm.Titre,\r\n                              FranchiseNom = lqFranchise.Nom,\r\n                              PersonnageNom = lqPersonnage.Nom,\r\n                              Acteur = lqDistribution.Acteur\r\n                          }).ToList();\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Par contre, ce ne sera pas possible de faire cette requ\xeate en navigation. Elle est pourtant \xe9quivalente au niveau ",(0,s.jsx)(e.strong,{children:"SQL"})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"lqFilm.Distribution"})})," est une liste de distribution. Il n'est pas possible de faire une relation de ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var infoDistribution = (from lqFilm in db.FilmTb                           \r\n                        where\r\n                          lqFilm.FilmId == 2\r\n                        select\r\n                          new\r\n                          {\r\n                              Titre = lqFilm.Titre,\r\n                              FranchiseNom = lqFilm.Distribution.Personnage.Franchise.Nom //Erreur\r\n                              PersonnageNom = lqFilm.Distribution.Personnage.Nom, //Erreur\r\n                              Acteur = lqFilm.Distribution.Acteur //Erreur\r\n                          }).ToList();\n"})}),"\n",(0,s.jsx)(e.p,{children:"Il faudrait faire cette requ\xeate."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var infoDistribution = (from lqFilm in db.FilmTb                           \r\n                        where\r\n                          lqFilm.FilmId == 2\r\n                        select\r\n                          new\r\n                          {\r\n                              Titre = lqFilm.Titre,\r\n                              FranchiseNom = lqFilm.Distribution.Where(d => d.FilmId == lqFilm.FilmId)\r\n                                  .Select(d => d.Personnage.Franchise.Nom).FirstOrDefault(),\r\n                              PersonnageNom = lqFilm.Distribution.Where(d => d.FilmId == lqFilm.FilmId)\r\n                                  .Select(d => d.Personnage.Nom).FirstOrDefault(),\r\n                              Acteur = lqFilm.Distribution.Where(d => d.FilmId == lqFilm.FilmId)\r\n                                  .Select(d => d.Acteur).FirstOrDefault()\r\n                          }).ToList();\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),". Il effectue plusieurs sous-requ\xeates pour obtenir l'information."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [f].[Titre], (\r\n    SELECT TOP(1) [u].[Nom]\r\n    FROM [Distribution] AS [d]\r\n    INNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\n    INNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\n    WHERE [f].[FilmId] = [d].[FilmId] AND [d].[FilmId] = [f].[FilmId]) AS [FranchiseNom], (\r\n    SELECT TOP(1) [p0].[Nom]\r\n    FROM [Distribution] AS [d0]\r\n    INNER JOIN [Personnage] AS [p0] ON [d0].[PersonnageId] = [p0].[PersonnageId]\r\n    WHERE [f].[FilmId] = [d0].[FilmId] AND [d0].[FilmId] = [f].[FilmId]) AS [PersonnageNom], (\r\n    SELECT TOP(1) [d1].[Acteur]\r\n    FROM [Distribution] AS [d1]\r\n    WHERE [f].[FilmId] = [d1].[FilmId] AND [d1].[FilmId] = [f].[FilmId]) AS [Acteur]\r\nFROM [Film] AS [f]\r\nWHERE [f].[FilmId] = 2\n"})}),"\n",(0,s.jsx)(e.p,{children:"Cette requ\xeate est donc \xe0 proscrire, car elle aura un impact significatif sur la performance."}),"\n",(0,s.jsxs)(e.p,{children:["Donc, il est important de d\xe9buter \xe0 partir de la bonne table pour effectuer des jointures par navigation. Il n'est pas possible de convertir une requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," directement."]}),"\n",(0,s.jsxs)(e.h2,{id:"m\xe9lange-de-join-et-navigation",children:["M\xe9lange de ",(0,s.jsx)(e.code,{children:"join"})," et navigation"]}),"\n",(0,s.jsx)(e.p,{children:"Il est possible de m\xe9langer les 2 approches, mais je ne la recommande pas s'il est possible d'en utiliser une seule."}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," qui d\xe9bute par la table ",(0,s.jsx)(e.strong,{children:"Personnage"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN [Distribution] ON Personnage.PersonnageId = [Distribution].PersonnageId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"var infoDistribution = \r\n    (from lqPersonnage in db.PersonnageTb                           \r\n     join lqDistribution in db.DistributionTb on lqPersonnage.PersonnageId equals lqDistribution.PersonnageId\r\n     where\r\n       lqDistribution.FilmId == 2 //Jointure classique\r\n     select\r\n       new\r\n       {\r\n           Titre = lqDistribution.Film.Titre, //Jointure classique et navigation\r\n           FranchiseNom = lqPersonnage.Franchise.Nom, //Navigation\r\n           PersonnageNom = lqPersonnage.Nom,\r\n           Acteur = lqDistribution.Acteur\r\n       }).ToList();\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [f].[Titre], [u].[Nom] AS [FranchiseNom], [p].[Nom] AS [PersonnageNom], [d].[Acteur]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Distribution] AS [d] ON [p].[PersonnageId] = [d].[PersonnageId]\r\nINNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [d].[FilmId] = 2\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"})," est \xe9quivalent \xe0 celui de la section 3.1."]}),"\n",(0,s.jsx)(e.h1,{id:"eager-loading",children:"Eager loading"}),"\n",(0,s.jsx)(e.p,{children:"Par d\xe9faut, les propri\xe9t\xe9s de navigation sont disponibles uniquement lorsque le contexte est utilis\xe9 directement, comme dans l'utilisation des jointures par navigation."}),"\n",(0,s.jsx)(e.p,{children:"Voici un exemple qui fonctionne pour obtenir la liste des personnages et d'afficher le nom de l'franchise et la liste des acteurs qui ont interpr\xe9t\xe9 ce personnage."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var lstPersonnage =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         select\r\n             new\r\n             {\r\n                 PersonnageNom = lqPersonnage.Nom,\r\n                 FranchiseNom = lqPersonnage.Franchise.Nom,\r\n                 ListeActeur = lqPersonnage.Distribution.Select(d => d.Acteur).ToList(),\r\n             }).ToList();\r\n\r\n    foreach (var personnage in lstPersonnage)\r\n    {\r\n        Console.WriteLine($"Nom personnage : {personnage.PersonnageNom}");\r\n        Console.WriteLine($"Nom Franchise : {personnage.FranchiseNom}");\r\n\r\n        foreach (string acteur in personnage.ListeActeur)\r\n        {\r\n            Console.WriteLine($"Acteur : {acteur}");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Par contre, cette approche ne fonctionnera pas."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Personnage> lstPersonnage =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         select\r\n           lqPersonnage).ToList();\r\n\r\n    foreach (Personnage personnage in lstPersonnage)\r\n    {\r\n        Console.WriteLine($"Nom personnage : {personnage.Nom}");\r\n        Console.WriteLine($"Nom Franchise : {personnage.Franchise.Nom}");\r\n\r\n        foreach (Distribution distribution in personnage.Distribution)\r\n        {\r\n            Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Pourtant, elle pourrait \xeatre plus int\xe9ressante, car il serait possible d'utiliser les propri\xe9t\xe9s des tables en relation avec cet objet sans cr\xe9er un objet dynamique ou une nouvelle classe."}),"\n",(0,s.jsxs)(e.p,{children:["La ligne 11 g\xe9n\xe8re cette erreur : ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Object reference not set to an instance of an object"})}),". Et la liste ",(0,s.jsx)(e.strong,{children:"Personnage.Distribution"})," est vide."]}),"\n",(0,s.jsxs)(e.p,{children:["Pour bien comprendre, il faut analyser le code de la classe ",(0,s.jsx)(e.strong,{children:"Personnage"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"public partial class Personnage\r\n{\r\n    public int PersonnageId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string? IdentiteReelle { get; set; }\r\n\r\n    public DateTime? DateNaissance { get; set; }\r\n\r\n    public bool EstVilain { get; set; }\r\n\r\n    public int FranchiseId { get; set; }\r\n\r\n    public virtual ICollection<Distribution> Distribution { get; } = new List<Distribution>();\r\n\r\n    public virtual Franchise Franchise { get; set; } = null!;\r\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["La ligne 17 est la propri\xe9t\xe9 de navigation pour la table ",(0,s.jsx)(e.strong,{children:"Franchise"}),". Elle a comme valeur par d\xe9faut ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"null!"})}),". Ce qui indique qu'il est possible que la valeur soit ",(0,s.jsx)(e.strong,{children:"null"}),", mais il devrait avoir une valeur."]}),"\n",(0,s.jsxs)(e.p,{children:["Par souci d'\xe9conomie de m\xe9moire, les propri\xe9t\xe9s de navigations n'ont aucune valeur si ce n'est pas sp\xe9cifi\xe9 dans la requ\xeate. Il existe la technique ",(0,s.jsx)(e.strong,{children:"Lazy Loading"})," qui permet de les utiliser sur demande, tant que le contexte est actif, mais cette technique n'est pas recommand\xe9e, car elle g\xe9n\xe8re beaucoup de sous-requ\xeates. Elle ne sera pas pr\xe9sent\xe9e."]}),"\n",(0,s.jsxs)(e.p,{children:["Le ",(0,s.jsx)(e.strong,{children:"Eager Loading"})," permet d'indiquer \xe0 ",(0,s.jsx)(e.strong,{children:"Entity Framework"})," de mettre les valeurs dans les propri\xe9t\xe9s de navigation pour qu'elles soient disponibles en dehors de la requ\xeate et de la dur\xe9e de vie du contexte."]}),"\n",(0,s.jsxs)(e.p,{children:["Il faut utiliser la m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})})," dans la requ\xeate. Il est important d'utiliser d'utiliser un ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})})," pour chacune des propri\xe9t\xe9s."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'List<Personnage> lstPersonnage;\r\n\r\nusing (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    lstPersonnage =\r\n        (from lqPersonnage in db.PersonnageTb\r\n            .Include(p => p.Franchise) //Indique que la propri\xe9t\xe9 Franchise aura une valeur\r\n            .Include(p => p.Distribution) //Indique que la propri\xe9t\xe9 Distribution ne sera pas vide\r\n         select\r\n               lqPersonnage).ToList();\r\n}\r\n//Fin du contexte\r\n\r\nforeach (Personnage personnage in lstPersonnage)\r\n{\r\n    Console.WriteLine($"Nom personnage : {personnage.Nom}");\r\n    Console.WriteLine($"Nom Franchise : {personnage.Franchise.Nom}");\r\n\r\n    foreach (Distribution distribution in personnage.Distribution)\r\n    {\r\n        Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["La ",(0,s.jsx)(e.strong,{children:"Console"})," est \xe0 l'ext\xe9rieur du ",(0,s.jsx)(e.strong,{children:"contexte"}),", donc les propri\xe9t\xe9s de navigation sont toujours disponibles."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici les 2 ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"})," avec l'approche de l'objet dynamique et l'approche du ",(0,s.jsx)(e.strong,{children:"Eager Loading"}),"."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Objet dynamique"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [p].[Nom], [u].[Nom], [p].[PersonnageId], [u].[FranchiseId], [d].[Acteur], [d].[PersonnageId], [d].[FilmId]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nLEFT JOIN [Distribution] AS [d] ON [p].[PersonnageId] = [d].[PersonnageId]\r\nORDER BY [p].[PersonnageId], [u].[FranchiseId], [d].[PersonnageId]\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Eager Loading"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[DateNaissance], [p].[EstVilain], [p].[IdentiteReelle], [p].[Nom], [p].[FranchiseId], [u].[FranchiseId], [u].[AnneeCreation], [u].[Nom], [u].[Proprietaire], [u].[SiteWeb], [d].[PersonnageId], [d].[FilmId], [d].[Acteur]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nLEFT JOIN [Distribution] AS [d] ON [p].[PersonnageId] = [d].[PersonnageId]\r\nORDER BY [p].[PersonnageId], [u].[FranchiseId], [d].[PersonnageId]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Elles sont \xe9quivalentes pour ce cas.  Par contre, les champs non n\xe9cessaires des tables ",(0,s.jsx)(e.strong,{children:"Franchise"})," et ",(0,s.jsx)(e.strong,{children:"Distribution"})," sont tous de m\xeame inclus dans la requ\xeate du ",(0,s.jsx)(e.strong,{children:"Eager Loading"}),", car il faut peupler l'objet au complet . Selon la nature de la requ\xeate, il peut \xeatre plus optimal d'utiliser un objet dynamique ou une classe sp\xe9cifique."]}),"\n",(0,s.jsx)(e.h2,{id:"plusieurs-niveaux-de-navigation----plusieurs-\xe0-1---plusieurs-\xe0-1",children:"Plusieurs niveaux de navigation  - plusieurs \xe0 1 -> plusieurs \xe0 1"}),"\n",(0,s.jsxs)(e.p,{children:["Par exemple, s'il faut pr\xe9senter la requ\xeate ci-dessous, il faudra plusieurs niveaux pour la m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["La m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})})," peut inclure une s\xe9quence de plusieurs relations ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Remarquez l'indentation du ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})}),". C'est pour indiquer que c'est \xe0 partir de la table ",(0,s.jsx)(e.strong,{children:"Distribution"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Distribution> lstDistribution = \r\n        (from lqDistribution in db.DistributionTb\r\n            .Include(d => d.Personnage.Franchise)//Inclusion de Personnage et Franchise en m\xeame temps                \r\n            .Include(d => d.Film)\r\n        select\r\n            lqDistribution).ToList();\r\n\r\n    foreach (Distribution distribution in lstDistribution)\r\n    {\r\n        Console.WriteLine($"Titre Film : {distribution.Film.Titre}");\r\n        Console.WriteLine($"Nom Franchise : {distribution.Personnage.Franchise.Nom}");\r\n        Console.WriteLine($"Nom Personnage : {distribution.Personnage.Nom}");\r\n        Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [d].[PersonnageId], [d].[FilmId], [d].[Acteur], [p].[PersonnageId], [p].[DateNaissance], [p].[EstVilain], [p].[IdentiteReelle], [p].[Nom], [p].[FranchiseId], [u].[FranchiseId], [u].[AnneeCreation], [u].[Nom], [u].[Proprietaire], [u].[SiteWeb], [f].[FilmId], [f].[Budget], [f].[DateSortie], [f].[Duree], [f].[Etoile], [f].[Titre]\r\n      FROM [Distribution] AS [d]\r\n      INNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\n      INNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\n      INNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Si par exemple, la table ",(0,s.jsx)(e.strong,{children:"Personnage"})," avait une cl\xe9 \xe9trang\xe8re ",(0,s.jsx)(e.strong,{children:"TypePersonnegeId"})," vers une table ",(0,s.jsx)(e.strong,{children:"TypePersonnage"}),", il faudrait faire ceci."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Distribution> lstDistribution = \r\n        (from lqDistribution in db.DistributionTb\r\n            .Include(d => d.Personnage.Franchise)//Inclusion de Personnage et Franchise en m\xeame temps                \r\n            .Include(d => d.Personnage.TypePersonnage)//Inclusion de TypePersonnage.                \r\n            .Include(d => d.Film)\r\n        select\r\n            lqDistribution).ToList();\r\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"navagion-\xe0-plusieurs-niveaux---1-\xe0-plusieurs---plusieurs-\xe0-1",children:"Navagion \xe0 plusieurs niveaux - 1 \xe0 plusieurs -> plusieurs \xe0 1"}),"\n",(0,s.jsxs)(e.p,{children:["Pour cette requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"}),", il ne serait pas possible de faire seulement des ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})}),".  La m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})})," a la m\xe9thode chain\xe9e ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"ThenInclude()"})})," qui permet d'inclure une sous-relation ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM Film\r\nINNER JOIN [Distribution] ON Film.FilmId = [Distribution].FilmId\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"LINQ"})," \xe0 utiliser."]}),"\n",(0,s.jsxs)(e.p,{children:["Remarquez l'indentation du ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Include()"})})," et du ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"ThenInclude()"})}),". Il est pr\xe9f\xe9rable de repr\xe9senter le niveau de navigation."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<Film> lstFilm = \r\n        (from lqFilm in db.FilmTb\r\n            .Include(f => f.Distribution)\r\n                .ThenInclude(d => d.Personnage.Franchise)\r\n         select\r\n            lqFilm).ToList();\r\n\r\n\r\n\r\n    foreach (Film film in lstFilm)\r\n    {\r\n        Console.WriteLine($"Titre Film : {film.Titre}");\r\n\r\n        foreach (Distribution distribution in film.Distribution)\r\n        {\r\n\r\n            Console.WriteLine($"Nom Franchise : {distribution.Personnage.Franchise.Nom}");\r\n            Console.WriteLine($"Nom Personnage : {distribution.Personnage.Nom}");\r\n            Console.WriteLine($"Acteur : {distribution.Acteur}");\r\n        }        \r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(e.strong,{children:"Film.Distribution"})," est une liste. Il n'est donc pas possible de faire ",(0,s.jsx)(e.strong,{children:"Film.Distribution.Personnage"}),". Il faut inclure pour chacune des distributions les personnages. Il faut donc obligatoirement utiliser la m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"ThenInclude()"})}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Par contre, ",(0,s.jsx)(e.strong,{children:"Personnage.Franchise"})," est une relation ",(0,s.jsx)(e.strong,{children:"plusieurs \xe0 1"}),". Il est possible de les inclure en m\xeame temps."]}),"\n",(0,s.jsx)(e.h2,{id:"classe-dextension",children:"Classe d'extension"}),"\n",(0,s.jsx)(e.p,{children:"Il serait int\xe9ressant de reproduire le code de la console avec une classe d'extension."}),"\n",(0,s.jsx)(e.p,{children:"Il faut d\xe9terminer le cas si les classes de navigation sont disponibles ou non."}),"\n",(0,s.jsxs)(e.p,{children:["Voici la classe ",(0,s.jsx)(e.strong,{children:"PersonnageConsoleExtensions"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'public static class PersonnageConsoleExtensions\r\n{\r\n    public static void AfficherConsole(this Personnage? personnage)\r\n    {\r\n        if (personnage != null)\r\n        {\r\n            Console.WriteLine($"Id : {personnage.PersonnageId}");\r\n            Console.WriteLine($"Nom : {personnage.Nom}");\r\n\r\n            //Le ?? permet d\'indiquer la valeur de remplacement si IdentiteReelle est null\r\n            Console.WriteLine($"Identit\xe9 r\xe9elle : {personnage.IdentiteReelle ?? "Inconnue"}");\r\n\r\n            //Affiche la date de naissance en d MMM yyyy -> 3 dec 1998\r\n            Console.Write("Date de naissance : ");\r\n\r\n            if (personnage.DateNaissance != null)\r\n            {\r\n                Console.WriteLine($"{personnage.DateNaissance:d MMM yyyy}");\r\n            }\r\n            else\r\n            {\r\n                Console.WriteLine("Inconnue");\r\n            }\r\n\r\n            Console.WriteLine($"Est vilain : {(personnage.EstVilain ? "Oui" : "Non")}");\r\n\r\n            Console.WriteLine($"Franchise Id : {personnage.FranchiseId}");\r\n\r\n            if (personnage.Franchise != null)\r\n            {\r\n                Console.WriteLine($"Nom franchise : {personnage.Franchise.Nom}");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine("Personnage inexistant.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Ex\xe9cutez la requ\xeate ci-dessous."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    Personnage? pSansInclude =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         where\r\n            lqPersonnage.PersonnageId == 1\r\n         select\r\n            lqPersonnage).FirstOrDefault();\r\n\r\n    pSansInclude.AfficherConsole();\r\n\r\n    Personnage? pAvecInclude =\r\n        (from lqPersonnage in db.PersonnageTb\r\n            .Include(p => p.Franchise)\r\n         where\r\n            lqPersonnage.PersonnageId == 1\r\n         select\r\n            lqPersonnage).FirstOrDefault();\r\n\r\n    pAvecInclude.AfficherConsole();\r\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Voici le r\xe9sultat dans la console."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"Id : 1\r\nNom : Spiderman\r\nIdentit\xe9 r\xe9elle : Peter Parker\r\nDate de naissance : 22 oct. 2003\r\nEst vilain : Non\r\nFranchise Id : 1\r\n\r\nId : 1\r\nNom : Spiderman\r\nIdentit\xe9 r\xe9elle : Peter Parker\r\nDate de naissance : 22 oct. 2003\r\nEst vilain : Non\r\nFranchise Id : 1\r\nNom franchise : Marvel\n"})}),"\n",(0,s.jsx)(e.p,{children:"La m\xe9thode d'extension supporte le cas si la navigation est disponible."}),"\n",(0,s.jsx)(e.h1,{id:"agr\xe9gation",children:"Agr\xe9gation"}),"\n",(0,s.jsxs)(e.p,{children:["L'agr\xe9gation en ",(0,s.jsx)(e.strong,{children:"LINQ"})," permet de faire des calculs sur une collection en fonction du mod\xe8le objet."]}),"\n",(0,s.jsx)(e.p,{children:"Ajoutez ce film dans la base de donn\xe9es pour avoir un film sans aucune distribution."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:"INSERT INTO Franchise(Nom, AnneeCreation, Proprietaire, SiteWeb)\r\nVALUES ('Teenage mutant ninja turtles', 1984, 'Paramount', 'https://www.teenagemutantninjaturtles.com');\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"compte---count",children:["Compte - ",(0,s.jsx)(e.code,{children:"Count()"})]}),"\n",(0,s.jsxs)(e.p,{children:["Cette requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"})," permet de d\xe9terminer le nombre de ",(0,s.jsx)(e.strong,{children:"Personnages"})," par ",(0,s.jsx)(e.strong,{children:"Franchise"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom,\r\n\tCount(Personnage.PersonnageId) AS NbPersonnage\r\nFROM Franchise\r\nLEFT OUTER JOIN Personnage ON Franchise.FranchiseId = Personnage.FranchiseId\r\nGROUP BY Franchise.FranchiseId, Franchise.Nom;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["L'\xe9quivalent en ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var resultats =\r\n        (from lqFranchise in db.FranchiseTb\r\n         select\r\n            new\r\n            {\r\n                FranchiseId = lqFranchise.FranchiseId,\r\n                FranchiseNom = lqFranchise.Nom,\r\n                NbPersonnage = lqFranchise.Personnage.Count()\r\n            }).ToList();\r\n\r\n\r\n    Console.WriteLine("Id".PadRight(3) +\r\n                      "Nom".PadRight(70) +\r\n                      "Nb Pers.".PadRight(3));\r\n\r\n    Console.WriteLine("--".PadRight(3) +\r\n                      "---".PadRight(70) +\r\n                      "--------".PadRight(3));\r\n\r\n    foreach (var item in resultats)\r\n    {\r\n        Console.WriteLine(item.FranchiseId.ToString().PadRight(3) +\r\n                          item.FranchiseNom.PadRight(70) +\r\n                          item.NbPersonnage.ToString().PadRight(3));\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Voici le r\xe9sultat dans la console."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Id Nom                                                                   Nb Pers.\r\n-- ---                                                                   --------\r\n1  Marvel                                                                4\r\n2  DC                                                                    2\r\n3  Teenage mutant ninja turtles                                          0\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Il n'est pas n\xe9cessaire d'avoir une clause ",(0,s.jsx)(e.strong,{children:"GROUP BY"})," dans ",(0,s.jsx)(e.strong,{children:"LINQ"}),", car l'objet ",(0,s.jsx)(e.strong,{children:"Franchise"})," a d\xe9j\xe0 une collection de ",(0,s.jsx)(e.strong,{children:"Personnage"}),". Il est possible d'obtenir le nombre de personnages contenu dans cette collection."]}),"\n",(0,s.jsx)(e.p,{children:"Il est possible d'exclure les franchise sans aucun personnage."}),"\n",(0,s.jsxs)(e.p,{children:["La requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT \r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom,\r\n\tCount(Personnage.PersonnageId) AS NbPersonnage\r\nFROM Franchise\r\nLEFT OUTER JOIN Personnage ON Franchise.FranchiseId = Personnage.FranchiseId\r\nGROUP BY Franchise.FranchiseId, Franchise.Nom\r\nHAVING Count(Personnage.PersonnageId) > 0;\n"})}),"\n",(0,s.jsxs)(e.p,{children:["La requ\xeate ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var resultats =\r\n        (from lqFranchise in db.FranchiseTb\r\n         where\r\n            lqFranchise.Personnage.Count > 0\r\n         select\r\n            new\r\n            {\r\n                FranchiseId = lqFranchise.FranchiseId,\r\n                FranchiseNom = lqFranchise.Nom,\r\n                NbPersonnage = lqFranchise.Personnage.Count()\r\n            }).ToList();\r\n\r\n\r\n    Console.WriteLine("Id".PadRight(3) +\r\n                      "Nom".PadRight(50) +\r\n                      "Nb Pers.".PadRight(10));\r\n\r\n    Console.WriteLine("--".PadRight(3) +\r\n                      "---".PadRight(50) +\r\n                      "--------".PadRight(10));\r\n\r\n    foreach (var item in resultats)\r\n    {\r\n        Console.WriteLine(item.FranchiseId.ToString().PadRight(3) +\r\n                          item.FranchiseNom.PadRight(50) +\r\n                          item.NbPersonnage.ToString().PadRight(10));\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Est-ce aussi optimal que le ",(0,s.jsx)(e.strong,{children:"SQL"})," d'utiliser la propri\xe9t\xe9 de navigation ?"]}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [u].[FranchiseId], [u].[Nom] AS [FranchiseNom], (\r\n    SELECT COUNT(*)\r\n    FROM [Personnage] AS [p0]\r\n    WHERE [u].[FranchiseId] = [p0].[FranchiseId]) AS [NbPersonnage]\r\nFROM [Franchise] AS [u]\r\nWHERE (\r\n    SELECT COUNT(*)\r\n    FROM [Personnage] AS [p]\r\n    WHERE [u].[FranchiseId] = [p].[FranchiseId]) > 0\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Il y a 2 sous-requ\xeates. Un ",(0,s.jsx)(e.strong,{children:"GROUP BY"})," sera plus performant qu'une sous-requ\xeate corr\xe9l\xe9e. S'il y a 5 franchise, il y aura 6 ex\xe9cutions de sous-requ\xeates."]}),"\n",(0,s.jsxs)(e.p,{children:["L'utilisation d'un ",(0,s.jsx)(e.strong,{children:"GROUP BY"})," avec ",(0,s.jsx)(e.strong,{children:"LINQ"})," sera pr\xe9sent\xe9e plus tard dans la session avec le ",(0,s.jsx)(e.strong,{children:"LEFT OUTER JOIN"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Il est possible d'ajouter une condition dans la m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Count()"})})," pour faire l'\xe9quivalent d'un ",(0,s.jsx)(e.strong,{children:"CountIf"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Dans l'exemple ci-dessous, il est possible de d\xe9nombrer le nombre de gentils et de vilains."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var resultats =\r\n        (from lqFranchise in db.FranchiseTb         \r\n         select\r\n            new\r\n            {\r\n                FranchiseId = lqFranchise.FranchiseId,\r\n                FranchiseNom = lqFranchise.Nom,\r\n                NbVilain = lqFranchise.Personnage.Count(p => p.EstVilain == true),\r\n                NbGentil = lqFranchise.Personnage.Count(p => p.EstVilain == false)\r\n            }).ToList();\r\n\r\n\r\n    Console.WriteLine("Id".PadRight(3) +\r\n                      "Nom".PadRight(50) +\r\n                      "Nb Vilain".PadRight(11) +\r\n                      "Nb Gentil".PadRight(11));\r\n\r\n    Console.WriteLine("--".PadRight(3) +\r\n                      "---".PadRight(50) +\r\n                      "---------".PadRight(11) +\r\n                      "---------".PadRight(11));\r\n\r\n    foreach (var item in resultats)\r\n    {\r\n        Console.WriteLine(item.FranchiseId.ToString().PadRight(3) +\r\n                          item.FranchiseNom.PadRight(50) +\r\n                          item.NbVilain.ToString().PadRight(11) +\r\n                          item.NbGentil.ToString().PadRight(11));\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"somme---sum",children:["Somme - ",(0,s.jsx)(e.code,{children:"Sum()"})]}),"\n",(0,s.jsx)(e.p,{children:"Il faut obtenir le nombre total de minutes des films pour chacun des personnages. Il faut trier cette liste du plus grand nombre de minutes au plus petit."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT\r\n\tFranchise.Nom AS NomFranchise,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tSUM(Film.Duree) AS DureeTotale\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN [Distribution] ON Personnage.PersonnageId = [Distribution].PersonnageId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nGROUP BY Franchise.FranchiseId, Franchise.Nom, Personnage.PersonnageId, Personnage.Nom\r\nORDER BY SUM(Film.Duree) DESC\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var resultats = \r\n        (from lqPersonnage in db.PersonnageTb\r\n         orderby lqPersonnage.Distribution.Sum(d => d.Film.Duree) descending\r\n         select\r\n            new\r\n            {                \r\n                FranchiseNom = lqPersonnage.Franchise.Nom,                \r\n                PersonnageNom = lqPersonnage.Nom,\r\n                DureeTotale = lqPersonnage.Distribution.Sum(d => d.Film.Duree)\r\n            }).ToList();\r\n\r\n\r\n    Console.WriteLine("Franchise".PadRight(20) +                      \r\n                      "Personnage".PadRight(50) +\r\n                      "Dur\xe9e totale".PadRight(15));\r\n\r\n    Console.WriteLine("-------".PadRight(20) +\r\n                      "----------".PadRight(50) +\r\n                      "------------".PadRight(15));\r\n\r\n    foreach (var item in resultats)\r\n    {\r\n        Console.WriteLine(item.FranchiseNom.PadRight(20) +\r\n                          item.PersonnageNom.PadRight(50) +\r\n                          item.DureeTotale.ToString().PadRight(15));\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["Dans la m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Sum()"})}),", il faut sp\xe9cifier le champ qui sera pris en compte pour la somme."]}),"\n",(0,s.jsxs)(e.p,{children:["Voici le ",(0,s.jsx)(e.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT [u].[Nom] AS [FranchiseNom], [p].[Nom] AS [PersonnageNom], (\r\n    SELECT COALESCE(SUM(CAST([f0].[Duree] AS int)), 0)\r\n    FROM [Distribution] AS [d0]\r\n    INNER JOIN [Film] AS [f0] ON [d0].[FilmId] = [f0].[FilmId]\r\n    WHERE [p].[PersonnageId] = [d0].[PersonnageId]) AS [DureeTotale]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nORDER BY (\r\n    SELECT COALESCE(SUM(CAST([f].[Duree] AS int)), 0)\r\n    FROM [Distribution] AS [d]\r\n    INNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\r\n    WHERE [p].[PersonnageId] = [d].[PersonnageId]) DESC\n"})}),"\n",(0,s.jsx)(e.p,{children:"Il s'agit encore de sous-requ\xeates. Ce n'est pas le plus performant comme requ\xeate."}),"\n",(0,s.jsxs)(e.h2,{id:"moyenne---average",children:["Moyenne - ",(0,s.jsx)(e.code,{children:"Average()"})]}),"\n",(0,s.jsxs)(e.p,{children:["La m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Average()"})})," fonctionne comme la m\xe9thode ",(0,s.jsx)(e.strong,{children:(0,s.jsx)(e.code,{children:"Sum()"})}),". Il faut sp\xe9cifier \xe0 l'int\xe9rieur le champ sur lequel la moyenne sera calcul\xe9e."]}),"\n",(0,s.jsx)(e.p,{children:"Il faut connaitre le budget moyen des films pour chacun des personnages. La liste doit \xeatre tri\xe9e de la plus petite moyenne \xe0 la plus grande."}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"SQL"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"SELECT\r\n\tFranchise.Nom AS NomFranchise,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tAVG(Film.Budget) AS BudgetMoyen\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN [Distribution] ON Personnage.PersonnageId = [Distribution].PersonnageId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nGROUP BY Franchise.FranchiseId, Franchise.Nom, Personnage.PersonnageId, Personnage.Nom\r\nORDER BY AVG(Film.Budget)\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Voici la requ\xeate ",(0,s.jsx)(e.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    var resultats =\r\n        (from lqPersonnage in db.PersonnageTb\r\n         orderby lqPersonnage.Distribution.Average(d => d.Film.Budget)\r\n         select\r\n            new\r\n            {\r\n                FranchiseNom = lqPersonnage.Franchise.Nom,\r\n                PersonnageNom = lqPersonnage.Nom,\r\n                BudgetMoyen = lqPersonnage.Distribution.Average(d => d.Film.Budget)\r\n            }).ToList();\r\n\r\n\r\n    Console.WriteLine("Franchise".PadRight(20) +\r\n                      "Personnage".PadRight(50) +\r\n                      "Budget moyen".PadRight(15));\r\n\r\n    Console.WriteLine("-------".PadRight(20) +\r\n                      "----------".PadRight(50) +\r\n                      "------------".PadRight(15));\r\n\r\n    foreach (var item in resultats)\r\n    {\r\n        Console.WriteLine(item.FranchiseNom.PadRight(20) +\r\n                          item.PersonnageNom.PadRight(50) +\r\n                          item.BudgetMoyen.ToString().PadRight(15));\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.h1,{id:"vue",children:"Vue"}),"\n",(0,s.jsxs)(e.p,{children:["L'utilisation d'une vue se fait comme une table avec ",(0,s.jsx)(e.strong,{children:"Entity Framework"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Cr\xe9ez cette vue dans la base de donn\xe9es."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-sql",children:"CREATE VIEW vNombrePersonnageFranchise\r\nAS\r\n    SELECT \r\n        Franchise.FranchiseId,\r\n        Franchise.Nom,\r\n        Count(Personnage.PersonnageId) AS NbPersonnage\r\n    FROM Franchise\r\n    LEFT OUTER JOIN Personnage ON Franchise.FranchiseId = Personnage.FranchiseId\r\n    GROUP BY Franchise.FranchiseId, Franchise.Nom\r\nGO\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Mettez \xe0 jour le ",(0,s.jsx)(e.strong,{children:"contexte"}),". Il y aura maintenant une classe ",(0,s.jsx)(e.strong,{children:"VNombrePersonnageFranchise"})," dans le dossier ",(0,s.jsx)(e.strong,{children:"Data"}),"."]}),"\n",(0,s.jsx)(e.p,{children:"Pour avoir tous les franchise."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<VNombrePersonnageFranchise> lst = db.VNombrePersonnageFranchise.ToList();\r\n\r\n    foreach(var item in lst)\r\n    {\r\n        Console.WriteLine($"Franchise : {item.Nom} Nb Personnages : {item.NbPersonnage}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Pour avoir seulement ceux qui ont des personnages."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<VNombrePersonnageFranchise> lst = \r\n        db.VNombrePersonnageFranchise.Where(v => v.NbPersonnage > 0).ToList();\r\n\r\n    foreach(var item in lst)\r\n    {\r\n        Console.WriteLine($"Franchise : {item.Nom} Nb Personnages : {item.NbPersonnage}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Il est possible d'ajouter un tri."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using (UniversContext db = new UniversContext(optBuilder.Options))\r\n{\r\n    List<VNombrePersonnageFranchise> lst = \r\n        (from lqVue in db.VNombrePersonnageFranchise\r\n         orderby\r\n            lqVue.Nom\r\n         select\r\n            lqVue).ToList();\r\n\r\n    foreach(var item in lst)\r\n    {\r\n        Console.WriteLine($"Franchise : {item.Nom} Nb Personnages : {item.NbPersonnage}");\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"Supprimez la vue pour ne pas l'avoir dans votre projet."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"DROP VIEW vNombrePersonnageFranchise;\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},1151:(n,e,r)=>{r.d(e,{Z:()=>t,a:()=>a});var s=r(7294);const i={},o=s.createContext(i);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);