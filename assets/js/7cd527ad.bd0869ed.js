"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[9421],{6298:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var s=r(5893),i=r(1151);const a={sidebar_position:10},o="EF Navigation et Jointure",t={id:"Entity Framework 2/EF_navigation",title:"EF Navigation et Jointure",description:"Dans EF relations entre les \xe9l\xe9ments utilisent l'agr\xe9gation d'objet et de liste selon le sens de la relation.",source:"@site/docs/50-Entity Framework 2/EF_navigation.md",sourceDirName:"50-Entity Framework 2",slug:"/Entity Framework 2/EF_navigation",permalink:"/4N1_2024/docs/Entity Framework 2/EF_navigation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"NotesSidebar",previous:{title:"Extension de classe",permalink:"/4N1_2024/docs/Entity Framework/methode_extension"},next:{title:"Eager loading",permalink:"/4N1_2024/docs/Entity Framework 2/EF_eager_loading"}},l={},c=[{value:"Classe du mod\xe8le - Propri\xe9t\xe9 de navigation",id:"classe-du-mod\xe8le---propri\xe9t\xe9-de-navigation",level:2},{value:"Log des op\xe9rations SQL",id:"log-des-op\xe9rations-sql",level:2},{value:"Jointure classique",id:"jointure-classique",level:2},{value:"join",id:"join",level:3},{value:"Tri",id:"tri",level:3},{value:"Multijointures",id:"multijointures",level:3},{value:"Propri\xe9t\xe9 de navigation",id:"propri\xe9t\xe9-de-navigation",level:2},{value:"plusieurs \xe0 1",id:"plusieurs-\xe0-1",level:3},{value:"M\xe9lange de join et navigation",id:"m\xe9lange-de-join-et-navigation",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"ef-navigation-et-jointure",children:"EF Navigation et Jointure"}),"\n",(0,s.jsx)(n.p,{children:"Dans EF relations entre les \xe9l\xe9ments utilisent l'agr\xe9gation d'objet et de liste selon le sens de la relation."}),"\n",(0,s.jsxs)(n.p,{children:["Pour cette section, nous allons r\xe9utiliser la bd ",(0,s.jsx)(n.strong,{children:"GestionPersonnage"})]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/07_dea_GestionFilm.jpg"}),"\n",(0,s.jsxs)(n.p,{children:["Notez que nous avons renomm\xe9 la table ",(0,s.jsx)(n.strong,{children:"Univers"})," pour ",(0,s.jsx)(n.strong,{children:"Franchise"})," afin de r\xe9gler un probl\xe8me de conflit de nom."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Veuillez changer le projet de d\xe9marrage pour ",(0,s.jsx)(n.strong,{children:"LinqCRUD"})]})}),"\n",(0,s.jsx)(n.h2,{id:"classe-du-mod\xe8le---propri\xe9t\xe9-de-navigation",children:"Classe du mod\xe8le - Propri\xe9t\xe9 de navigation"}),"\n",(0,s.jsxs)(n.p,{children:["La table ",(0,s.jsx)(n.strong,{children:"Personnage"})," a une relation ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"})," avec la table ",(0,s.jsx)(n.strong,{children:"Franchise"}),". Un personnage \xe0 une seule franchise."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 l'inverse, un ",(0,s.jsx)(n.strong,{children:"Franchise"})," a une relation ",(0,s.jsx)(n.strong,{children:"1 \xe0 plusieurs"})," avec la table **Personnage. Une franchise contient plusieurs personnages."]}),"\n",(0,s.jsxs)(n.p,{children:["La table ",(0,s.jsx)(n.strong,{children:"Personnage"})," a une relation ",(0,s.jsx)(n.strong,{children:"1 \xe0 plusieurs"})," avec la table ",(0,s.jsx)(n.strong,{children:"Distribution"}),". Un personnage peut faire partie de la distribution de plusieurs films."]}),"\n",(0,s.jsx)(n.p,{children:"Dans une base de donn\xe9es relationnelle, ces relations fonctionnent gr\xe2ce aux jointures des cl\xe9s \xe9trang\xe8res."}),"\n",(0,s.jsxs)(n.p,{children:["Dans un mod\xe8le objet, ces relations peuvent \xeatre repr\xe9sent\xe9es par des r\xe9f\xe9rences vers un objet dans le cas d'une relation ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"})," et par composition dans une relation ",(0,s.jsx)(n.strong,{children:"1 \xe0 plusieurs"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Une classe du mod\xe8le contient les propri\xe9t\xe9s qui correspondent aux champs de la table."}),"\n",(0,s.jsxs)(n.p,{children:["Cette classe a \xe9galement des propri\xe9t\xe9s de ",(0,s.jsx)(n.strong,{children:"navigation"}),". Ces propri\xe9t\xe9s permettent de repr\xe9senter les relations ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"})," et ",(0,s.jsx)(n.strong,{children:"1 \xe0 plusieurs"})," de la table."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la classe ",(0,s.jsx)(n.strong,{children:"Personnage"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public partial class Personnage\r\n{\r\n    public int PersonnageId { get; set; }\r\n    public String Nom { get; set; } = null!;\r\n    public String? IdentiteReelle { get; set; }\r\n    public DateOnly DateNaissance { get; set; }\r\n    public bool EstVilain { get; set; }\r\n    public int FranchiseId { get; set; }\r\n    public Franchise Franchise { get; set; } = null!;\r\n    public ICollection<Distribution> DistributionListe { get; set; } = new List<Distribution>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La ligne 10 repr\xe9sente la relation ",(0,s.jsx)(n.strong,{children:"1 \xe0 plusieurs"})," avec la table ",(0,s.jsx)(n.strong,{children:"Distribution"}),". Un personnage poss\xe8de une liste de distribution. Cette liste peut \xeatre vide dans le cas que le personnage n'appartienne \xe0 aucune distribution ou contenir plusieurs \xe9l\xe9ments si le personnage appartient \xe0 plusieurs distributions."]}),"\n",(0,s.jsxs)(n.p,{children:["La ligne 9 repr\xe9sente la relation ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"})," avec la table ",(0,s.jsx)(n.strong,{children:"Franchise"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Ces propri\xe9t\xe9s se nomment ",(0,s.jsx)(n.strong,{children:"navigation"}),", car il est possible de naviguer vers l'objet parent ou les objets enfants directement sans utiliser une jointure classique."]}),"\n",(0,s.jsx)(n.h2,{id:"log-des-op\xe9rations-sql",children:"Log des op\xe9rations SQL"}),"\n",(0,s.jsxs)(n.p,{children:["Afin de cr\xe9er un log des commandes SQL ex\xe9cut\xe9es lors d'un scrpt LINQ, ajouter ces lignes avant vos requ\xeates dans ",(0,s.jsx)(n.strong,{children:"Program.cs"})," du projet ",(0,s.jsx)(n.strong,{children:"LinqCRUD"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var optBuilder = new DbContextOptionsBuilder<UniversContext>();\r\noptBuilder.LogTo(message => File.WriteAllText(@"C:\\eflog\\" + DateTime.Now.Ticks + ".txt", message),\r\n    Microsoft.Extensions.Logging.LogLevel.Information);\r\noptBuilder.EnableSensitiveDataLogging();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"jointure-classique",children:"Jointure classique"}),"\n",(0,s.jsxs)(n.p,{children:["Les exemples ci-dessous sont tous des ",(0,s.jsx)(n.strong,{children:"INNER JOIN"}),". Le ",(0,s.jsx)(n.strong,{children:"LEFT OUTER JOIN"})," sera pr\xe9sent\xe9 plus tard en session."]}),"\n",(0,s.jsx)(n.h3,{id:"join",children:"join"}),"\n",(0,s.jsxs)(n.p,{children:["Cette approche est identique \xe0 ",(0,s.jsx)(n.strong,{children:"SQL"}),". Il faut effectuer la jointure en utilisant les cl\xe9s \xe9trang\xe8res. Pour les grosses requ\xeates, cette approche est parfois plus performante, car elle reproduit g\xe9n\xe9ralement la requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," optimale."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," \xe0 reproduire."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:"showLineNumbers",children:"SELECT\r\n\tPersonnage.PersonnageId,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom AS FranchiseNom\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code ",(0,s.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"\r\nvar resultatPersonnage = (from lqPersonnage in db.PersonnageTb\r\n    join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n    select\r\n    new\r\n    {\r\n        PersonnageId = lqPersonnage.PersonnageId,\r\n        PersonnageNom = lqPersonnage.Nom,\r\n        FranchiseId = lqFranchise.FranchiseId,\r\n        FranchiseNom = lqFranchise.Nom\r\n    }).ToList();    \r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La ligne 4 repr\xe9sente la jointure ",(0,s.jsx)(n.strong,{children:"inner join"}),". L'enregistrement de la table ",(0,s.jsx)(n.strong,{children:"Franchise"})," est repr\xe9sent\xe9 par la variable ",(0,s.jsx)(n.strong,{children:"lqFranchise"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [u].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la requ\xeate ci-dessus, l'objet de retour est dynamique. Le ",(0,s.jsx)(n.strong,{children:"select"})," contient un ",(0,s.jsx)(n.strong,{children:"new "}),". L'utilisation d'objet de retour dynamique est pratique si l'objet est utilis\xe9 uniquement dans le bloc de code. S'il faut cr\xe9er une extension pour g\xe9rer l'affichage de ceci, il faut cr\xe9er un objet pr\xe9cis."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans le dossier ",(0,s.jsx)(n.strong,{children:"Data"}),", cr\xe9ez l'objet ",(0,s.jsx)(n.strong,{children:"InfoPersonnage"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace IntroEF.Data;\r\n\r\npublic class InfoPersonnage\r\n{\r\n    public int PersonnageId { get; set; }\r\n    public string PersonnageNom { get; set; } = null!;\r\n    public int FranchiseId { get; set; }\r\n    public string FranchiseNom { get; set;} = null!;\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la d\xe9finition des tables ",(0,s.jsx)(n.strong,{children:"Franchise"})," et ",(0,s.jsx)(n.strong,{children:"Personnage"}),", les champs ",(0,s.jsx)(n.strong,{children:"Nom"})," ne sont pas ",(0,s.jsx)(n.strong,{children:"nullable"}),". Pour \xe9viter des avertissements du compilateur, il faut indiquer que leur valeur par d\xe9faut est ",(0,s.jsx)(n.strong,{children:"null!"}),". Cette d\xe9claration indique au compilateur et au programmeur que si la valeur est ",(0,s.jsx)(n.strong,{children:"null"}),", il ne faut pas la consid\xe9rer r\xe9ellement ",(0,s.jsx)(n.strong,{children:"null"}),". Elle devrait avoir une valeur, mais elle n'est pas disponible (Nous y reviendrons avec ",(0,s.jsx)(n.strong,{children:"eager-loading"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate avec l'utilisation de la classe ",(0,s.jsx)(n.strong,{children:"InfoPersonnage"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var resultatPersonnage = (from lqPersonnage in db.PersonnageTb\r\n        join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n        select\r\n        new InfoPersonnage()\r\n        {\r\n            PersonnageId = lqPersonnage.PersonnageId,\r\n            PersonnageNom = lqPersonnage.Nom,\r\n            FranchiseId = lqFranchise.FranchiseId,\r\n            FranchiseNom = lqFranchise.Nom\r\n        }).ToList();   \n"})}),"\n",(0,s.jsx)(n.h3,{id:"tri",children:"Tri"}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'utiliser la variable ",(0,s.jsx)(n.strong,{children:"lqFranchise"})," pour le tri et les conditions."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT\r\n\tPersonnage.PersonnageId,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom AS FranchiseNom\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nWHERE\r\n\tFranchise.Proprietaire != 'Disney' AND\r\n\tPersonnage.EstVilain = 1\r\nORDER BY\r\n\tFranchise.Nom,\r\n\tPersonnage.Nom DESC;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici son \xe9quivalent en ",(0,s.jsx)(n.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var resultatPersonnage = (from lqPersonnage in db.PersonnageTb\r\n        join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n        where\r\n        lqFranchise.Proprietaire != "Disney" &&\r\n        lqPersonnage.EstVilain == true\r\n        //highlight-start\r\n        orderby\r\n        lqFranchise.Nom,\r\n        lqPersonnage.Nom descending\r\n        //highlight-end\r\n        select\r\n        new InfoPersonnage()\r\n        {\r\n            PersonnageId = lqPersonnage.PersonnageId,\r\n            PersonnageNom = lqPersonnage.Nom,\r\n            FranchiseId = lqFranchise.FranchiseId,\r\n            FranchiseNom = lqFranchise.Nom\r\n        }).ToList(); \n'})}),"\n",(0,s.jsx)(n.h3,{id:"multijointures",children:"Multijointures"}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de faire plusieurs jointures."}),"\n",(0,s.jsxs)(n.p,{children:["Voici une requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," pour obtenir l'information d'une distribution pour le film #2."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici la version ",(0,s.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var infoDistribution = (from lqDistribution in db.DistributionTb\r\n//highlight-start\r\n        join lqPersonnage in db.PersonnageTb on lqDistribution.PersonnageId equals lqPersonnage.PersonnageId\r\n        join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n        join lqFilm in db.FilmTb on lqDistribution.FilmId equals lqFilm.FilmId\r\n//highlight-end\r\n        where\r\n            lqDistribution.FilmId == 2\r\n        select\r\n            new \r\n            {\r\n                Titre = lqFilm.Titre,\r\n                FranchiseNom = lqFranchise.Nom,\r\n                PersonnageNom = lqPersonnage.Nom,\r\n                Acteur = lqDistribution.Acteur\r\n            }).ToList();\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Notez ici qu'on ne peut pas utiliser InfoPersonnage car ce n'est plus la bonne information"})}),"\n",(0,s.jsx)(n.h2,{id:"propri\xe9t\xe9-de-navigation",children:"Propri\xe9t\xe9 de navigation"}),"\n",(0,s.jsx)(n.p,{children:"Toutes les requ\xeates de la section pr\xe9c\xe9dente peuvent \xeatre simplifi\xe9es en utilisant les propri\xe9t\xe9s de navigation."}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 de navigation repr\xe9sente la relation, donc ",(0,s.jsx)(n.strong,{children:"Entity Framework"})," va cr\xe9er la jointure automatiquement."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," \xe0 reproduire."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT\r\n\tPersonnage.PersonnageId,\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\tFranchise.FranchiseId,\r\n\tFranchise.Nom AS FranchiseNom\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code ",(0,s.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"\r\nvar infoPersonnage = (from lqPersonnage in db.PersonnageTb                          \r\n        select\r\n        new\r\n        {\r\n            PersonnageId = lqPersonnage.PersonnageId,\r\n            PersonnageNom = lqPersonnage.Nom,\r\n            FranchiseId = lqPersonnage.FranchiseId,\r\n            //highlight-next-line\r\n            FranchiseNom = lqPersonnage.Franchise.Nom //Jointure par navigation\r\n        }).ToList();\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le mot cl\xe9 ",(0,s.jsx)(n.strong,{children:"join"})," n'est plus utilis\xe9. Par contre \xe0 la ligne 10, l'obtention du nom de la franchise se fait par la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"Franchise"})," de la classe ",(0,s.jsx)(n.strong,{children:"Personnage"}),". Cette propri\xe9t\xe9 est une r\xe9f\xe9rence \xe0 l'enregistrement."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [p].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Il s'agit exactement de la m\xeame requ\xeate g\xe9n\xe9r\xe9e par la premi\xe8re requ\xeate de la section pr\xe9c\xe9dente."}),"\n",(0,s.jsx)(n.p,{children:"Il est possible d'utiliser la navigation pour le tri et les conditions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici son \xe9quivalent en ",(0,s.jsx)(n.strong,{children:"LINQ"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'var resultatPersonnage = (from lqPersonnage in db.PersonnageTb                          \r\n        where\r\n        lqPersonnage.Franchise.Proprietaire != "Disney" &&\r\n        lqPersonnage.EstVilain == true\r\n        orderby\r\n        lqPersonnage.Franchise.Nom,\r\n        lqPersonnage.Nom descending\r\n        select\r\n        new InfoPersonnage()\r\n        {\r\n            PersonnageId = lqPersonnage.PersonnageId,\r\n            PersonnageNom = lqPersonnage.Nom,\r\n            FranchiseId = lqPersonnage.FranchiseId,\r\n            FranchiseNom = lqPersonnage.Franchise.Nom\r\n        }).ToList();\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [p].[PersonnageId], [p].[Nom] AS [PersonnageNom], [p].[FranchiseId], [u].[Nom] AS [FranchiseNom]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [u].[Proprietaire] <> 'Disney' AND [p].[EstVilain] = CAST(1 AS bit)\r\nORDER BY [u].[Nom], [p].[Nom] DESC\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Encore une fois, le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"})," est identique \xe0 celui de la section pr\xe9c\xe9dente."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici une requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," pour obtenir l'information d'une distribution pour le film #2."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM [Distribution]\r\nINNER JOIN Personnage ON [Distribution].PersonnageId = Personnage.PersonnageId\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici la version ",(0,s.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"var infoDistribution = (from lqDistribution in db.DistributionTb\r\n        where\r\n            lqDistribution.FilmId == 2\r\n        select\r\n            new\r\n            {\r\n                Titre = lqDistribution.Film.Titre,\r\n                //highlight-next-line\r\n                FranchiseNom = lqDistribution.Personnage.Franchise.Nom,\r\n                PersonnageNom = lqDistribution.Personnage.Nom,\r\n                Acteur = lqDistribution.Acteur\r\n            }).ToList();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Remarquez la ligne 8, la navigation remonte de 2 niveaux dans la structure des jointures."}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [f].[Titre], [u].[Nom] AS [FranchiseNom], [p].[Nom] AS [PersonnageNom], [d].[Acteur]\r\nFROM [Distribution] AS [d]\r\nINNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\r\nINNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [d].[FilmId] = 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il n'est pas tout \xe0 fait identique \xe0 la section pr\xe9c\xe9dente, car les ",(0,s.jsx)(n.strong,{children:"jointures"})," ne sont pas dans le m\xeame ordre. En ",(0,s.jsx)(n.strong,{children:"SQL"}),", les ",(0,s.jsx)(n.strong,{children:"INNER JOIN"})," sont interchangeables dans l'ordre."]}),"\n",(0,s.jsxs)(n.p,{children:["Si vous d\xe9sirez avoir exactement la m\xeame requ\xeate sql, il est possible d'utiliser la technique du ",(0,s.jsx)(n.strong,{children:"join"})," et de les interchanger comme dans l'exemple ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var infoDistribution = (from lqFilm in db.FilmTb\r\n        join lqDistribution in db.DistributionTb on lqFilm.FilmId equals lqDistribution.FilmId\r\n        join lqPersonnage in db.PersonnageTb on lqDistribution.PersonnageId equals lqPersonnage.PersonnageId\r\n        join lqFranchise in db.FranchiseTb on lqPersonnage.FranchiseId equals lqFranchise.FranchiseId\r\n        where\r\n            lqDistribution.FilmId == 2\r\n        select\r\n            new\r\n            {\r\n                Titre = lqFilm.Titre,\r\n                FranchiseNom = lqFranchise.Nom,\r\n                PersonnageNom = lqPersonnage.Nom,\r\n                Acteur = lqDistribution.Acteur\r\n            }).ToList();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"plusieurs-\xe0-1",children:"plusieurs \xe0 1"}),"\n",(0,s.jsxs)(n.p,{children:["Il n'est pas possible de faire la requ\xeate suivante en navigation car la relation entre Distribution et Film est ",(0,s.jsx)(n.strong,{children:"plusieurs \xe0 1"}),".\r\nIl y a plusieurs acteurs dans un film, c'est donc une liste."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var infoDistribution = (from lqFilm in db.FilmTb                           \r\n        where\r\n            lqFilm.FilmId == 2\r\n        select\r\n            new\r\n            {\r\n                Titre = lqFilm.Titre,\r\n                FranchiseNom = lqFilm.DistributionListe.Personnage.Franchise.Nom //Erreur\r\n                PersonnageNom = lqFilm.DistributionListe.Personnage.Nom, //Erreur\r\n                Acteur = lqFilm.DistributionListe.Acteur //Erreur\r\n            }).ToList();\n"})}),"\n",(0,s.jsx)(n.p,{children:"La requ\xeate a \xe9t\xe9 \"simplifi\xe9e\" afin de d\xe9montrer ce qui pourrait \xeatre fait (par exemple, si je sais qu'il n'y a qu'un seul acteur dans un film, je peux aller chercher le premier de la liste)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var infoDistribution = (from lqFilm in db.FilmTb                           \r\n        where\r\n            lqFilm.FilmId == 2\r\n        select\r\n            new\r\n            {\r\n                Titre = lqFilm.Titre,\r\n                FranchiseNom = lqFilm.DistributionListe.Where(d => d.FilmId == lqFilm.FilmId)\r\n                    .Select(d => d.Personnage.Franchise.Nom).FirstOrDefault(),\r\n                PersonnageNom = lqFilm.DistributionListe.Where(d => d.FilmId == lqFilm.FilmId)\r\n                    .Select(d => d.Personnage.Nom).FirstOrDefault(),\r\n                Acteur = lqFilm.DistributionListe.Where(d => d.FilmId == lqFilm.FilmId)\r\n                    .Select(d => d.Acteur).FirstOrDefault()\r\n            }).ToList();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),". Il effectue plusieurs sous-requ\xeates pour obtenir l'information."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [f].[Titre], (\r\n    SELECT TOP(1) [u].[Nom]\r\n    FROM [Distribution] AS [d]\r\n    INNER JOIN [Personnage] AS [p] ON [d].[PersonnageId] = [p].[PersonnageId]\r\n    INNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\n    WHERE [f].[FilmId] = [d].[FilmId] AND [d].[FilmId] = [f].[FilmId]) AS [FranchiseNom], (\r\n    SELECT TOP(1) [p0].[Nom]\r\n    FROM [Distribution] AS [d0]\r\n    INNER JOIN [Personnage] AS [p0] ON [d0].[PersonnageId] = [p0].[PersonnageId]\r\n    WHERE [f].[FilmId] = [d0].[FilmId] AND [d0].[FilmId] = [f].[FilmId]) AS [PersonnageNom], (\r\n    SELECT TOP(1) [d1].[Acteur]\r\n    FROM [Distribution] AS [d1]\r\n    WHERE [f].[FilmId] = [d1].[FilmId] AND [d1].[FilmId] = [f].[FilmId]) AS [Acteur]\r\nFROM [Film] AS [f]\r\nWHERE [f].[FilmId] = 2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Cette requ\xeate est donc \xe0 proscrire, car elle aura un impact significatif sur la performance."}),"\n",(0,s.jsxs)(n.p,{children:["Donc, il est important de d\xe9buter \xe0 partir de la bonne table pour effectuer des jointures par navigation. Il n'est pas toujours facile ou m\xeame possible de convertir une requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," directement."]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe9lange-de-join-et-navigation",children:"M\xe9lange de join et navigation"}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de m\xe9langer les 2 approches, mais je ne la recommande pas s'il est possible d'en utiliser une seule."}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate ",(0,s.jsx)(n.strong,{children:"SQL"})," qui d\xe9bute par la table ",(0,s.jsx)(n.strong,{children:"Personnage"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT \r\n\tFilm.Titre,\r\n\tFranchise.Nom AS FranchiseNom,\t\r\n\tPersonnage.Nom AS PersonnageNom,\r\n\t[Distribution].Acteur\r\nFROM Personnage\r\nINNER JOIN Franchise ON Personnage.FranchiseId = Franchise.FranchiseId\r\nINNER JOIN [Distribution] ON Personnage.PersonnageId = [Distribution].PersonnageId\r\nINNER JOIN Film ON [Distribution].FilmId = Film.FilmId\r\nWHERE [Distribution].FilmId = 2;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici la requ\xeate ",(0,s.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"var infoDistribution = \r\n    (from lqPersonnage in db.PersonnageTb                           \r\n     join lqDistribution in db.DistributionTb on lqPersonnage.PersonnageId equals lqDistribution.PersonnageId\r\n     where\r\n       lqDistribution.FilmId == 2 //Jointure classique\r\n     select\r\n       new\r\n       {\r\n           Titre = lqDistribution.Film.Titre, //Jointure classique et navigation\r\n           FranchiseNom = lqPersonnage.Franchise.Nom, //Navigation\r\n           PersonnageNom = lqPersonnage.Nom,\r\n           Acteur = lqDistribution.Acteur\r\n       }).ToList();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT [f].[Titre], [u].[Nom] AS [FranchiseNom], [p].[Nom] AS [PersonnageNom], [d].[Acteur]\r\nFROM [Personnage] AS [p]\r\nINNER JOIN [Distribution] AS [d] ON [p].[PersonnageId] = [d].[PersonnageId]\r\nINNER JOIN [Film] AS [f] ON [d].[FilmId] = [f].[FilmId]\r\nINNER JOIN [Franchise] AS [u] ON [p].[FranchiseId] = [u].[FranchiseId]\r\nWHERE [d].[FilmId] = 2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:"SQL g\xe9n\xe9r\xe9"})," est \xe9quivalent \xe0 celui de la section pr\xe9c\xe9dente."]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>o});var s=r(7294);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);