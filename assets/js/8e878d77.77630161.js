"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[969],{9713:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=n(5893),t=n(1151);const o={sidebar_position:320,draft:!1},a="Modifier une cat\xe9gorie",s={id:"WPF partie 3/modif_categorie",title:"Modifier une cat\xe9gorie",description:"Pour \xeatre en mesure de modifier une cat\xe9gorie, il faut afficher dans la vue la cat\xe9gorie qui a \xe9t\xe9 sp\xe9cifi\xe9e par la cl\xe9.",source:"@site/docs/74-WPF partie 3/modif_categorie.md",sourceDirName:"74-WPF partie 3",slug:"/WPF partie 3/modif_categorie",permalink:"/4N1_2024/docs/WPF partie 3/modif_categorie",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:320,frontMatter:{sidebar_position:320,draft:!1},sidebar:"NotesSidebar",previous:{title:"Ajout d'une cat\xe9gorie",permalink:"/4N1_2024/docs/WPF partie 3/ajout_categorie"},next:{title:"Navigation et param\xe8tres",permalink:"/4N1_2024/docs/WPF partie 3/navigation"}},l={},d=[{value:"SuperCarte.Core",id:"supercartecore",level:2},{value:"M\xe9thode d&#39;extension - CategorieMapExtension",id:"m\xe9thode-dextension---categoriemapextension",level:3},{value:"M\xe9thode Obtenir et Modifier dans le service - CategorieService",id:"m\xe9thode-obtenir-et-modifier-dans-le-service---categorieservice",level:3},{value:"SuperCarte.WPF",id:"supercartewpf",level:2},{value:"Modification du ViewModel - GestionCategorieVM",id:"modification-du-viewmodel---gestioncategorievm",level:3},{value:"Modification de la vue - UcGestionCategorie.xaml",id:"modification-de-la-vue---ucgestioncategoriexaml",level:3},{value:"Tests",id:"tests",level:3},{value:"Test 1 - Rafraichissement",id:"test-1---rafraichissement",level:4},{value:"Test 2 - Modification",id:"test-2---modification",level:4},{value:"Test 3 - Nouveau et rafraichir",id:"test-3---nouveau-et-rafraichir",level:4},{value:"Test 4 - Nouveau et modifier",id:"test-4---nouveau-et-modifier",level:4},{value:"Verrouiller le formulaire et les boutons",id:"verrouiller-le-formulaire-et-les-boutons",level:2},{value:"Bouton Nouveau",id:"bouton-nouveau",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"modifier-une-cat\xe9gorie",children:"Modifier une cat\xe9gorie"}),"\n",(0,i.jsx)(r.p,{children:"Pour \xeatre en mesure de modifier une cat\xe9gorie, il faut afficher dans la vue la cat\xe9gorie qui a \xe9t\xe9 sp\xe9cifi\xe9e par la cl\xe9."}),"\n",(0,i.jsxs)(r.p,{children:["Il faut donc int\xe9grer une m\xe9canique de chargement dans le ",(0,i.jsx)(r.strong,{children:"ViewModel"})," de la cat\xe9gorie en fonction d'une cl\xe9 primaire."]}),"\n",(0,i.jsx)(r.h2,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,i.jsx)(r.h3,{id:"m\xe9thode-dextension---categoriemapextension",children:"M\xe9thode d'extension - CategorieMapExtension"}),"\n",(0,i.jsxs)(r.p,{children:["Pour faire la mise \xe0 jour avec ",(0,i.jsx)(r.strong,{children:"Entity Framework"}),", il faut pr\xe9alablement r\xe9cup\xe9rer l'objet de donn\xe9es. Ensuite, il faut lui assigner les nouvelles valeurs et enregistrer le contexte."]}),"\n",(0,i.jsx)(r.admonition,{title:"IMPORTANT",type:"danger",children:(0,i.jsx)(r.p,{children:"Il est important d'utiliser la m\xeame instance et donc de ne pas en faire une copie."})}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"CategorieMapExtension"}),", ajoutez la m\xe9thode ci-dessous."]}),"\n",(0,i.jsx)(r.p,{children:"Cette m\xe9thode d'extension aura 2 param\xe8tres visibles lorsqu'elle sera utilis\xe9e. Le premier est l'objet du domaine de r\xe9f\xe9rence qui sera utilis\xe9e pour faire la copie dans l'objet de donn\xe9es qui poss\xe8de l'extension. La 2e m\xe9thode est pour copier ou non la valeur de la cl\xe9 primaire."}),"\n",(0,i.jsx)(r.p,{children:"Cette m\xe9thode est l'inverse de la m\xe9thode Copie qui est d\xe9j\xe0 dans cette classe."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'/// <summary>\r\n/// M\xe9thode qui copie les valeurs des propri\xe9t\xe9s du Cat\xe9gorieModel dans l\'objet de donn\xe9e Categorie\r\n/// </summary>\r\n/// <param name="itemDestination">l\'objet Categorie dans lequel sera copi\xe9 le model du domaine (la destination)</param>\r\n/// <param name="categorieModelSource">L\'objet CategorieModel de r\xe9f\xe9rence pour la copie (source)</param>\r\n/// <param name="ignoreClePrimaire">Ignore la copie de la cl\xe9 primaire</param>\r\npublic static void Copie(this Categorie itemDestination, CategorieModel categorieModelSource, bool ignoreClePrimaire = true)\r\n{\r\n    if(ignoreClePrimaire == false)\r\n    {\r\n        itemDestination.CategorieId = categorieModelSource.CategorieId;\r\n    }\r\n\r\n    itemDestination.Nom = categorieModelSource.Nom;\r\n    itemDestination.Description = categorieModelSource.Description;\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"m\xe9thode-obtenir-et-modifier-dans-le-service---categorieservice",children:"M\xe9thode Obtenir et Modifier dans le service - CategorieService"}),"\n",(0,i.jsx)(r.p,{children:"Il faut ajouter dans le service la m\xe9thode pour obtenir et pour modifier une cat\xe9gorie. La m\xe9thode est tr\xe8s simple pour le moment. Elle sera un peu plus complexe lors de la validation."}),"\n",(0,i.jsxs)(r.p,{children:["Dans l'interface ",(0,i.jsx)(r.strong,{children:"ICategorieService.cs"}),", ajoutez la signature des m\xe9thodes ci-dessous."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'/// <summary>\r\n/// Modifier une cat\xe9gorie en asynchrone\r\n/// </summary>\r\n/// <param name="categorieModel">Cat\xe9gorie \xe0 modifier</param>    \r\n/// <returns>Vrai si ajout\xe9e, faux si non ajout\xe9e</returns>\r\nTask<bool> ModifierAsync(CategorieModel categorieModel);\r\n\r\n/// <summary>\r\n/// Obtenir une cat\xe9gorie \xe0 partir de sa cl\xe9 primaire en asynchrone.\r\n/// </summary>\r\n/// <param name="categorieId">Cl\xe9 primaire de la cat\xe9gorie</param>\r\n/// <returns>La cat\xe9gorie ou null si la cat\xe9gorie n\'est pas trouv\xe9e</returns>\r\nTask<CategorieModel?> ObtenirAsync(int categorieId);\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"CategorieService.cs"}),", ajoutez l'impl\xe9mentation de la m\xe9thode ",(0,i.jsx)(r.strong,{children:"Modifier"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'public async Task<bool> ModifierAsync(CategorieModel categorieModel)\r\n{\r\n    Categorie? categorie = await _categorieRepo.ObtenirParCleAsync(categorieModel.CategorieId);\r\n\r\n    if(categorie != null)\r\n    {\r\n        //Assigner les valeurs dans la cat\xe9gorie\r\n        categorie.Copie(categorieModel);\r\n        await _categorieRepo.EnregistrerAsync();\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        throw new Exception("Impossible de modifier la cat\xe9gorie. Aucune cat\xe9gorie trouv\xe9e avec la cl\xe9 primaire.");\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Voici la m\xe9thode ",(0,i.jsx)(r.strong,{children:"Obtenir"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public async Task<CategorieModel?> ObtenirAsync(int categorieId)\r\n{\r\n    Categorie? categorie = await _categorieRepo.ObtenirParCleAsync(categorieId);\r\n  \r\n    //Le ?. est important, car si la cat\xe9gorie n'est pas trouv\xe9e, l'objet sera null\r\n    return categorie?.VersCategorieModel();\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"supercartewpf",children:"SuperCarte.WPF"}),"\n",(0,i.jsx)(r.h3,{id:"modification-du-viewmodel---gestioncategorievm",children:"Modification du ViewModel - GestionCategorieVM"}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez la classe ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM.cs"})," par le code ci-dessous."]}),"\n",(0,i.jsx)(r.p,{children:"Premi\xe8rement, il faut cr\xe9er une commande pour obtenir la cat\xe9gorie. (ligne 86)"}),"\n",(0,i.jsx)(r.p,{children:"Ensuite, il faut cr\xe9er la m\xe9thode qui sera utilis\xe9e par la commande. (ligne 71)"}),"\n",(0,i.jsxs)(r.p,{children:["Dans le constructeur, la commande est cr\xe9\xe9e pour la lier \xe0 la m\xe9thode ",(0,i.jsx)(r.strong,{children:"ObtenirAsync()"}),". (ligne 28)"]}),"\n",(0,i.jsxs)(r.p,{children:["La m\xe9thode ",(0,i.jsx)(r.strong,{children:"EnregistrerAsync()"})," est modifi\xe9e. Il y a maintenant une v\xe9rification en fonction de la cl\xe9 primaire. Si elle est \xe0 0, c'est-\xe0-dire que c'est une nouvelle cat\xe9gorie. Par contre, si la cl\xe9 primaire a une valeur diff\xe9rente de 0, la vue est en mode modification."]}),"\n",(0,i.jsx)(r.p,{children:"Dans le constructeur, \xe0 la ligne 30, une cl\xe9 primaire est assign\xe9e pour simuler la modification de la cat\xe9gorie #2."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.WPF.Views;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue Gestion Categorie\r\n/// </summary>\r\npublic class GestionCategorieVM : BaseVM\r\n{\r\n    #region D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private int _categorieId;\r\n    private string _nom;\r\n    private string? _description;\r\n    private bool _estEnTravail = false; \r\n    #endregion\r\n\r\n    public GestionCategorieVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n\r\n        EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync);\r\n\t\t//highlight-next-line\r\n        ObtenirCommande = new AsyncRelayCommand(ObtenirAsync);\r\n        \r\n        CategorieId = 2;//Pour test\r\n    }\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Enregistrer la cat\xe9gorie\r\n    /// </summary>    \r\n    private async Task EnregistrerAsync()\r\n    {\r\n        EstEnTravail = true;\r\n        bool estEnregistre;\r\n\r\n        CategorieModel categorieModel = VersModele();\r\n\t\t\r\n//highlight-start\t\r\n        if (categorieModel.CategorieId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n            estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n            estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n        }\r\n\r\n        if (estEnregistre == true)\r\n        {\r\n            VersVM(categorieModel);\r\n        }\r\n        else\r\n        {\r\n\t\t\tthrow new Exception(\"Erreur. Impossible d'enregistrer\");\r\n        }\r\n\r\n        EstEnTravail = false;\r\n    }\r\n//highlight-end\r\n\r\n//highlight-start\r\n    /// <summary>\r\n    /// Obtenir la cat\xe9gorie\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private async Task ObtenirAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        CategorieModel? categorieModel = await _categorieService.ObtenirAsync(CategorieId);\r\n\r\n        VersVM(categorieModel);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n    #endregion\r\n//highlight-end\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand EnregistrerCommande { get; private set; }\r\n\r\n    public IAsyncRelayCommand ObtenirCommande { get; private set; }\r\n    #endregion   \r\n\r\n    #region M\xe9thodes d'assignation\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s li\xe9es du ViewModel vers les propri\xe9t\xe9s du mod\xe8le\r\n    /// </summary>\r\n    /// <returns>Objet du mod\xe8le</returns>\r\n    private CategorieModel VersModele()\r\n    {\r\n        return new CategorieModel\r\n        {\r\n            CategorieId = this.CategorieId,\r\n            Nom = this.Nom,\r\n            Description = this.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s du mod\xe8le vers les propri\xe9t\xe9s li\xe9es du ViewModel\r\n    /// </summary>\r\n    /// <param name=\"categorieModel\">Mod\xe8le</param>\r\n    private void VersVM(CategorieModel? categorieModel)\r\n    {\r\n        if (categorieModel != null)\r\n        { \r\n            CategorieId = categorieModel.CategorieId;\r\n            Nom = categorieModel.Nom;\r\n            Description = categorieModel.Description;\r\n        }\r\n        else\r\n        {\r\n            CategorieId = 0;\r\n            Nom = string.Empty;\r\n            Description = null;\r\n        }\r\n    }\r\n    #endregion\r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n    public int CategorieId\r\n    {\r\n        get \r\n        { \r\n            return _categorieId;\r\n        }\r\n        private set\r\n        {\r\n            SetProperty(ref _categorieId, value);\r\n        }\r\n    }\r\n\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nom, value);\r\n        }\r\n    }\r\n\r\n    public string? Description\r\n    {\r\n        get\r\n        {\r\n            return _description;\r\n        }\r\n        set\r\n        {\r\n            //Permet de remplacer une chaine vide par null\r\n            SetProperty(ref _description, string.IsNullOrWhiteSpace(value) ? null : value );\r\n        }\r\n    }\r\n    #endregion\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"modification-de-la-vue---ucgestioncategoriexaml",children:"Modification de la vue - UcGestionCategorie.xaml"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut lier le bouton rafraichir \xe0 la commande ",(0,i.jsx)(r.strong,{children:"ObtenirCommande"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"\xc9galement, il faut charger automatiquement la cat\xe9gorie."}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez le fichier ",(0,i.jsx)(r.strong,{children:"UcGestionCategorie.xaml"})," pour le code ci-dessous."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 37, le bouton rafraichir est li\xe9 \xe0 la commande ",(0,i.jsx)(r.strong,{children:"ObtenirCommande"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcGestionCategorie"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:GestionCategorieVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto"/>\r\n            <RowDefinition Height="auto" />\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Gestion d\'une cat\xe9gorie"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="Enregistrer"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding EnregistrerCommande}"/>\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n\t\t\t\t\t//highlight-next-line\r\n                    Command="{Binding ObtenirCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        \x3c!-- Formulaire --\x3e\r\n        <Grid Grid.Row="2">\r\n            <Grid.RowDefinitions>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n            </Grid.RowDefinitions>\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width="auto"/>\r\n                <ColumnDefinition Width="*" />\r\n            </Grid.ColumnDefinitions>\r\n            \r\n            \x3c!-- Nom --\x3e\r\n            <Label Grid.Row="0" Grid.Column="0" \r\n                   Content="Nom : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="0" Grid.Column="1" \r\n                     Text="{Binding Nom}" \r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n            \x3c!-- Description --\x3e\r\n            <Label Grid.Row="1" Grid.Column="0" \r\n                   Content="Description : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="1" Grid.Column="1" \r\n                     Text="{Binding Description}"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n        </Grid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(r.h3,{id:"tests",children:"Tests"}),"\n",(0,i.jsx)(r.h4,{id:"test-1---rafraichissement",children:"Test 1 - Rafraichissement"}),"\n",(0,i.jsxs)(r.p,{children:["Appuyez sur le bouton rafraichir. La cat\xe9gorie ",(0,i.jsx)(r.strong,{children:"Orcs"})," devrait \xeatre affich\xe9e (hardcod\xe9 ligne 30 de GestionCategorieVM.cs)."]}),"\n",(0,i.jsx)(r.p,{children:"Modifiez un champ sans enregistrer et appuyez sur le bouton rafraichir."}),"\n",(0,i.jsx)(r.p,{children:"Le champ aura de nouveau sa valeur initiale."}),"\n",(0,i.jsx)(r.h4,{id:"test-2---modification",children:"Test 2 - Modification"}),"\n",(0,i.jsx)(r.p,{children:"Modifiez les champs et enregistrez les modifications."}),"\n",(0,i.jsx)(r.p,{children:"V\xe9rifiez dans la base de donn\xe9es. Les valeurs seront modifi\xe9es."}),"\n",(0,i.jsx)(r.h4,{id:"test-3---nouveau-et-rafraichir",children:"Test 3 - Nouveau et rafraichir"}),"\n",(0,i.jsxs)(r.p,{children:["Dans le ",(0,i.jsx)(r.strong,{children:"ViewModel"}),", retirez la ligne ",(0,i.jsx)(r.strong,{children:"CategorieId = 2; //Pour tester uniquement"})," du constructeur."]}),"\n",(0,i.jsx)(r.p,{children:"Red\xe9marrez."}),"\n",(0,i.jsxs)(r.p,{children:["Le ",(0,i.jsx)(r.strong,{children:"ViewModel"})," sera en mode ",(0,i.jsx)(r.strong,{children:"ajouter"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Modifiez un champ sans enregistrer et appuyez sur le bouton rafraichir."}),"\n",(0,i.jsx)(r.p,{children:"Le champ aura de nouveau sa valeur par d\xe9faut (vide)."}),"\n",(0,i.jsx)(r.h4,{id:"test-4---nouveau-et-modifier",children:"Test 4 - Nouveau et modifier"}),"\n",(0,i.jsx)(r.p,{children:"Cr\xe9ez une nouvelle cat\xe9gorie et enregistrez."}),"\n",(0,i.jsx)(r.p,{children:"V\xe9rifiez dans la base de donn\xe9es pour voir le nouvel enregistrement."}),"\n",(0,i.jsx)(r.p,{children:"Ensuite, modifiez un des champs et enregistrez de nouveau."}),"\n",(0,i.jsx)(r.p,{children:"V\xe9rifiez dans la base de donn\xe9es et l'enregistrement aura la nouvelle valeur."}),"\n",(0,i.jsxs)(r.p,{children:["Le ",(0,i.jsx)(r.strong,{children:"ViewModel"})," passe en mode ",(0,i.jsx)(r.strong,{children:"modifier"})," apr\xe8s un ajout, car il a une cl\xe9 primaire (ligne 43 \xe0 52)."]}),"\n",(0,i.jsx)(r.h2,{id:"verrouiller-le-formulaire-et-les-boutons",children:"Verrouiller le formulaire et les boutons"}),"\n",(0,i.jsx)(r.p,{children:"Lorsque le formulaire est en cours d'enregistrement, il est toujours modifiable. Il est difficile \xe0 visualiser, car c'est tr\xe8s rapide."}),"\n",(0,i.jsxs)(r.p,{children:["Pour le visualiser, il faut ajouter un d\xe9lai artificiel dans la commande ",(0,i.jsx)(r.strong,{children:"Enregistrer"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM.cs"}),", modifiez temporairement la m\xe9thode ",(0,i.jsx)(r.strong,{children:"EnregistrerAsync()"})," par celle-ci."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"private async Task EnregistrerAsync()\r\n{\r\n    EstEnTravail = true;\r\n    bool estEnregistre;\r\n\r\n    //D\xe9lai artificiel\r\n    //highlight-next-line\r\n    await Task.Delay(5000);\r\n\r\n    CategorieModel categorieModel = VersModele();\r\n\r\n    if (categorieModel.CategorieId == 0)\r\n    {\r\n        //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n        estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n    }\r\n    else\r\n    {\r\n        //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n        estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n    }\r\n\r\n    if (estEnregistre == true)\r\n    {\r\n        VersVM(categorieModel);\r\n    }\r\n    else\r\n    {\r\n        throw new Exception(\"Erreur. Impossible d'enregistrer\");\r\n    }\r\n\r\n    EstEnTravail = false;\r\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marrez l'application et enregistrez. Il est toujours possible de modifier les valeurs. \xc9galement, le bouton Rafraichir est disponible. Lorsqu'une commande est en cours d'ex\xe9cution, il ne faudrait pas que les autres soient disponibles."}),"\n",(0,i.jsxs)(r.p,{children:["Il faut donc cr\xe9er une propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"ChampsModifiables"})," et la lier \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"IsEnabled"})," de la grille du formulaire."]}),"\n",(0,i.jsxs)(r.p,{children:["Lorsque l'enregistrement d\xe9butera, il faut mettre \xe0 jour la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"ChampsModifiables"})," pour emp\xeacher la modification. \xc0 la fin de l'enregistrement, il fait permettre de nouveau la modification."]}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez la classe ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM.cs"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 21, il y a l'attribut ",(0,i.jsx)(r.strong,{children:"_champsModifiables"})," et sa propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"ChampsModifiables"})," \xe0 la ligne 136."]}),"\n",(0,i.jsxs)(r.p,{children:["Aux lignes 40 et 62 de la m\xe9thode ",(0,i.jsx)(r.strong,{children:"EnregistrerAsync()"}),", la commande indique si le formulaire est modifiable ou non."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.WPF.Views;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue Gestion Categorie\r\n/// </summary>\r\npublic class GestionCategorieVM : BaseVM\r\n{\r\n    #region D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private int _categorieId;\r\n    private string _nom;\r\n    private string? _description;\r\n    private bool _estEnTravail = false;\r\n    //highlight-next-line\r\n    private bool _champsModifiables = true;\r\n    #endregion\r\n\r\n    public GestionCategorieVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n\r\n        EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync);\r\n        ObtenirCommande = new AsyncRelayCommand(ObtenirAsync);\r\n                \r\n        CategorieId = 3; //Pour tester uniquement\r\n    }\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Enregistrer la cat\xe9gorie\r\n    /// </summary>    \r\n    private async Task EnregistrerAsync()\r\n    {\r\n        //highlight-next-line\r\n        ChampsModifiables = false;\r\n        EstEnTravail = true;\r\n        bool estEnregistre;\r\n        \r\n        //D\xe9lai artificiel\r\n        await Task.Delay(5000);\r\n\r\n        CategorieModel categorieModel = VersModele();\r\n\r\n        if (categorieModel.CategorieId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n            estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n            estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n        }\r\n\r\n        if (estEnregistre == true)\r\n        {\r\n            VersVM(categorieModel);\r\n        }\r\n        else\r\n        {\r\n\t\t\tthrow new Exception(\"Erreur. Impossible d'enregistrer\");\r\n        }\r\n\r\n        EstEnTravail = false;\r\n        //highlight-next-line\r\n        ChampsModifiables = true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la cat\xe9gorie\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private async Task ObtenirAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        CategorieModel? categorieModel = await _categorieService.ObtenirAsync(CategorieId);\r\n\r\n        VersVM(categorieModel);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n    #endregion\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand EnregistrerCommande { get; private set; }\r\n\r\n    public IAsyncRelayCommand ObtenirCommande { get; private set; }\r\n    #endregion   \r\n\r\n    #region M\xe9thodes d'assignation\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s li\xe9es du ViewModel vers les propri\xe9t\xe9s du mod\xe8le\r\n    /// </summary>\r\n    /// <returns>Objet du mod\xe8le</returns>\r\n    private CategorieModel VersModele()\r\n    {\r\n        return new CategorieModel\r\n        {\r\n            CategorieId = this.CategorieId,\r\n            Nom = this.Nom,\r\n            Description = this.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s du mod\xe8le vers les propri\xe9t\xe9s li\xe9es du ViewModel\r\n    /// </summary>\r\n    /// <param name=\"categorieModel\">Mod\xe8le</param>\r\n    private void VersVM(CategorieModel? categorieModel)\r\n    {\r\n        if (categorieModel != null)\r\n        { \r\n            CategorieId = categorieModel.CategorieId;\r\n            Nom = categorieModel.Nom;\r\n            Description = categorieModel.Description;\r\n        }\r\n        else\r\n        {\r\n            CategorieId = 0;\r\n            Nom = string.Empty;\r\n            Description = null;\r\n        }\r\n    }\r\n    #endregion\r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n//highlight-start\r\n    public bool ChampsModifiables\r\n    {\r\n        get\r\n        {\r\n            return _champsModifiables;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _champsModifiables, value);\r\n        }\r\n    }\r\n//highlight-end\r\n    public int CategorieId\r\n    {\r\n        get \r\n        { \r\n            return _categorieId;\r\n        }\r\n        private set\r\n        {\r\n            SetProperty(ref _categorieId, value);\r\n        }\r\n    }\r\n\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nom, value);\r\n        }\r\n    }\r\n\r\n    public string? Description\r\n    {\r\n        get\r\n        {\r\n            return _description;\r\n        }\r\n        set\r\n        {\r\n            //Permet de remplacer une chaine vide par null\r\n            SetProperty(ref _description, string.IsNullOrWhiteSpace(value) ? null : value );\r\n        }\r\n    }\r\n    #endregion\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Dans le fichier ",(0,i.jsx)(r.strong,{children:"UcGestionCategorie.xaml"}),", il faut lier la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"IsEnabled"})," \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"ChampsModifiables"})," du ",(0,i.jsx)(r.strong,{children:"ViewModel"})," (ligne 42)."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcGestionCategorie"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:GestionCategorieVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto"/>\r\n            <RowDefinition Height="auto" />\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Gestion d\'une cat\xe9gorie"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="Enregistrer"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding EnregistrerCommande}"/>\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        \x3c!-- Formulaire --\x3e\r\n        //highlight-next-line\r\n        <Grid Grid.Row="2" IsEnabled="{Binding ChampsModifiables}">\r\n            <Grid.RowDefinitions>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n            </Grid.RowDefinitions>\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width="auto"/>\r\n                <ColumnDefinition Width="*" />\r\n            </Grid.ColumnDefinitions>\r\n            \r\n            \x3c!-- Nom --\x3e\r\n            <Label Grid.Row="0" Grid.Column="0" \r\n                   Content="Nom : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="0" Grid.Column="1" \r\n                     Text="{Binding Nom}" \r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n            \x3c!-- Description --\x3e\r\n            <Label Grid.Row="1" Grid.Column="0" \r\n                   Content="Description : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="1" Grid.Column="1" \r\n                     Text="{Binding Description}"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10"/>\r\n\r\n        </Grid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marrez l'application et effectuez une modification. Le formulaire ne sera pas modifiable pendant l'enregistrement."}),"\n",(0,i.jsxs)(r.p,{children:["La raison pour laquelle la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"EstEnTravail"})," n'est pas utilis\xe9e est que le formulaire doit rester accessible lors d'un rafraichissement. Sinon il aurait un ",(0,i.jsx)(r.strong,{children:"clignotement"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Il reste \xe0 r\xe9gler la disponibilit\xe9 des boutons."}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM"}),", il faut ajouter une m\xe9thode pour le ",(0,i.jsx)(r.strong,{children:"CanExecute"})," pour la commande."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour ce cas, ce sera la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"EstEnTravail"})," qui d\xe9terminera si les commandes sont disponibles ou non. Il est possible de le faire directement sans cr\xe9er de sous-m\xe9thode."]}),"\n",(0,i.jsxs)(r.p,{children:["Changer les lignes 28 et 29 de ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM"})," pour celle-ci (notez la fin de la ligne)"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync, () => !EstEnTravail);\r\nObtenirCommande = new AsyncRelayCommand(ObtenirAsync, () => !EstEnTravail);\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Il faut \xe9galement notifier les commandes lorsque la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"EstEnTravail"})," est modifi\xe9e."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"public bool EstEnTravail\r\n{\r\n    get\r\n    {\r\n        return _estEnTravail;\r\n    }\r\n    set\r\n    {\r\n        //highlight-start\r\n        if (SetProperty(ref _estEnTravail, value))\r\n        {\r\n            ObtenirCommande.NotifyCanExecuteChanged();\r\n            EnregistrerCommande.NotifyCanExecuteChanged();\r\n        }\r\n        //highlight-end\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsxs)(r.p,{children:["Rappelons-nous que si SetProperty change la valeur, il retourne true. Si la nouvelle valeur est la m\xeame que l'ancienne, il retourne false. ",(0,i.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.platformui.observableobject.setproperty?view=visualstudiosdk-2022",children:"reference"})]})}),"\n",(0,i.jsxs)(r.p,{children:["Si vous \xeates un peu perdu, voici la classe ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM.cs"})," au complet."]}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:" GestionCategorieVM.cs"}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.WPF.Views;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue Gestion Categorie\r\n/// </summary>\r\npublic class GestionCategorieVM : BaseVM\r\n{\r\n    #region D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private int _categorieId;\r\n    private string _nom;\r\n    private string? _description;\r\n    private bool _estEnTravail = false;\r\n    private bool _champsModifiables = true;\r\n    #endregion\r\n\r\n    public GestionCategorieVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n\r\n        EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync, () => !EstEnTravail);\r\n        ObtenirCommande = new AsyncRelayCommand(ObtenirAsync, () => !EstEnTravail);\r\n                \r\n    }\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Enregistrer la cat\xe9gorie\r\n    /// </summary>    \r\n    private async Task EnregistrerAsync()\r\n    {\r\n        ChampsModifiables = false;\r\n        EstEnTravail = true;\r\n        bool estEnregistre;\r\n\r\n        CategorieModel categorieModel = VersModele();\r\n\r\n        if (categorieModel.CategorieId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n            estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n            estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n        }\r\n\r\n        if (estEnregistre == true)\r\n        {\r\n            VersVM(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            throw new Exception(\"Erreur. Impossible d'enregistrer\");\r\n        }\r\n\r\n        EstEnTravail = false;\r\n        ChampsModifiables = true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la cat\xe9gorie\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private async Task ObtenirAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        CategorieModel? categorieModel = await _categorieService.ObtenirAsync(CategorieId);\r\n\r\n        VersVM(categorieModel);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n    #endregion\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand EnregistrerCommande { get; private set; }\r\n\r\n    public IAsyncRelayCommand ObtenirCommande { get; private set; }\r\n    #endregion   \r\n\r\n    #region M\xe9thodes d'assignation\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s li\xe9es du ViewModel vers les propri\xe9t\xe9s du mod\xe8le\r\n    /// </summary>\r\n    /// <returns>Objet du mod\xe8le</returns>\r\n    private CategorieModel VersModele()\r\n    {\r\n        return new CategorieModel\r\n        {\r\n            CategorieId = this.CategorieId,\r\n            Nom = this.Nom,\r\n            Description = this.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s du mod\xe8le vers les propri\xe9t\xe9s li\xe9es du ViewModel\r\n    /// </summary>\r\n    /// <param name=\"categorieModel\">Mod\xe8le</param>\r\n    private void VersVM(CategorieModel? categorieModel)\r\n    {\r\n        if (categorieModel != null)\r\n        { \r\n            CategorieId = categorieModel.CategorieId;\r\n            Nom = categorieModel.Nom;\r\n            Description = categorieModel.Description;\r\n        }\r\n        else\r\n        {\r\n            CategorieId = 0;\r\n            Nom = string.Empty;\r\n            Description = null;\r\n        }\r\n    }\r\n    #endregion\r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            if (SetProperty(ref _estEnTravail, value))\r\n            {\r\n                ObtenirCommande.NotifyCanExecuteChanged();\r\n                EnregistrerCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    public bool ChampsModifiables\r\n    {\r\n        get\r\n        {\r\n            return _champsModifiables;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _champsModifiables, value);\r\n        }\r\n    }\r\n\r\n    public int CategorieId\r\n    {\r\n        get \r\n        { \r\n            return _categorieId;\r\n        }\r\n        private set\r\n        {\r\n            SetProperty(ref _categorieId, value);\r\n        }\r\n    }\r\n\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nom, value);\r\n        }\r\n    }\r\n\r\n    public string? Description\r\n    {\r\n        get\r\n        {\r\n            return _description;\r\n        }\r\n        set\r\n        {\r\n            //Permet de remplacer une chaine vide par null\r\n            SetProperty(ref _description, string.IsNullOrWhiteSpace(value) ? null : value );\r\n        }\r\n    }\r\n    #endregion\r\n}\n"})})]}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marrez l'application et effectuez un enregistrement. Pendant l'enregistrement, les boutons ne sont pas accessibles."}),"\n",(0,i.jsx)(r.h2,{id:"bouton-nouveau",children:"Bouton Nouveau"}),"\n",(0,i.jsx)(r.p,{children:"Dans une fen\xeatre de gestion, il pourrait \xeatre int\xe9ressant d'ajouter plusieurs \xe9l\xe9ments sans toujours avoir \xe0 revenir \xe0 la liste."}),"\n",(0,i.jsxs)(r.p,{children:["Le bouton ",(0,i.jsx)(r.strong,{children:"Nouveau"})," de la fen\xeatre de gestion permet d'indiquer au ",(0,i.jsx)(r.strong,{children:"ViewModel"})," de se mettre en \xe9tat ",(0,i.jsx)(r.strong,{children:"Ajouter"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Il faut cr\xe9er une nouvelle commande ",(0,i.jsx)(r.strong,{children:"NouveauCommande"})," dans le ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Voici la classe ",(0,i.jsx)(r.strong,{children:"GestionCategorieVM.cs"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 98, la commande est d\xe9clar\xe9e. Elle est en ",(0,i.jsx)(r.strong,{children:"synchrone"}),", car elle n'appelle aucune m\xe9thode ",(0,i.jsx)(r.strong,{children:"asynchrone"}),". Elle effectue seulement la r\xe9initialisation des propri\xe9t\xe9s du ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 87, la m\xe9thode ",(0,i.jsx)(r.strong,{children:"Nouveau()"})," met le champ ",(0,i.jsx)(r.strong,{children:"CategorieId"})," \xe0 z\xe9ro et les autres champs avec leur valeur initiale."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 30, la commande est assign\xe9e \xe0 la m\xe9thode dans le constructeur. La commande \xe0 la m\xeame logique de ",(0,i.jsx)(r.strong,{children:"CanExecute"})," que les autres."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 150, il faut notifier la commande ",(0,i.jsx)(r.strong,{children:"Nouveau"})," que son \xe9tat de ",(0,i.jsx)(r.strong,{children:"CanExecute"})," est modifi\xe9."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.WPF.Views;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue Gestion Categorie\r\n/// </summary>\r\npublic class GestionCategorieVM : BaseVM\r\n{\r\n    #region D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n    #endregion\r\n\r\n    #region Attributs des propri\xe9t\xe9s\r\n    private int _categorieId;\r\n    private string _nom;\r\n    private string? _description;\r\n    private bool _estEnTravail = false;\r\n    private bool _champsModifiables = true;\r\n    #endregion\r\n\r\n    public GestionCategorieVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n\r\n        EnregistrerCommande = new AsyncRelayCommand(EnregistrerAsync, () => !EstEnTravail);\r\n        ObtenirCommande = new AsyncRelayCommand(ObtenirAsync, () => !EstEnTravail);\r\n        //highlight-next-line\r\n        NouveauCommande = new RelayCommand(Nouveau, () => !EstEnTravail);\r\n    }\r\n\r\n    #region M\xe9thodes des commandes\r\n    /// <summary>\r\n    /// Enregistrer la cat\xe9gorie\r\n    /// </summary>    \r\n    private async Task EnregistrerAsync()\r\n    {\r\n        ChampsModifiables = false;\r\n        EstEnTravail = true;\r\n        bool estEnregistre;\r\n\r\n        CategorieModel categorieModel = VersModele();\r\n\r\n        if (categorieModel.CategorieId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n            estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n            estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n        }\r\n\r\n        if (estEnregistre == true)\r\n        {\r\n            VersVM(categorieModel);\r\n        }\r\n        else\r\n        {\r\n        \tthrow new Exception(\"Erreur. Impossible d'enregistrer\");\r\n        }\r\n\r\n        EstEnTravail = false;\r\n        ChampsModifiables = true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la cat\xe9gorie\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private async Task ObtenirAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        CategorieModel? categorieModel = await _categorieService.ObtenirAsync(CategorieId);\r\n\r\n        VersVM(categorieModel);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n//highlight-start\r\n    /// <summary>\r\n    /// Mettre le ViewModel en mode ajouter\r\n    /// </summary>\r\n    private void Nouveau()\r\n    {\r\n        CategorieId = 0;\r\n        Nom = string.Empty;\r\n        Description = null;\r\n    }\r\n    #endregion\r\n//highlight-end\r\n\r\n    #region Commandes\r\n    public IAsyncRelayCommand EnregistrerCommande { get; private set; }\r\n    public IAsyncRelayCommand ObtenirCommande { get; private set; }\r\n//highlight-next-line\r\n    public IRelayCommand NouveauCommande { get; private set; }\r\n    #endregion   \r\n\r\n    #region M\xe9thodes d'assignation\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s li\xe9es du ViewModel vers les propri\xe9t\xe9s du mod\xe8le\r\n    /// </summary>\r\n    /// <returns>Objet du mod\xe8le</returns>\r\n    private CategorieModel VersModele()\r\n    {\r\n        return new CategorieModel\r\n        {\r\n            CategorieId = this.CategorieId,\r\n            Nom = this.Nom,\r\n            Description = this.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner les propri\xe9t\xe9s du mod\xe8le vers les propri\xe9t\xe9s li\xe9es du ViewModel\r\n    /// </summary>\r\n    /// <param name=\"categorieModel\">Mod\xe8le</param>\r\n    private void VersVM(CategorieModel? categorieModel)\r\n    {\r\n        if (categorieModel != null)\r\n        { \r\n            CategorieId = categorieModel.CategorieId;\r\n            Nom = categorieModel.Nom;\r\n            Description = categorieModel.Description;\r\n        }\r\n        else\r\n        {\r\n            CategorieId = 0;\r\n            Nom = string.Empty;\r\n            Description = null;\r\n        }\r\n    }\r\n    #endregion\r\n\r\n    #region Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            if (SetProperty(ref _estEnTravail, value))\r\n            {\r\n                ObtenirCommande.NotifyCanExecuteChanged();\r\n                EnregistrerCommande.NotifyCanExecuteChanged();\r\n                //highlight-next-line\r\n                NouveauCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n    public bool ChampsModifiables\r\n    {\r\n        get\r\n        {\r\n            return _champsModifiables;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _champsModifiables, value);\r\n        }\r\n    }\r\n\r\n    public int CategorieId\r\n    {\r\n        get \r\n        { \r\n            return _categorieId;\r\n        }\r\n        private set\r\n        {\r\n            SetProperty(ref _categorieId, value);\r\n        }\r\n    }\r\n\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _nom, value);\r\n        }\r\n    }\r\n\r\n    public string? Description\r\n    {\r\n        get\r\n        {\r\n            return _description;\r\n        }\r\n        set\r\n        {\r\n            //Permet de remplacer une chaine vide par null\r\n            SetProperty(ref _description, string.IsNullOrWhiteSpace(value) ? null : value );\r\n        }\r\n    }\r\n    #endregion\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Et ajouter le binding dans ",(0,i.jsx)(r.strong,{children:"UcGestionCategorie.xaml"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",children:'<Button Content="N" ToolTip="Nouveau"\r\n        Margin="5" Width="32" Height="32" \r\n        Command="{Binding NouveauCommande}"/>\n'})}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marez le programme, inscrivez du texte dans un des champs et appuyez sur Nouveau. Le texte devrait disparaitre."})]})}function g(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>s,a:()=>a});var i=n(7294);const t={},o=i.createContext(t);function a(e){const r=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);