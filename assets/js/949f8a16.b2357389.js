"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[2437],{2668:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var r=i(5893),s=i(1151);const t={sidebar_position:2},o="Principes SOLID",a={id:"Entity Framework/solid",title:"Principes SOLID",description:"Les principes SOLID sont 5 principes qui permettent d'avoir une meilleure conception des logiciels.",source:"@site/docs/30-Entity Framework/solid.md",sourceDirName:"30-Entity Framework",slug:"/Entity Framework/solid",permalink:"/4N1_2024/docs/Entity Framework/solid",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"NotesSidebar",previous:{title:"Exercices requ\xeates en LINQ",permalink:"/4N1_2024/docs/LINQ/exercice_requete_linq"},next:{title:"Cr\xe9ation de la BD",permalink:"/4N1_2024/docs/Entity Framework/EF_creation_bd"}},c={},l=[{value:"Parenth\xe8se sur la substitution de Liskov",id:"parenth\xe8se-sur-la-substitution-de-liskov",level:2}];function u(e){const n={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"principes-solid",children:"Principes SOLID"}),"\n",(0,r.jsxs)(n.p,{children:["Les principes ",(0,r.jsx)(n.strong,{children:"SOLID"})," sont 5 principes qui permettent d'avoir une meilleure conception des logiciels."]}),"\n",(0,r.jsxs)(n.p,{children:["Voici l'explication r\xe9sum\xe9e des principes selon la page Wikip\xe9dia : ",(0,r.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/SOLID_(informatique)",children:"https://fr.wikipedia.org/wiki/SOLID_(informatique)"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Responsabilit\xe9 unique (Single responsibility principle)"}),"\r\nUne classe, une fonction ou une m\xe9thode doit avoir une et une seule responsabilit\xe9."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ouvert/ferm\xe9 (Open/closed principle)"}),"\r\nUne entit\xe9 applicative (classe, fonction, module ...) doit \xeatre ferm\xe9e \xe0 la modification directe, mais ouverte \xe0 l'extension."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Substitution de Liskov (Liskov substitution principle)"}),"\r\nUne instance de type T doit pouvoir \xeatre remplac\xe9e par une instance de type G, tel que G sous-type de T, sans que cela ne modifie la coh\xe9rence du programme."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S\xe9gr\xe9gation des interfaces (Interface segregation principle)"}),"\r\nPr\xe9f\xe9rer plusieurs interfaces sp\xe9cifiques pour chaque client plut\xf4t qu'une seule interface g\xe9n\xe9rale."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inversion des d\xe9pendances (Dependency inversion principle)"}),"\r\nIl faut d\xe9pendre des abstractions, pas des impl\xe9mentations"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Certaines techniques pr\xe9sent\xe9es dans ce cours r\xe9f\xe8reront \xe0 l'un des principes ",(0,r.jsx)(n.strong,{children:"SOLID"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"parenth\xe8se-sur-la-substitution-de-liskov",children:"Parenth\xe8se sur la substitution de Liskov"}),"\n",(0,r.jsx)(n.p,{children:"Est-ce qu'un carr\xe9 est une sous-classe de rectangle ?"}),"\n",(0,r.jsx)(n.p,{children:"Si oui, alors on pourrait utiliser un carr\xe9 partout o\xf9 un rectangle est requis."}),"\n",(0,r.jsx)(n.p,{children:"Mais imaginons le sc\xe9nario suivant:"}),"\n",(0,r.jsx)(n.p,{children:"La classe Rectangle d\xe9fini les m\xe9thodes setLargeur(int) et setHauteur(int)"}),"\n",(0,r.jsx)(n.p,{children:"Alors je peux \xe9crire"}),"\n",(0,r.jsx)(n.p,{children:"Rectangle r = new Rectangle();"}),"\n",(0,r.jsx)(n.p,{children:"r.setLargeur(3);"}),"\n",(0,r.jsx)(n.p,{children:"r.setHauteur(5);"}),"\n",(0,r.jsx)(n.p,{children:"int aire  = r.getLargeur() * r.getHauteur();"}),"\n",(0,r.jsx)(n.p,{children:"et m'attendre que aire sera 15."}),"\n",(0,r.jsx)(n.p,{children:"Mais pour un carr\xe9, si je set la hauteur ou la largeur, je dois changer l'autre dimension aussi, sinon ce n'est plus un carr\xe9.\r\nSi je remplace r par un carr\xe9, alors getLargeur * getHauteur  donnera 25 car le setHauteur aura changer la largeur aussi."}),"\n",(0,r.jsx)(n.p,{children:"Donc d\xe9finir carr\xe9 comme une sous-classe de rectangle ne respecte pas Liskov."})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var r=i(7294);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);