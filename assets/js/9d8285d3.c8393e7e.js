"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[7139],{9190:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=r(5893),i=r(1151);const t={sidebar_position:230,draft:!1},a="Liste des cat\xe9gories",o={id:"WPF partie 2/lister_categorie",title:"Liste des cat\xe9gories",description:"Cette section utilise les techniques apprises dans la section pr\xe9c\xe9dente afin de faire l'affichage des cat\xe9gories dans SuperCarte (Le R du CRUD).",source:"@site/docs/72-WPF partie 2/lister_categorie.md",sourceDirName:"72-WPF partie 2",slug:"/WPF partie 2/lister_categorie",permalink:"/4N1_2024/docs/WPF partie 2/lister_categorie",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:230,frontMatter:{sidebar_position:230,draft:!1},sidebar:"NotesSidebar",previous:{title:"Seed Categorie, Ensemble, Carte",permalink:"/4N1_2024/docs/WPF partie 2/seed"},next:{title:"Barre d'activit\xe9",permalink:"/4N1_2024/docs/WPF partie 2/barre_activite"}},l={},c=[{value:"SuperCarte.Core",id:"supercartecore",level:2},{value:"Mod\xe8le du domaine",id:"mod\xe8le-du-domaine",level:3},{value:"Classe d&#39;extension - CategorieMapExtensions",id:"classe-dextension---categoriemapextensions",level:3},{value:"Cr\xe9ation du service - CategorieService",id:"cr\xe9ation-du-service---categorieservice",level:3},{value:"Th\xe9orie sur le <strong>async Task</strong>",id:"th\xe9orie-sur-le-async-task",level:2},{value:"Projet SuperCarte.WPF",id:"projet-supercartewpf",level:2},{value:"Enregistrement du service - SCServiceExtensions",id:"enregistrement-du-service---scserviceextensions",level:3},{value:"Ajout de r\xe9f\xe9rences dans Usings.cs",id:"ajout-de-r\xe9f\xe9rences-dans-usingscs",level:3},{value:"Cr\xe9ation du ViewModel - ListeCategoriesVM",id:"cr\xe9ation-du-viewmodel---listecategoriesvm",level:3},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions",level:3},{value:"Cr\xe9ation de la vue - UcListeCategories.xaml",id:"cr\xe9ation-de-la-vue---uclistecategoriesxaml",level:3},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",level:3},{value:"MainWindowVM",id:"mainwindowvm",level:2},{value:"Chargement automatique",id:"chargement-automatique",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"liste-des-cat\xe9gories",children:"Liste des cat\xe9gories"}),"\n",(0,s.jsx)(n.p,{children:"Cette section utilise les techniques apprises dans la section pr\xe9c\xe9dente afin de faire l'affichage des cat\xe9gories dans SuperCarte (Le R du CRUD)."}),"\n",(0,s.jsx)(n.p,{children:"Nous commencons par cat\xe9gorie car cette entit\xe9 n'a pas de FK. Elle est donc facile \xe0 afficher."}),"\n",(0,s.jsxs)(n.p,{children:["La premi\xe8re interface utilisateur \xe0 effectuer sera de lister les enregistrements de la table ",(0,s.jsx)(n.strong,{children:"Cat\xe9gorie"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La liste sera un ",(0,s.jsx)(n.strong,{children:"DataGrid"}),". Il faut afficher \xe0 l'utilisateur la cl\xe9, le nom et la description dans la grille."]}),"\n",(0,s.jsx)(n.h2,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,s.jsx)(n.h3,{id:"mod\xe8le-du-domaine",children:"Mod\xe8le du domaine"}),"\n",(0,s.jsxs)(n.p,{children:["Dans le projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.Core"}),", il faut cr\xe9er la classe ",(0,s.jsx)(n.strong,{children:"CategorieModel.cs"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Models"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Commencez par cr\xe9er le dossier ",(0,s.jsx)(n.strong,{children:"Models"})," s'il n'est pas d\xe9j\xe0 l\xe0."]}),"\n",(0,s.jsx)(n.p,{children:"La classe contient les 3 propri\xe9t\xe9s n\xe9cessaires pour effectuer des actions dans le logiciel."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une cat\xe9gorie\r\n/// </summary>\r\npublic class CategorieModel\r\n{\r\n    public int CategorieId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string? Description { get; set; }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"classe-dextension---categoriemapextensions",children:"Classe d'extension - CategorieMapExtensions"}),"\n",(0,s.jsxs)(n.p,{children:["L'application WPF utilise des mod\xe8les du domaine, alors que EF utilise des mod\xe8les de donn\xe9es. Le projet Core fait le lien entre ces deux projets. Afin de faire les transformations, des extensions seront utilis\xe9es.\r\nLes extensions seront associ\xe9es au mod\xe8le du domaine dans Core. Que la conversion s'effectue de ",(0,s.jsx)(n.strong,{children:"Mod\xe8le de donn\xe9es -> Mod\xe8le du domaine"})," ou \xe0 l'inverse ",(0,s.jsx)(n.strong,{children:"Mod\xe8le du domaine -> Mod\xe8le de donn\xe9es"}),", elles seront dans la classe d'extension du ",(0,s.jsx)(n.strong,{children:"Mod\xe8le du domaine"})," (",(0,s.jsx)(n.strong,{children:"CategorieModel"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut faire la m\xe9thode qui r\xe9cup\xe8rera la liste de ",(0,s.jsx)(n.strong,{children:"Categorie"})," (mod\xe8le de donn\xe9e dans EF) et la convertira en ",(0,s.jsx)(n.strong,{children:"CategorieModel"})," (mod\xe8le du domaine dans Core)."]}),"\n",(0,s.jsxs)(n.p,{children:["Il y a \xe9galement la version pour les ",(0,s.jsx)(n.strong,{children:"List<>"}),". ",(0,s.jsx)(n.strong,{children:"Linq"})," est utilis\xe9 pour transformer la liste au lieu d'utiliser une boucle."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"CategorieMapExtensions.cs"})," dans le r\xe9pertoire ",(0,s.jsx)(n.strong,{children:"Core/Extensions"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Extensions;\r\n\r\n/// <summary>\r\n/// Classe statique qui regroupe les m\xe9thodes d'extension pour la conversion (mapping) du mod\xe8le Categorie\r\n/// </summary>\r\npublic static class CategorieMapExtension\r\n{\r\n    /// <summary>\r\n    /// Convertir un objet Categorie vers un objet CategorieModel\r\n    /// </summary>\r\n    /// <param name=\"item\">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static CategorieModel VersCategorieModel(this Categorie item)\r\n    {\r\n        return new CategorieModel()\r\n        {\r\n            CategorieId = item.CategorieId,\r\n            Nom = item.Nom,\r\n            Description = item.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir une liste d'objet Categorie vers une liste d'objet CategorieModel\r\n    /// </summary>\r\n    /// <param name=\"lstItem\">Liste d'objet \xe0 convertir</param>\r\n    /// <returns>Liste d'objet converti</returns>\r\n    public static List<CategorieModel> VersCategorieModel(this List<Categorie> lstItem)\r\n    {\r\n        return lstItem.Select(i => i.VersCategorieModel()).ToList();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir un objet CategorieModel vers un objet Categorie\r\n    /// </summary>\r\n    /// <param name=\"item\">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static Categorie VersCategorie(this CategorieModel item) \r\n    {\r\n        return new Categorie()\r\n        {\r\n            CategorieId = item.CategorieId,\r\n            Nom = item.Nom,\r\n            Description = item.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir une liste d'objet CategorieModel vers une liste d'objet Categorie\r\n    /// </summary>\r\n    /// <param name=\"lstItem\">Liste d'objet \xe0 convertir</param>\r\n    /// <returns>Liste d'objet converti</returns>\r\n    public static List<Categorie> VersCategorieModel(this List<CategorieModel> lstItem)\r\n    {\r\n        return lstItem.Select(i => i.VersCategorie()).ToList();\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cr\xe9ation-du-service---categorieservice",children:"Cr\xe9ation du service - CategorieService"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut cr\xe9er la classe qui s'occupera de la logique de conversion mod\xe8le de domaine ",(0,s.jsx)(n.strong,{children:"CategorieModel"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"ICategorieService.cs"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Services"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic interface ICategorieService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste de cat\xe9gories</returns>\r\n\t//highlight-next-line\r\n    Task<List<CategorieModel>> ObtenirListeAsync();\r\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Remarquez que la m\xe9thode a le suffixe ",(0,s.jsx)(n.strong,{children:"Async"})," et le type de retour un ",(0,s.jsx)(n.strong,{children:"Task<CategorieModel>"}),", car elle sera impl\xe9ment\xe9e en asynchrone."]})}),"\n",(0,s.jsxs)(n.p,{children:["Est-ce n\xe9cessaire de faire \xe9galement la version ",(0,s.jsx)(n.strong,{children:"synchrone"})," ? C'est un choix de conception. Il y en a qui pr\xe9f\xe8re de couvrir les 2 cas en m\xeame temps et d'autres de seulement cr\xe9er la version qui sera n\xe9cessaire. Pour ce travail,nous allons cr\xe9er uniquement celles qui sont n\xe9cessaires. Lorsqu'une m\xe9thode est cr\xe9\xe9e, elle doit g\xe9n\xe9ralement \xeatre test\xe9e. Si elle n'est pas utilis\xe9e dans le programme, il faudra tout de m\xeame la tester. Il y a un co\xfbt pour  la r\xe9alisation des tests, donc si une m\xe9thode n'est pas n\xe9cessaire, il est pr\xe9f\xe9rable de ne pas l'\xe9crire. C'est l'approche ",(0,s.jsx)(n.strong,{children:"YAGNI (You ain't gonna need it)"})," ou en fran\xe7ais ",(0,s.jsx)(n.strong,{children:"(Vous n'en aurez pas besoin"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la classe ",(0,s.jsx)(n.strong,{children:"BaseRepo"}),", les 2 versions ont \xe9t\xe9 pr\xe9vues, car c'est une classe de base, tous les cas seront utilis\xe9s rapidement lors de la r\xe9alisation de l'application."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"CategorieService.cs"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Services"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic class CategorieService : ICategorieService\r\n{\r\n    private readonly ICategorieRepo _categorieRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieRepo">Repository Categorie</param>\r\n    public CategorieService(ICategorieRepo categorieRepo)\r\n    {\r\n        _categorieRepo = categorieRepo;\r\n    }\r\n    \r\n    public async Task<List<CategorieModel>> ObtenirListeAsync()\r\n    {\r\n        return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"th\xe9orie-sur-le-async-task",children:["Th\xe9orie sur le ",(0,s.jsx)(n.strong,{children:"async Task"})]}),"\n",(0,s.jsxs)(n.p,{children:["Pour comprendre un peu le fonctionnement de la combinaison ",(0,s.jsx)(n.strong,{children:"async Task"})," , voici des exemples de code. ",(0,s.jsx)(n.strong,{children:"Veuillez ne pas les reproduire."})]}),"\n",(0,s.jsxs)(n.p,{children:["Pour \xeatre en mesure d'utiliser une m\xe9thode ",(0,s.jsx)(n.strong,{children:"asynchrone"}),", il faut que la chaine soit compl\xe8tement en ",(0,s.jsx)(n.strong,{children:"asynchrone"}),". Il est important qu'une m\xe9thode qui est ",(0,s.jsx)(n.strong,{children:"async"})," appelle des m\xe9thodes ",(0,s.jsx)(n.strong,{children:"async"}),", sinon le lien sera bris\xe9 et il aura un avertissement du compilateur."]}),"\n",(0,s.jsxs)(n.p,{children:["Lorsqu'on appelle une m\xe9thode ",(0,s.jsx)(n.strong,{children:"async"}),", elle doit retourner une ",(0,s.jsx)(n.strong,{children:"t\xe2che"})," de type ",(0,s.jsx)(n.strong,{children:"Task"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"En r\xe9alit\xe9, la m\xe9thode cr\xe9e une t\xe2che dans un nouveau processus. La t\xe2che ex\xe9cute la m\xe9thode sous-jacente pour faire le travail."}),"\n",(0,s.jsxs)(n.p,{children:["Dans l'exemple ci-dessous, la t\xe2che s'ex\xe9cute dans un nouveau processus et le processus courant continue \xe0 effectuer les op\xe9rations 1, et 2. et 3. Les 2 processus (",(0,s.jsx)(n.strong,{children:"ObtenirListeAsync"})," et les 3 op\xe9rations) s'ex\xe9cutent en parall\xe8le. Lorsqu'il arrive au ",(0,s.jsx)(n.strong,{children:"return"}),", \xe7a ne veut pas dire que la sous-t\xe2che ",(0,s.jsx)(n.strong,{children:"ObtenirListeAsync"})," est termin\xe9e. ",(0,s.jsx)(n.strong,{children:"Il va donc avoir une exception."})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"Task<List<Categorie>> task = _categorieRepo.ObtenirListeAsync();\r\n\r\n//Operation 1\r\n\r\n//Operation 2\r\n\r\n//Operation 3\r\n\r\nreturn task.Result.VersCategorieModel();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il faut \xeatre en mesure de r\xe9cup\xe9rer la valeur de la sous-m\xe9thode ",(0,s.jsx)(n.strong,{children:"VersCategorieModel"}),". Pour pouvoir le faire, il faut attendre le processus avant de r\xe9cup\xe9rer sa valeur."]}),"\n",(0,s.jsx)(n.p,{children:"II est possible de travailler en parall\xe8le. La sous-t\xe2che s'ex\xe9cute et les autres op\xe9rations se poursuivent."}),"\n",(0,s.jsx)(n.p,{children:"\xc0 un certain moment dans le processus parent, il faut attendre la sous-t\xe2che pour s'assurer qu'elle soit termin\xe9e."}),"\n",(0,s.jsxs)(n.p,{children:["Dans l'exemple ci-dessous, l'op\xe9ration 1 et 2 s'ex\xe9cute en parall\xe8le avec ",(0,s.jsx)(n.strong,{children:"ObtenirListeAsync"})," et avant d'ex\xe9cuter l'op\xe9ration 3, il faut que la sous-t\xe2che soit termin\xe9e."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Task<List<Categorie>> task = _categorieRepo.ObtenirListeAsync();\r\n\r\n//Operation 1\r\n\r\n//Operation 2\r\n\r\ntask.Wait(); //On attend que la sous-t\xe2che soit termin\xe9e.\r\n\r\n//Operation 3\r\n\r\nreturn task.Result.VersCategorieModel();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, il faut s'assurer que les autres op\xe9rations n'entrent pas en conflit et sont ",(0,s.jsx)(n.strong,{children:"Thread Safe"}),". Une instance de ",(0,s.jsx)(n.strong,{children:"DbContext"}),"  n'est pas ",(0,s.jsx)(n.strong,{children:"Thread Safe"}),". Un seul processus peut utiliser une instance de contexte \xe0 la fois."]}),"\n",(0,s.jsxs)(n.p,{children:["Le code ci-dessous va g\xe9n\xe9rer une exception. C'est l'instance du contexte qui n'est pas ",(0,s.jsx)(n.strong,{children:"Thread Safe"})," et non la base de donn\xe9es. Si 2 utilisateurs utilisent le programme, ils seront dans leur propre processus et ils auront leur propre instance de contexte."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"Task<List<Categorie>> task1 = _categorieRepo.ObtenirListeAsync();\r\n\r\nTask<List<Categorie>> task2 = _categorieRepo.ObtenirListeAsync();\r\n//Operation 1\r\n\r\n//Operation 2\r\n\r\ntask1.Wait();\r\ntask2.Wait();\r\n\r\n//Operation 3\r\n\r\nreturn task1.Result.VersCategorieModel();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour revenir avec le mot-cl\xe9 ",(0,s.jsx)(n.strong,{children:"await"}),". Les 2 exemples sont \xe9quivalents. Le ",(0,s.jsx)(n.strong,{children:"await"})," permet de le faire en une seule ligne."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"Task<List<Categorie>> task = _categorieRepo.ObtenirListeAsync();\r\n        \r\ntask.Wait();       \r\n\r\nreturn task.Result.VersCategorieModel();\r\n\r\n// le code ci-dessus est \xe9quivalent \xe0 cette ligne\r\nreturn (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez \xe9galement que le ",(0,s.jsx)(n.strong,{children:"await"})," est entre parenth\xe8ses avant d'utiliser l'extension."]}),"\n",(0,s.jsxs)(n.p,{children:["Le code suivant n'est pas l\xe9gal car ",(0,s.jsx)(n.strong,{children:"_categorieRepo.ObtenirListeAsync()"})," retourne un objet ",(0,s.jsx)(n.strong,{children:"Task<List<Categorie>>"})," et non un objet ",(0,s.jsx)(n.strong,{children:"List<Categorie>"}),". La m\xe9thode d'extension ",(0,s.jsx)(n.strong,{children:"VersCategorieModel"})," est disponible sur le type ",(0,s.jsx)(n.strong,{children:"List<Categorie>"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:'title="Ill\xe9gal" ',children:"return await _categorieRepo.ObtenirListeAsync().VersCategorieModel();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["C'est le ",(0,s.jsx)(n.strong,{children:"await _categorieRepo.ObtenirListeAsync()"})," qui retourne un objet ",(0,s.jsx)(n.strong,{children:"List<Categorie>"}),". S'il faut utiliser une m\xe9thode sur ",(0,s.jsx)(n.strong,{children:"List<Categorie>"}),", il faut regrouper ",(0,s.jsx)(n.strong,{children:"await"})," et la t\xe2che avec des parenth\xe8ses."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Pour le rendre plus visuel, il serait possible de faire ceci."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"List<Categorie> lstCategorie = await _categorieRepo.ObtenirListeAsync(); //\xc9quivalent \xe0 (await _categorieRepo.ObtenirListeAsync())\r\n\r\nreturn lstCategorie.VersCategorieModel(); //\xc9quivalent \xe0 (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"projet-supercartewpf",children:"Projet SuperCarte.WPF"}),"\n",(0,s.jsx)(n.h3,{id:"enregistrement-du-service---scserviceextensions",children:"Enregistrement du service - SCServiceExtensions"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut enregistrer le service dans la classe ",(0,s.jsx)(n.strong,{children:"SCServiceExtensions"})," du  r\xe9pertoire ",(0,s.jsx)(n.strong,{children:"Extensions/ServiceCollections"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Service\r\n/// </summary>\r\npublic static class SCServiceExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les services de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerServices(this IServiceCollection services)\r\n    {\r\n        //highlight-next-line\r\n              services.AddScoped<ICategorieService, CategorieService>();\r\n      \r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le service est \xe9galement enregistr\xe9 en ",(0,s.jsx)(n.strong,{children:"Scoped"})," pour permettre d'utiliser la m\xeame instance dans le programme dans le m\xeame ",(0,s.jsx)(n.strong,{children:"scope"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,s.jsxs)(n.p,{children:["Si ce n'est pas d\xe9j\xe0 fait, ajoutez l'appel \xe0 ",(0,s.jsx)(n.strong,{children:"EnregistrerServices"})," dans ",(0,s.jsx)(n.strong,{children:"App.xaml.cs/App"})]})}),"\n",(0,s.jsx)(n.h3,{id:"ajout-de-r\xe9f\xe9rences-dans-usingscs",children:"Ajout de r\xe9f\xe9rences dans Usings.cs"}),"\n",(0,s.jsxs)(n.p,{children:["Ajoutez les r\xe9f\xe9rences ci-dessous dans le fichier ",(0,s.jsx)(n.strong,{children:"Usings.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"global using SuperCarte.Core.Services;\r\nglobal using SuperCarte.Core.Models;\r\nglobal using SuperCarte.WPF.ViewModels;\r\nglobal using SuperCarte.WPF.ViewModels.Bases;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cr\xe9ation-du-viewmodel---listecategoriesvm",children:"Cr\xe9ation du ViewModel - ListeCategoriesVM"}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:"CategorieService"})," est maintenant cr\xe9\xe9, il faut maintenant cr\xe9er le ",(0,s.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"ListeCategoriesVM.cs"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"ViewModels"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Premi\xe8rement, il faut d\xe9finir les \xe9l\xe9ments que la ",(0,s.jsx)(n.strong,{children:"Vue"})," a besoin de connaitre pour fonctionner."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour la liste des cat\xe9gories, il faut une ",(0,s.jsx)(n.strong,{children:"List<CategorieModel>"})," \xe0 la ligne 14. Cette liste sera affich\xe9e \xe0 l'utilisateur. Le choix de comment l'afficher sera dans la vue."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut \xe9galement la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"CategorieSelection"})," pour connaitre la cat\xe9gorie qui est s\xe9lectionn\xe9e dans la liste (ligne 52). En ",(0,s.jsx)(n.strong,{children:"MVVM"}),", il n'est pas possible d'utiliser une propri\xe9t\xe9 auto-impl\xe9ment\xe9e si elle est li\xe9e \xe0 la vue, car il faut de notifier le changement de valeur (ligne 60). Il faut donc de la logique dans le ",(0,s.jsx)(n.strong,{children:"set"}),". Lorsqu'il y a de la logique, il faut utiliser un attribut pour contenir la valeur de la propri\xe9t\xe9 (ligne 15)."]}),"\n",(0,s.jsx)(n.p,{children:"Ensuite, il faut injecter les d\xe9pendances \xe0 la ligne 11, car les cat\xe9gories seront obtenues par le service."}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, il faut penser aux commandes. La liste doit se rafraichir. Cette commande doit \xeatre ",(0,s.jsx)(n.strong,{children:"asynchrone"}),". Cette commande se nomme ",(0,s.jsx)(n.strong,{children:"ObtenirListeCommande"}),". La propri\xe9t\xe9 de la commande est \xe0 la ligne 37. Les commandes doivent avoir le suffixe ",(0,s.jsx)(n.strong,{children:"Commande"}),". La commande doit utiliser un verbe d'action dans la mesure du possible."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode que la commande utilise est \xe0 la ligne 31. Par convention, la m\xe9thode doit avoir le m\xeame nom que la commande sans le mot ",(0,s.jsx)(n.em,{children:"Commande"})," en suffix (",(0,s.jsx)(n.strong,{children:"ObtenirListeCommande"})," devient ",(0,s.jsx)(n.strong,{children:"ObtenirListeAsync"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"\xc0 la ligne 25, la commande est cr\xe9\xe9e dans le constructeur."}),"\n",(0,s.jsx)(n.p,{children:"Il est important d'assigner la liste par la propri\xe9t\xe9 et jamais par l'attribut. Car la propri\xe9t\xe9 contient la m\xe9canique de notification."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    //highlight-next-line\r\n    private readonly ICategorieService _categorieService;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    //highlight-next-line\r\n    private List<CategorieModel>? _lstCategories;\r\n    //highlight-next-line\r\n    private CategorieModel? _categorieSelection;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieService">Service du mod\xe8le Categorie</param>\r\n    public ListeCategoriesVM(ICategorieService categorieService)\r\n    {\r\n        _categorieService = categorieService;\r\n\r\n//highlight-next-line\r\n        ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    //highlight-next-line\r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        ListeCategories = await _categorieService.ObtenirListeAsync();\r\n    }\r\n\r\n    //Commandes\r\n    //highlight-next-line\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        {\r\n            return _lstCategories;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }\r\n    }\r\n\r\n//highlight-next-line\r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n            //highlight-next-line\r\n            SetProperty(ref _categorieSelection, value);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"enregistrer-le-viewmodel---scviewmodelextensions",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,s.jsxs)(n.p,{children:["Dans la classe ",(0,s.jsx)(n.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,s.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n{\r\n    services.AddTransient<MainWindowVM>();\r\n\t//highlight-next-line\r\n    services.AddTransient<ListeCategoriesVM>();\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cr\xe9ation-de-la-vue---uclistecategoriesxaml",children:"Cr\xe9ation de la vue - UcListeCategories.xaml"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF/Views"})," si n\xe9cessaire."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un ",(0,s.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"})," nomm\xe9 ",(0,s.jsx)(n.strong,{children:"UcListeCategories.xaml"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Views"}),". Le mod\xe8le se retrouve dans la section ",(0,s.jsx)(n.strong,{children:"WPF"})," \xe0 gauche."]}),"\n",(0,s.jsxs)(n.p,{children:["Toutes les ",(0,s.jsx)(n.strong,{children:"Vues"})," seront du type  ",(0,s.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n    //highlight-next-line\r\n        <Grid.RowDefinitions>\r\n             \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>           \r\n        \r\n         \x3c!--Rang\xe9e 0--\x3e\r\n         //highlight-next-line\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Liste des cat\xe9gories"/>\r\n        \r\n        //highlight-next-line\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n            \r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="\xc9diter"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    //highlight-next-line\r\n                    Command="{Binding ObtenirListeCommande}" />\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        //highlight-start\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" \r\n                  IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCategories}"\r\n                  SelectedItem="{Binding CategorieSelection}">\r\n                  //highlight-end\r\n            <DataGrid.Columns>\r\n            //highlight-start\r\n                <DataGridTextColumn Header="Id"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CategorieId}"/>\r\n                                    //highlight-end\r\n                \r\n                <DataGridTextColumn Header="Nom"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="Description"                                    \r\n                                    Binding="{Binding Description}"\r\n                                    MinWidth="300"\r\n                                    //highlight-next-line\r\n                                    Width="*"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \r\n        \x3c!--Rang\xe9e 3--\x3e\r\n\r\n    </Grid>\r\n</UserControl>\r\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La premi\xe8re \xe9tape consiste \xe0 indiquer le ",(0,s.jsx)(n.strong,{children:"ViewModel"})," qui sera utilis\xe9. Ce n'est pas obligatoire, mais en ajoutant les lignes 7 et 8, il sera possible d'avoir des suggestions lors du ",(0,s.jsx)(n.strong,{children:"Binding"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"La deuxi\xe8me \xe9tape consiste \xe0 cr\xe9er une disposition (ligne 12 \xe0 21)"}),"\n",(0,s.jsx)(n.p,{children:"La vue aura 4 rang\xe9es."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"La premi\xe8re rang\xe9e (0) contiendra le titre de la vue. La hauteur est automatique."}),"\n",(0,s.jsxs)(n.li,{children:["La deuxi\xe8me rang\xe9e (1) contiendra la liste des boutons ",(0,s.jsx)(n.strong,{children:"Nouveau"}),", ",(0,s.jsx)(n.strong,{children:"\xc9dition"}),", ",(0,s.jsx)(n.strong,{children:"Supprimer"})," et ",(0,s.jsx)(n.strong,{children:"Rafraichir"}),". La hauteur est automatique."]}),"\n",(0,s.jsxs)(n.li,{children:["La troisi\xe8me rang\xe9e (2) contiendra le ",(0,s.jsx)(n.strong,{children:"DataGrid"}),". La hauteur est ",(0,s.jsx)(n.strong,{children:"*"}),". Elle va prendre tout l'espace restant de la vue."]}),"\n",(0,s.jsx)(n.li,{children:"La quatri\xe8me rang\xe9e (3) contiendra la barre de chargement d'une hauteur de 20."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, il faut cr\xe9er le titre. Le composant ",(0,s.jsx)(n.strong,{children:"<TextBloc>"})," sera utilis\xe9 (ligne24) . Se composant permet d'afficher du texte facilement. Il prend tout l'espace disponible, donc en le centrant verticalement et horizontalement, il restera toujours en centre en fonction de la grosseur de la fen\xeatre."]}),"\n",(0,s.jsxs)(n.p,{children:["Contrairement au ",(0,s.jsx)(n.strong,{children:"<div>"})," en ",(0,s.jsx)(n.strong,{children:"HTML"}),", le syst\xe8me de ",(0,s.jsx)(n.strong,{children:"Grid"})," n'a pas de balise encapsul\xe9e. Il faut sp\xe9cifier l'emplacement avec la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"Grid.Row"}),". L'ajout de commentaires (ligne 30) permet de mieux voir la s\xe9paration des composants dans le ",(0,s.jsx)(n.strong,{children:"Grid"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 40, le bouton ",(0,s.jsx)(n.strong,{children:"Rafraichir"})," est li\xe9 \xe0 la commande ",(0,s.jsx)(n.strong,{children:"ObtenirListeCommande"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Si les lignes 7 et 8 ne sont pas inscrites, il n'y aura pas d'autosuggestion apr\xe8s ",(0,s.jsx)(n.strong,{children:"{Binding}"})," Le risque de se tromper est plus grand."]}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, il faut ajouter le ",(0,s.jsx)(n.strong,{children:"DataGrid"})," (ligne 46 \xe0 67 ). Le ",(0,s.jsx)(n.strong,{children:"DataGrid"})," peut autog\xe9n\xe9r\xe9 les colonnes en fonction des propri\xe9t\xe9s."]}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, il ne sera pas possible de faire des ajustements si ce mode est activ\xe9. \xc0 la ligne 47 du code ci-dessous, la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"AutoGenerateColumns=false"})," d\xe9sactive ce mode."]}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:'SelectionMode="Single"'})," permet de s\xe9lectionner une seule ligne \xe0 la fois."]}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:'IsReadOnly="True"'})," rend la grille non \xe9ditable. Il est possible d'avoir des designs qui permettent de modifier des valeurs directement dans une grille et de sauvegarder l'ensemble."]}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:'ItemsSource="{Binding ListeCategories}"'})," indique la propri\xe9t\xe9 du ",(0,s.jsx)(n.strong,{children:"ViewModel"})," qui contient la source des donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:'SelectedItem="{Binding CategorieSelection}"'})," permet d'indiquer la propri\xe9t\xe9 qui aura la r\xe9f\xe9rence de la propri\xe9t\xe9 s\xe9lectionn\xe9e."]}),"\n",(0,s.jsx)(n.p,{children:"Il faut ensuite d\xe9clarer les colonnes."}),"\n",(0,s.jsxs)(n.p,{children:["Toutes les colonnes sont du texte, car m\xeame le ",(0,s.jsx)(n.strong,{children:"Id"})," sera transform\xe9 en texte. Elles sont toutes du type ",(0,s.jsx)(n.strong,{children:"<DataGridTextColumn>"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"Header"})," est pour le nom de la colonne. La propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"Binding"})," est pour indiquer la propri\xe9t\xe9 \xe0 utiliser dans la classe ",(0,s.jsx)(n.strong,{children:"CategorieModel"}),". Il n'est pas obligatoire de cr\xe9er syst\xe9matiquement une colonne par propri\xe9t\xe9, par exemple la cl\xe9 pourrait \xeatre masqu\xe9e \xe0 l'utilisateur."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 61, la largeur de la colonne est ",(0,s.jsx)(n.strong,{children:'Width="*"'}),", ce qui indique qu'elle prendra l'espace restant. Si l'espace restant est plus petit que 300, la colonne restera \xe0 300, car la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:'MinWidth="300"'})," (ligne 58)."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Pour le tp3, pourquoi ne pas faire un d\xe9tour \xe0 la section ",(0,s.jsx)(n.strong,{children:"Localisation de .xaml"})," imm\xe9diatement..."]})}),"\n",(0,s.jsx)(n.h3,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,s.jsx)(n.strong,{children:"ViewModel"})," et la ",(0,s.jsx)(n.strong,{children:"Vue"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        //highlight-next-line\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n        mc:Ignorable="d"\r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:HelloWorldVM}">\r\n            \x3c!--\xc0 retirer \xe9ventuellement--\x3e\r\n            <v:UcHelloWorld />\r\n        </DataTemplate> \r\n\t\t//highlight-start\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCategoriesVM}">\r\n            <v:UcListeCategories />\r\n        </DataTemplate>\r\n\t\t//highlight-end\r\n    </Window.Resources>\r\n    <Grid>\r\n        <ContentControl Content="{Binding VMActif}" />\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,s.jsx)(n.p,{children:"La ligne 8 ajoute les Views dans l'espace de nom."}),"\n",(0,s.jsxs)(n.p,{children:["La ligne 19 \xe0 21 indique que lorsque le ",(0,s.jsx)(n.strong,{children:"DataContext"})," est de type ",(0,s.jsx)(n.strong,{children:"ListeCategoriesVM"})," (ligne 19), il faut utiliser le contr\xf4le utilisateur ",(0,s.jsx)(n.strong,{children:"UcListeCategories"})," (ligne 20)."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 24, lorsque le ",(0,s.jsx)(n.strong,{children:"Content"})," du ",(0,s.jsx)(n.strong,{children:"ContentControl"})," sera un ",(0,s.jsx)(n.strong,{children:"ViewModel"})," de la liste des ressources, il chargera le contr\xf4le utilisateur correspondant."]}),"\n",(0,s.jsx)(n.h2,{id:"mainwindowvm",children:"MainWindowVM"}),"\n",(0,s.jsxs)(n.p,{children:["Dans la classe ",(0,s.jsx)(n.strong,{children:"MainWindowVM.cs"}),", il faut assigner ",(0,s.jsx)(n.strong,{children:"ListeCategoriesVM"})," \xe0 la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"VMActif"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class MainWindowVM : BaseVM\r\n{    \r\n    public MainWindowVM(IServiceProvider serviceProvider)\r\n\t{   \r\n        //S\xe9lectionner le ViewModel de d\xe9marrage\r\n        VMActif = serviceProvider.GetRequiredService<ListeCategoriesVM>();\r\n    }\r\n\r\n    public BaseVM VMActif { get; set; }    \r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["D\xe9marrez l'application. Appuyez sur le bouton ",(0,s.jsx)(n.strong,{children:"R"})," et la liste s'affichera dans le ",(0,s.jsx)(n.strong,{children:"DataGrid"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"chargement-automatique",children:"Chargement automatique"}),"\n",(0,s.jsx)(n.p,{children:"Il est plus int\xe9ressant pour l'utilisateur d'avoir un chargement automatique pour ce type de vue."}),"\n",(0,s.jsxs)(n.p,{children:["Il faut impl\xe9menter l'\xe9v\xe9nement ",(0,s.jsx)(n.strong,{children:"Loaded"})," de la vue et appeler la commande ",(0,s.jsx)(n.strong,{children:"ObtenirListeCommande"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans le fichier ",(0,s.jsx)(n.strong,{children:"UcListeCategories.xaml"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"\xc0 la ligne 11, il y a la d\xe9claration de l'\xe9v\xe9nement."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n\t\t\t //highlight-next-line\r\n             Loaded="UserControl_Loaded">\r\n    .....\r\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Dans le fichier ",(0,s.jsx)(n.strong,{children:"UcListeCategories.xaml.cs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 27, il y a l'impl\xe9mentation de la m\xe9thode associ\xe9e \xe0 l'\xe9v\xe9nement. Elle doit \xeatre ",(0,s.jsx)(n.strong,{children:"async"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, il y a les v\xe9rifications que le ",(0,s.jsx)(n.strong,{children:"DataContext"})," existe et qu'il est un ",(0,s.jsx)(n.strong,{children:"ListeCategoriesVM"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La commande est ex\xe9cut\xe9e an ",(0,s.jsx)(n.strong,{children:"asynchrone"}),". Le ",(0,s.jsx)(n.strong,{children:"await"})," est tr\xe8s important pour indiquer \xe0 la fen\xeatre qu'elle est en cours de travail."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\nnamespace SuperCarte.WPF.Views;\r\n/// <summary>\r\n/// Logique d'interaction pour UcListeCategories.xaml\r\n/// </summary>\r\npublic partial class UcListeCategories : UserControl\r\n{\r\n    public UcListeCategories()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n\r\n//highlight-start\r\n    private async void UserControl_Loaded(object sender, RoutedEventArgs e)\r\n    {\r\n        if(this.DataContext != null)\r\n        {\r\n            if(this.DataContext is ListeCategoriesVM)\r\n            {\r\n                await ((ListeCategoriesVM)this.DataContext).ObtenirListeCommande.ExecuteAsync(null);\r\n            }\r\n        }\r\n    }\r\n//highlight-end\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ajoutez un ",(0,s.jsx)(n.strong,{children:"d\xe9lai artificiel"})," dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:"ObtenirListeAsync()"})," du ",(0,s.jsx)(n.strong,{children:"ViewModel"}),". Remarquez le comportement du bouton ",(0,s.jsx)(n.strong,{children:"Rafraichir"}),". Lorsque la commande est en cours d'ex\xe9cution, elle indique aux composants qui sont li\xe9s \xe0 la commande d'\xeatre indisponible. Le bouton est donc d\xe9sactiv\xe9 pour \xe9viter la double ex\xe9cution."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la m\xe9thode avec le ",(0,s.jsx)(n.strong,{children:"d\xe9lai artificiel"})," de la classe ",(0,s.jsx)(n.strong,{children:"ListeCategoriesVM"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Obtenir la liste de cat\xe9gories du service\r\n/// </summary>    \r\nprivate async Task ObtenirListeAsync()\r\n{\r\n    await Task.Delay(5000);\r\n    ListeCategories = await _categorieService.ObtenirListeAsync();\r\n    \r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Mettez le d\xe9lai apr\xe8s l'appel du service. La commande sera toujours en ex\xe9cution, mais la liste va apparaitre instantan\xe9ment. Un autre avantage de l'asynchrone, il est possible de mettre \xe0 jour la vue graduellement pour une commande qui effectue plusieurs op\xe9rations."})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var s=r(7294);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);