"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[4288],{9837:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var r=s(5893),t=s(1151);const i={sidebar_position:6},a="Transaction",o={id:"R\xe9vision SQL/transaction",title:"Transaction",description:"DEA",source:"@site/docs/01-R\xe9vision SQL/transaction.md",sourceDirName:"01-R\xe9vision SQL",slug:"/R\xe9vision SQL/transaction",permalink:"/4N1_2024/docs/R\xe9vision SQL/transaction",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"NotesSidebar",previous:{title:"Proc\xe9dure stock\xe9e",permalink:"/4N1_2024/docs/R\xe9vision SQL/procedures_stockees"},next:{title:"Table temporaire",permalink:"/4N1_2024/docs/R\xe9vision SQL/table_temporaire"}},l={},d=[{value:"DEA",id:"dea",level:2},{value:"Proc\xe9dure de r\xe9initialisation",id:"proc\xe9dure-de-r\xe9initialisation",level:2},{value:"Transaction",id:"transaction-1",level:2},{value:"Exemple",id:"exemple",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"transaction",children:"Transaction"}),"\n",(0,r.jsx)(n.h2,{id:"dea",children:"DEA"}),"\n",(0,r.jsx)(n.p,{children:"Ce DEA sera utilis\xe9 pour cette section des notes de cours."}),"\n",(0,r.jsx)("img",{src:"/4N1_2024/img/04_DEA.jpg"}),"\n",(0,r.jsxs)(n.p,{children:["La table ",(0,r.jsx)(n.strong,{children:"Univers"})," correspond \xe0 l'univers des personnages. Par exemple Marvel, DC Comics, Teenage Mutant Ninja Turtles..."]}),"\n",(0,r.jsx)(n.h2,{id:"proc\xe9dure-de-r\xe9initialisation",children:"Proc\xe9dure de r\xe9initialisation"}),"\n",(0,r.jsx)(n.p,{children:"Dans ce document, les tables devront \xeatre d\xe9truites et recr\xe9ez plusieurs fois pour pr\xe9senter les concepts."}),"\n",(0,r.jsx)(n.p,{children:"Afin d'acc\xe9l\xe9rer la t\xe2che, une proc\xe9dure stock\xe9e sera cr\xe9\xe9e dans la base de donn\xe9es."}),"\n",(0,r.jsx)(n.p,{children:"En premier lieu, il faut cr\xe9er la base de donn\xe9es."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"IF DB_ID('Demo4N1_C2') IS NULL\r\n\tCREATE DATABASE Demo4N1_C2;\r\nGO\r\n\r\nUSE Demo4N1_C2;\r\nGO\n"})}),"\n",(0,r.jsx)(n.p,{children:"Le code ci-dessous permet de d\xe9truire les tables et de les recr\xe9er."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE PROCEDURE initialiserBD\r\nAS\r\n\r\n--V\xe9rifie si la table Personnage existe avant de la d\xe9truire\r\nIF OBJECT_ID('Personnage','U') IS NOT NULL \r\n\tDROP TABLE Personnage;\r\n\t\r\n--V\xe9rifie si la table Univers existe avant de la d\xe9truire\r\nIF OBJECT_ID('Univers','U') IS NOT NULL \r\n\tDROP TABLE Univers;\r\n\r\n--Cr\xe9ation de la table Univers\r\nCREATE TABLE Univers\r\n(\r\n\tUniversId INT NOT NULL CONSTRAINT PK_Univers PRIMARY KEY IDENTITY,\r\n\tNom VARCHAR(100) NOT NULL\r\n);\r\n\r\n--Cr\xe9ation de la table Personnage\r\nCREATE TABLE Personnage\r\n(\r\n\tPersonnageId INT NOT NULL CONSTRAINT PK_Personnage PRIMARY KEY IDENTITY,\r\n\tNom VARCHAR(100) NOT NULL,\r\n\tIdentiteReelle VARCHAR(100) NULL,\r\n\tDateNaissance DATE NULL,\r\n    EstVilain BIT NOT NULL,\r\n\tUniversId INT NOT NULL CONSTRAINT FK_Personnage_UniversId FOREIGN KEY REFERENCES Univers(UniversId)\r\n);\r\nGO\n"})}),"\n",(0,r.jsx)(n.p,{children:"Donc, pour d\xe9truire et recr\xe9er les tables, il suffit de faire cette ligne."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXEC initialiserBD;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"transaction-1",children:"Transaction"}),"\n",(0,r.jsx)(n.p,{children:"Une transaction est une unit\xe9 de travail pouvant inclure plusieurs activit\xe9s qui modifient et interrogent les donn\xe9es et qui peuvent aussi en modifier la d\xe9finition."}),"\n",(0,r.jsxs)(n.p,{children:["On peut d\xe9finir explicitement une transaction \xe0 l\u2019aide de ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"BEGIN TRANSACTION"})})," et la terminer avec ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"COMMIT TRANSACTION"})})," ou ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"ROLLBACK TRANSACTION"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Si on ne d\xe9finit pas la transaction explicitement, elle est alors d\xe9finie implicitement pour chaque expression (chaque commande)."}),"\n",(0,r.jsxs)(n.p,{children:["Les transactions ont quatre propri\xe9t\xe9s: atomicit\xe9, consistance/coh\xe9rence, isolation, et durabilit\xe9; abr\xe9g\xe9s par l\u2019acronyme ",(0,r.jsx)(n.strong,{children:"ACID"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Atomicit\xe9:"})," une transaction est une unit\xe9 de travail indivisible. Soit tous les changements sont effectu\xe9s, ou alors aucun ne l\u2019est. Si le syst\xe8me \xab plante \xbb avant la fin d\u2019une transaction, les changements sont enlev\xe9s au red\xe9marrage de SQL Server. Aussi, si une erreur se produit durant une transaction, alors cette transaction sera annul\xe9e et la base de donn\xe9es reviendra \xe0 un \xe9tat initial."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistance ou Coh\xe9rence"}),": Le terme consistance ou coh\xe9rence r\xe9f\xe8re \xe0 l\u2019\xe9tat des donn\xe9es que la BD retourne lors d\u2019acc\xe8s durant des transactions concurrentes. Toutes les structures de donn\xe9es internes, comme les index, doivent \xeatre coh\xe9rentes \xe0 la fin de la transaction."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Isolation"}),": un m\xe9canisme utilis\xe9 pour contr\xf4ler l\u2019acc\xe8s aux donn\xe9es et s\u2019assurer que la transaction acc\xe8de aux donn\xe9es seulement si celles-ci sont dans le niveau de consistance auquel s\u2019attend la transaction. Une transaction reconna\xeet les donn\xe9es dans l\u2019\xe9tat o\xf9 elles se trouvaient avant d\u2019\xeatre modifi\xe9es par une transaction simultan\xe9e, ou les reconna\xeet une fois que la deuxi\xe8me transaction est termin\xe9e, mais ne reconna\xeet jamais un \xe9tat interm\xe9diaire. Cette propri\xe9t\xe9 est nomm\xe9e mise en s\xe9rie, car elle permet de recharger les donn\xe9es de d\xe9part et de r\xe9p\xe9ter une suite de transactions dont le r\xe9sultat sur les donn\xe9es sera identique \xe0 celui des transactions d\u2019origine. En d\u2019autres mots: le syst\xe8me verrouille la transaction tant que les donn\xe9es ne sont pas dans le bon \xe9tat."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Durabilit\xe9"}),": Lorsqu\u2019une transaction est termin\xe9e, ses effets sur le syst\xe8me sont permanents. Les modifications sont conserv\xe9es m\xeame en cas de d\xe9faillance du syst\xe8me. Les donn\xe9es sont toujours \xe9crites dans un journal de transactions avant d\u2019\xeatre \xe9crites dans les tables de donn\xe9es. Lorsque la commande commit est enregistr\xe9e dans le journal, la transaction est consid\xe9r\xe9e \xab durable \xbb m\xeame si les donn\xe9es ne sont pas encore enregistr\xe9es dans les tables. Si le syst\xe8me \xab plante \xbb avant que les donn\xe9es soient dans les tables, elles seront transf\xe9r\xe9es au red\xe9marrage du serveur."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Afin d\u2019assurer ces propri\xe9t\xe9s, le moteur de base de donn\xe9es offre les \xe9l\xe9ments suivants:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Des fonctionnalit\xe9s de verrouillage permettant d\u2019assurer l\u2019isolement des transactions."}),"\n",(0,r.jsx)(n.li,{children:"Des fonctionnalit\xe9s de consignation assurant la durabilit\xe9 des transactions. En cas de d\xe9faillance du mat\xe9riel serveur, du syst\xe8me d\u2019exploitation ou d\u2019une instance du Moteur de base de donn\xe9es lui-m\xeame, l\u2019instance utilise au red\xe9marrage les journaux des transactions pour restaurer automatiquement toutes les transactions incompl\xe8tes jusqu\u2019au moment de la d\xe9faillance du syst\xe8me."}),"\n",(0,r.jsx)(n.li,{children:"Des fonctionnalit\xe9s de gestion des transactions qui assurent l\u2019atomicit\xe9 et la coh\xe9rence des transactions. Lorsqu\u2019une transaction a d\xe9but\xe9, elle doit se d\xe9rouler correctement jusqu\u2019\xe0 la fin, sans quoi l\u2019instance du Moteur de base de donn\xe9es annule toutes les modifications effectu\xe9es sur les donn\xe9es depuis le d\xe9but de la transaction."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Lorsqu'une transaction est ex\xe9cut\xe9e, une table devient verrouill\xe9e d\xe8s qu'elle re\xe7oit une \xe9criture (insertion, suppression ou mise \xe0 jour). La table se d\xe9verrouille uniquement lorsque la transaction est termin\xe9e."}),"\n",(0,r.jsx)(n.h3,{id:"exemple",children:"Exemple"}),"\n",(0,r.jsx)(n.p,{children:"Initialisez la base de donn\xe9es et ex\xe9cutez le script ci-dessous."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"EXEC initialiserBD; \r\n\r\nSET IDENTITY_INSERT Univers ON;\r\nINSERT INTO Univers(UniversId, Nom) VALUES\r\n\t(1, 'Marvel'),\r\n    (2, 'DC');\r\nSET IDENTITY_INSERT Univers OFF;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Par exemple, ins\xe9rez ces donn\xe9es dans la table ",(0,r.jsx)(n.strong,{children:"Personnage"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Spiderman', 0, 1);\r\nINSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Leonardo', 0, 3); --Erreur, l'univers 3 n'existe pas\r\nINSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Batman', 0, 2); \n"})}),"\n",(0,r.jsx)(n.p,{children:"Dans la table, il aura seulement la premi\xe8re ligne dans la table."}),"\n",(0,r.jsx)(n.p,{children:"Pour emp\xeacher l'insertion des 3 \xe9l\xe9ments en cas d'erreur, il faut utiliser la transaction."}),"\n",(0,r.jsx)(n.p,{children:"Ex\xe9cutez ce script."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"--Vide la table\r\nDELETE FROM Personnage;\r\n\r\n--D\xe9but de la transaction\r\nBEGIN TRANSACTION;\r\nINSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Spiderman', 0, 1);\r\nINSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Leonardo', 0, 3); --Erreur\r\nINSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Batman', 0, 2); \r\nCOMMIT TRANSACTION;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Le terminal indique qu'il y a eu 2 insertions, mais la table est vide. Le 2e \xe9l\xe9ment de la table en erreur, mais la transaction s'est tout de m\xeame ex\xe9cut\xe9, car il s'est termin\xe9 avec un ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"COMMIT"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Ex\xe9cutez ce script."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"--Vide la table\r\nDELETE FROM Personnage;\r\n\r\nSET XACT_ABORT ON;\r\nGO\r\nBEGIN TRANSACTION;\r\n    INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Spiderman', 0, 1);\r\n    INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Leonardo', 0, 3); --Erreur\r\n    INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Batman', 0, 2); \r\nCOMMIT TRANSACTION;\r\nGO\r\nSET XACT_ABORT OFF;\r\nGO\n"})}),"\n",(0,r.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"XACT_ABORT"})})," permet d'interrompre la transaction et de faire un ",(0,r.jsx)(n.strong,{children:"rollback"})," automatiquement. La propri\xe9t\xe9 est disponible uniquement depuis SQL Server 2016. Avant, il fallait utiliser un ",(0,r.jsx)(n.strong,{children:"try/catch"})," et g\xe9rer la fermeture des transactions."]}),"\n",(0,r.jsxs)(n.p,{children:["Maintenant, ajoutez des ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"GO"})})," entre les insertions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SET XACT_ABORT ON;\r\nGO\r\nBEGIN TRANSACTION;\r\n    INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Spiderman', 0, 1);\r\n    GO\r\n    INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Leonardo', 0, 3); --Erreur\r\n    GO\r\n    INSERT INTO Personnage(Nom, EstVilain, UniversId) VALUES('Batman', 0, 2); \r\n    GO\r\nCOMMIT TRANSACTION;\r\nGO\r\nSET XACT_ABORT OFF;\n"})}),"\n",(0,r.jsx)(n.p,{children:"L'item 1 est dans la base de donn\xe9es, car son lot a fonctionn\xe9."}),"\n",(0,r.jsx)(n.admonition,{title:"ATTENTION",type:"danger",children:(0,r.jsxs)(n.p,{children:["Il est important de ne jamais utiliser un ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"GO"})})," dans la transaction, car une transaction doit avoir un lot unique."]})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var r=s(7294);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);