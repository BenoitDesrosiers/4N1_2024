"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[4587],{535:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var s=r(5893),i=r(1151);const l={sidebar_position:1},a="Pr\xe9sentation de Microsoft .NET",t={id:"Intro Csharp/Introduction_CSharp",title:"Pr\xe9sentation de Microsoft .NET",description:"La plateforme de d\xe9veloppement de Microsoft .NET existe depuis 2002. Elle \xe9tait connue sous le nom de Microsoft .NET Framework. Son but \xe9tait d'offrir une plateforme unifi\xe9e pour le d\xe9veloppement d'application native Windows et Web.",source:"@site/docs/05-Intro Csharp/Introduction_CSharp.md",sourceDirName:"05-Intro Csharp",slug:"/Intro Csharp/Introduction_CSharp",permalink:"/4N1_2024/docs/Intro Csharp/Introduction_CSharp",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"NotesSidebar",previous:{title:"Installation des logiciels requis",permalink:"/4N1_2024/docs/Preparation/preparation_environnement"},next:{title:"Exercices",permalink:"/4N1_2024/docs/Intro Csharp/exercices_c_sharp"}},o={},c=[{value:"Les bases de c#",id:"les-bases-de-c",level:2},{value:"Les commentaires",id:"les-commentaires",level:3},{value:"Les r\xe9gions",id:"les-r\xe9gions",level:3},{value:"Les variables",id:"les-variables",level:3},{value:"Le type var",id:"le-type-var",level:3},{value:"Le <em>nullable</em> pour les types non nullable",id:"le-nullable-pour-les-types-non-nullable",level:3},{value:"Le <em>nullable</em> pour les types nullables et classe",id:"le-nullable-pour-les-types-nullables-et-classe",level:3},{value:"S\xe9parateur de nombre - _",id:"s\xe9parateur-de-nombre---_",level:3},{value:"Manipulation de string",id:"manipulation-de-string",level:2},{value:"Les classes",id:"les-classes",level:2},{value:"namespace",id:"namespace",level:3},{value:"Attribut",id:"attribut",level:3},{value:"Constructeur",id:"constructeur",level:3},{value:"Propri\xe9t\xe9",id:"propri\xe9t\xe9",level:3},{value:"using",id:"using",level:3},{value:"global using",id:"global-using",level:3},{value:"Assignation de propri\xe9t\xe9s et cr\xe9ation d&#39;un objet.",id:"assignation-de-propri\xe9t\xe9s-et-cr\xe9ation-dun-objet",level:3},{value:"this",id:"this",level:3},{value:"Interface, classe abstraite et h\xe9ritage",id:"interface-classe-abstraite-et-h\xe9ritage",level:2},{value:"Interface",id:"interface",level:3},{value:"Classe abstraite",id:"classe-abstraite",level:3},{value:"H\xe9ritage",id:"h\xe9ritage",level:3},{value:"H\xe9ritage d&#39;une classe abstraite",id:"h\xe9ritage-dune-classe-abstraite",level:3},{value:"Les op\xe9rateurs",id:"les-op\xe9rateurs",level:2},{value:"Op\xe9ration conditionnelle ou ternaire (<code>? :</code>)",id:"op\xe9ration-conditionnelle-ou-ternaire--",level:3},{value:"Le <code>??</code>",id:"le-",level:3},{value:"Le <code>??=</code>",id:"le--1",level:3},{value:"Le <code>?.</code>",id:"le--2",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"pr\xe9sentation-de-microsoft-net",children:"Pr\xe9sentation de Microsoft .NET"}),"\n",(0,s.jsx)(n.p,{children:"La plateforme de d\xe9veloppement de Microsoft .NET existe depuis 2002. Elle \xe9tait connue sous le nom de Microsoft .NET Framework. Son but \xe9tait d'offrir une plateforme unifi\xe9e pour le d\xe9veloppement d'application native Windows et Web."}),"\n",(0,s.jsx)(n.p,{children:"Les technologies Web ont beaucoup \xe9volu\xe9es depuis sa sortie initiale en 2001."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"ASP.NET ou WebForm"}),"\n",(0,s.jsx)(n.li,{children:"ASP.NET MVC"}),"\n",(0,s.jsx)(n.li,{children:"ASP.NET Web API"}),"\n",(0,s.jsx)(n.li,{children:"Blazor Server-Side"}),"\n",(0,s.jsx)(n.li,{children:"Blazor Web Assembly"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"M\xeame chose pour les technologies natives."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"WinForm"}),"\n",(0,s.jsx)(n.li,{children:"WPF"}),"\n",(0,s.jsx)(n.li,{children:"Xamarin"}),"\n",(0,s.jsx)(n.li,{children:"MAUI"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"En 2016, Microsoft a sorti une nouvelle plateforme Microsoft .NET Core. Cette plateforme permet de faire des applications Linux, macOS et Windows."}),"\n",(0,s.jsx)(n.p,{children:"La plateforme .NET Core et .NET Framework ont \xe9volu\xe9 ind\xe9pendamment jusqu'en 2019. En 2020, Microsoft a sorti le .NET 5 qui consiste \xe0 l'\xe9volution de la plateforme .NET Core et le .NET Framework a \xe9t\xe9 abandonn\xe9. Il est toujours possible de d\xe9velopper avec le .NET Framework. Certaines technologies ont \xe9t\xe9 republi\xe9es en .NET Core, comme pour le ASP.NET MVC et le WPF, mais d'autres ont \xe9t\xe9 abandonn\xe9es comme pour les WebForm."}),"\n",(0,s.jsxs)(n.p,{children:["La derni\xe8re version en date d'aujourd'hui est ",(0,s.jsx)(n.strong,{children:".NET 7"})," qui est disponible depuis novembre 2022. ",(0,s.jsx)(n.strong,{children:"Nous utiliserons cette version en classe."})]}),"\n",(0,s.jsx)(n.p,{children:"Microsoft supporte \xe9galement plusieurs langages de programmation. Le plus populaire est le c#, mais il \xe9tait possible de programmer une application WinForm en c# ou en Visual Basic .NET. Les 2 langages offrent les m\xeames possibilit\xe9s. Un autre but de Microsoft .NET \xe9tait de le rendre multi-langage et de les faire coexister facilement ensemble."}),"\n",(0,s.jsx)(n.h2,{id:"les-bases-de-c",children:"Les bases de c#"}),"\n",(0,s.jsx)(n.p,{children:"Le langage c# est celui qui est utilis\xe9 pour faire la programmation logique dans ASP.NET MVC, Blazor et WPF. Ce langage est tr\xe8s proche de Java, TypeScript et de C++. Il est assez simple pour un programmeur Java de comprendre du code en c# et vice-versa."}),"\n",(0,s.jsx)(n.p,{children:"Les 3 sites ci-dessous expliquent les bases en c# :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Microsoft Learn (fran\xe7ais disponible)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/csharp/",children:"https://learn.microsoft.com/fr-ca/dotnet/csharp/"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"DevStory (fran\xe7ais disponible)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Tutoriel rapide : ",(0,s.jsx)(n.a,{href:"https://devstory.NET/10333/apprenez-rapidement-a-developper-en-csharp-pour-debutant#a312015",children:"https://devstory.NET/10333/apprenez-rapidement-a-developper-en-csharp-pour-debutant#a312015"})]}),"\n",(0,s.jsxs)(n.li,{children:["Liste des tutoriels : ",(0,s.jsx)(n.a,{href:"https://devstory.NET/10999/csharp",children:"https://devstory.NET/10999/csharp"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["W3Schools (anglais uniquement) : ",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/cs/index.php",children:"https://www.w3schools.com/cs/index.php"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Le c# est un langage orient\xe9 objet. Il est tr\xe8s proche du Java. Au tout d\xe9but, la communaut\xe9 disait souvent que c# \xe9tait une version Microsoft de Java."}),"\n",(0,s.jsxs)(n.p,{children:["c# utilise un ",(0,s.jsx)(n.strong,{children:"Garbage Collector"})," pour sa gestion de m\xe9moire."]}),"\n",(0,s.jsxs)(n.p,{children:["Le langage c# a beaucoup \xe9volu\xe9 depuis sa cr\xe9ation. Pour ",(0,s.jsx)(n.strong,{children:".NET 7"}),", le c# ",(0,s.jsx)(n.strong,{children:"version 11"})," est utilis\xe9e. Certaines syntaxes peuvent ne pas fonctionner si vous utilisez une version plus ancienne."]}),"\n",(0,s.jsxs)(n.p,{children:["Ce site illustre bien la version de c# avec la version du .NET : ",(0,s.jsx)(n.a,{href:"https://www.tutorialsteacher.com/csharp/csharp-version-history",children:"https://www.tutorialsteacher.com/csharp/csharp-version-history"})]}),"\n",(0,s.jsx)(n.h3,{id:"les-commentaires",children:"Les commentaires"}),"\n",(0,s.jsxs)(n.p,{children:["Pour faire des commentaires en c#, il fait utiliser le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"//"})})," pour \xe9crire le commentaire sur une seule ligne."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour \xe9crire un commentaire sur plusieurs lignes, il faut utiliser ",(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"/* */"}),"."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Pour g\xe9n\xe9rer automatiquement des blocs de documentation pour les classes, m\xe9thodes, propri\xe9t\xe9s..., il faut faire ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"///"})})," pour g\xe9n\xe9rer le bloc."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\r\n/// Ma premi\xe8re classe\r\n/// </summary>\r\npublic class MaClasse\r\n{\r\n    /// <summary>\r\n    /// Addition\r\n    /// </summary>\r\n    /// <param name="x">Premier terme</param>\r\n    /// <param name="y">Deuxi\xe8me terme</param>\r\n    /// <returns>Total de l\'addition</returns>\r\n    public int Addition(int x, int y)\r\n    {\r\n        /* Ma premi\xe8re ligne.\r\n           Ma deuxi\xe8me ligne. */       \r\n\r\n        //Une seule ligne            \r\n        return x + y;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"les-r\xe9gions",children:"Les r\xe9gions"}),"\n",(0,s.jsx)(n.p,{children:"En c#, il est possible de faire du regroupement de code en utilisant les r\xe9gions. Ceci permet de masquer rapidement une portion du code. Il est possible de l'utiliser partout dans un fichier c#."}),"\n",(0,s.jsx)(n.p,{children:"Par exemple, on peut regrouper tous les constructeurs, les attributs... pour masquer une portion du code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"#region Constructeurs\r\npublic MaClasse()\r\n{\r\n    //Je suis le constructeur par d\xe9faut\r\n}\r\n\r\npublic MaClasse(int a)\r\n{\r\n    //Je suis un 2e constructeur.\r\n}\r\n#endregion\r\n    \n"})}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de fermer la r\xe9gion pour voir uniquement le titre de la r\xe9gion. En appuyant sur le plus, on voit tout le code."}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/regionc.jpg"}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de mettre des r\xe9gions dans la classe et dans des m\xe9thodes."}),"\n",(0,s.jsx)(n.h3,{id:"les-variables",children:"Les variables"}),"\n",(0,s.jsx)(n.p,{children:"c# est un langage typ\xe9. Chaque variable correspond \xe0 un type d\xe9fini."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'//Ceci est un entier 32 bits\r\nint monEntier = 0;\r\n\r\n//Ceci est une chaine de caract\xe8re\r\nstring maChaine = "Bonjour !";\r\n    \r\n//Ceci est un bool\xe9en\r\nbool monBooleen = false;\r\n    \n'})}),"\n",(0,s.jsx)(n.h3,{id:"le-type-var",children:"Le type var"}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, dans beaucoup de documentation, le type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"var"})})," est utilis\xe9. Par contre, il ne faut pas le consid\xe9rer comme celui en ",(0,s.jsx)(n.strong,{children:"JavaScript"}),". Il est consid\xe9r\xe9 comme un type implicite en c#."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"int x = 10; //Type explicite\r\nvar y = 12; //Type implicite. Le var est en r\xe9alit\xe9 un int.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"var"})})," peut \xeatre utilis\xe9 uniquement en tant que variable locale.  Il n'est pas possible d'utiliser ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"var"})})," en tant qu'attribut, propri\xe9t\xe9, param\xe8tre ou de retour de m\xe9thode."]}),"\n",(0,s.jsxs)(n.p,{children:["Il n'est pas recommand\xe9 de toujours utiliser le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"var"})})," et d'ignorer les types explicites, car le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"var"})})," va devenir le type de sa premi\xe8re assignation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//Le code ci-dessous ne compilera pas.\r\nvar x = 1; //var est consid\xe9r\xe9 comme un Int par le compilateur.\r\n\r\n//Le 1.1M consiste \xe0 indiquer au compilateur que la valeur est un d\xe9cimal\r\n//Il n'est pas possible de le convertir en d\xe9cimal. \r\n//Erreur CS0266 : Impossible de convertir implicitement le type 'decimal' en 'int'.\r\nx = 1.1M; \r\n\r\n//En utilisant une notation explicite, le code ci-dessous fonctionnera.\r\ndecimal y = 1; //Assignation de la valeur en notation Int, mais consid\xe9r\xe9e comme un d\xe9cimal.\r\ny = 1.1M; //Assignation d'une nouvelle valeur en d\xe9cimal.\r\n\r\n//Pour \xeatre en mesure de compiler avec une notation implicite.\r\nvar z = 1M; //Assignation de la valeur en notation d\xe9cimale, donc var est un d\xe9cimal.\r\nz = 1.1M; //Cette assignation fonctionnera\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La plus grande utilit\xe9 du type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"var"})})," est pour cr\xe9er des types anonymes dynamiquement. Ce concept sera expliqu\xe9 plus tard dans la session."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour en apprendre davantage : ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/var",children:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/var"})]}),"\n",(0,s.jsxs)(n.h3,{id:"le-nullable-pour-les-types-non-nullable",children:["Le ",(0,s.jsx)(n.em,{children:"nullable"})," pour les types non nullable"]}),"\n",(0,s.jsxs)(n.p,{children:["Par d\xe9finition, les types primitifs ne peuvent pas avoir une valeur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})}),". Par exemple, un bool\xe9en doit obligatoirement avoir ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"True"})})," ou ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"False"})})," pour \xeatre en mesure de l'utiliser."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans certains cas, il peut \xeatre int\xe9ressant d'\xeatre en mesure d'avoir la valeur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," pour un type primitif. c# est en mesure d'accepter la valeur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," pour tous les types ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"non nullable"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//Bool\xe9en standard\r\nbool b1; //Accepte uniquement true ou false.\r\nb1 = true; \r\nb1 = false;\r\nb1 = null; //Erreur CS0037 : Impossible de convertir une valeur null en 'type', car il s\u2019agit d\u2019un type valeur qui n\u2019autorise pas les valeurs null\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour rendre un type ",(0,s.jsx)(n.strong,{children:"nullable"}),", il faut ajouter un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?"})})," \xe0 la fin du type."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'//Bool\xe9en standard\r\nbool? b1; //Accepte true, false et null gr\xe2ce au "bool?".\r\nb1 = true; \r\nb1 = false;\r\nb1 = null; //Le compilateur le permet.\r\n\r\nDateTime? naissance = null; //Pourrait servir pour une date inconnue\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"le-nullable-pour-les-types-nullables-et-classe",children:["Le ",(0,s.jsx)(n.em,{children:"nullable"})," pour les types nullables et classe"]}),"\n",(0,s.jsxs)(n.p,{children:["Une variable de type ",(0,s.jsx)(n.strong,{children:"string"})," peut \xeatre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," par d\xe9finition."]}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de compiler le code ci-dessous sans probl\xe8me. Par contre, le compilateur donnera un avertissement."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"string nom = null;\r\n//CS8600 - Conversion d\u2019un litt\xe9ral null ou d\u2019une valeur null possible en type non nullable.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour indiquer au compilateur que la valeur null est accept\xe9e, il faut ajouter le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?"})})," apr\xe8s le type ou la classe."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"string? nom = null;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\xc9galement, lors de l'utilisation d'API cr\xe9\xe9 en .NET, le cadriciel refusera les valeurs ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," pour les propri\xe9t\xe9s qui n'auront pas le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?"})}),". Il sera important de l'ajouter."]}),"\n",(0,s.jsx)(n.h3,{id:"s\xe9parateur-de-nombre---_",children:"S\xe9parateur de nombre - _"}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de rendre les gros nombres plus facilement lisibles avec le s\xe9parateur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"_"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"double nombre1 = 45412974585674;\r\ndouble nombre2 = 45_412_974_585_674;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"manipulation-de-string",children:"Manipulation de string"}),"\n",(0,s.jsx)(n.p,{children:"Il faut faire \xe0 l'occasion de la concat\xe9nation de string avec des variables et du texte fixe."}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NomComplet()"})})," permet de cr\xe9er la phrase ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:'"Mon nom est Fran\xe7ois St-Hilaire."'})})," si on reprend les valeurs de la section pr\xe9c\xe9dente."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public string NomComplet()\r\n{\r\n    return "Mon nom est " + Prenom + " " + Nom + ".";\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La concat\xe9nation avec des ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"+"})})," n'est pas la plus optimale. Il existe plusieurs fa\xe7ons de le faire."]}),"\n",(0,s.jsxs)(n.p,{children:["L'utilisation de la fonction ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"String.Format"})}),". Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"{0}"})})," correspond au premier argument ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"{1}"})})," au deuxi\xe8me argument et ainsi de suite."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public string NomComplet()\r\n{\r\n    return String.Format("Mon nom est {0} {1}.", Prenom, Nom);\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'utiliser l'interpolation ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"$"})}),". Il faut mettre le nom de la variable/attribut/propri\xe9t\xe9/logique... entre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"{ }"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public string NomComplet()\r\n{\r\n    return $"Mon nom est {Prenom} {Nom}.";\r\n}\r\n\r\npublic string NomComplet2Lignes()\r\n{\r\n    return $"Mon nom est {Prenom}.{Environment.NewLine}Mon nom est {Nom}.";\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de formater une valeur dans un format sp\xe9cifique. L'exemple ci-dessous va afficher la date d'anniversaire selon le format sp\xe9cifier dans votre syst\xe8me d'exploitation. G\xe9n\xe9ralement en Fran\xe7ais Canada, la date s'affiche en ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"yyy/MM/dd"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string anniversaire1 = $"Mon anniversaire est le {DateNaissance}"; //Mon anniversaire est le 1980-02-20 00:00:00\r\nstring anniversaire2 = $"Mon anniversaire est le {DateNaissance:dd/MM/yyyy}"; //Mon anniversaire est le 20-02-1980\n'})}),"\n",(0,s.jsxs)(n.p,{children:["S'il faut inscrire r\xe9ellement les caract\xe8res ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"{"})})," et ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"}"})}),", il faut le faire double."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string phrase = $"Mon nom est {Prenom} {Nom}. {{123}}"; \r\n//La valeur de phrase est : Mon nom est Fran\xe7ois St-Hilaire. {123}\r\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Il existe l'indicateur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@"})}),". Il sert \xe0 ignorer le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"\\"})}),"  comme \xe9tant un caract\xe8re d'\xe9chappement et de permettre de faire une chaine de caract\xe8re sur plusieurs lignes. Le retour dans le texte sera consid\xe9r\xe9 comme un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"\\r\\n"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string phrase = @"Mon pr\xe9nom est Fran\xe7ois.\r\nMon nom est St-Hilaire";\r\n//La valeur de phrase est : Mon nom est Fran\xe7ois\\r\\n.Mon nom est St-Hilaire.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Il peut devenir difficile de g\xe9rer ce genre de string. Personnellement, j'utilise uniquement le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@"})})," pour les chemins."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string path1 = "C:\\\\Test\\\\Fichier.txt"; //On doit utiliser le double \\ pour faire un \\ en caract\xe8re \xe9crit.\r\nstring path2 = @"C:\\Test\\Fichier.txt"; //Plus facile \xe0 lire.\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour les requ\xeates SQL, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@"})})," est tr\xe8s utile pour appliquer une mise en forme \xe0 la SQL."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'string sql = @"SELECT\r\n\t\t\t\t\tNom,\r\n\t\t\t\t\tPrenom,\r\n\t\t\t\t\tCours\r\n\t\t\t\tFROM Etudiants\r\n\t\t\t\tWHERE\r\n\t\t\t\t\tEtudiant = 1;";\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de combiner le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"$"})})," et le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/tokens/interpolated",children:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/tokens/interpolated"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/tokens/verbatim",children:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/tokens/verbatim"})}),"\n",(0,s.jsx)(n.h2,{id:"les-classes",children:"Les classes"}),"\n",(0,s.jsxs)(n.p,{children:["Voici une classe en c#. Cette classe a \xe9t\xe9 cr\xe9\xe9e dans un projet qui se nomme ",(0,s.jsx)(n.strong,{children:"DemoCours1"}),". Cette classe sera utilis\xe9e pour illustrer plusieurs concepts en c#."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'namespace DemoCours1.Modeles;\r\n\r\n/// <summary>\r\n/// Classe qui contient l\'information d\'une personne\r\n/// </summary>\r\npublic class Personne\r\n{\r\n    private string _prenom;\r\n    private string _nom;\r\n    private DateTime _dateNaissance;\r\n\r\n    /// <summary>\r\n    /// Constructeur par d\xe9faut sans arguments\r\n    /// </summary>\r\n    public Personne()\r\n    {\r\n        \r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur avec param\xe8tres\r\n    /// </summary>\r\n    /// <param name="prenom">Le pr\xe9nom de la personne</param>\r\n    /// <param name="nom">Le nom de la personne</param>\r\n    /// <param name="dateNaissance">La date de naissance de la personne</param>\r\n    public Personne(string prenom, string nom, DateTime dateNaissance)\r\n    {\r\n        _prenom = prenom;\r\n        _nom = nom; \r\n        _dateNaissance = dateNaissance;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Cr\xe9er la phrase "Mon nom est " avec l\'information de la personne.\r\n    /// </summary>\r\n    /// <returns>La phrase "Mon nom est"</returns>\r\n    public string NomComplet()\r\n    {\r\n        return "Mon nom est " + _prenom + " " + _nom + ".";\r\n    }\r\n\r\n    /// <summary>\r\n    /// Calcule l\'\xe2ge de la personne en date d\'aujourd\'hui.\r\n    /// </summary>\r\n    /// <returns>\xc2ge de la personne</returns>\r\n    public int CalculAge()\r\n    {\r\n        DateTime aujourdhui = DateTime.Now.Date;\r\n        \r\n        int age = aujourdhui.Year - _dateNaissance.Year;\r\n\r\n        if(aujourdhui.DayOfYear < _dateNaissance.DayOfYear)\r\n        {\r\n            age--;\r\n        }\r\n\r\n        return age;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom\r\n    {\r\n        get\r\n        {\r\n            return _prenom;\r\n        }\r\n        set\r\n        {\r\n            _prenom = value;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient le nom de la personne\r\n    /// </summary>\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            _nom = value;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient la date de naissance de la personne\r\n    /// </summary>\r\n    public DateTime DateNaissance\r\n    {\r\n        get\r\n        {\r\n            return _dateNaissance;\r\n        }\r\n        set\r\n        {\r\n            _dateNaissance = value;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"namespace",children:"namespace"}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," en c# consiste \xe0 une organisation logique de vos classes.  Lorsqu'une classe est cr\xe9\xe9e dans un projet, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," se cr\xe9e automatiquement en fonction de la structure physique du fichier."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour la structure de fichier ci-dessous, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DemoCours1.Modeles"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DemoCours1/\r\n\u251c\u2500\u2500 Modeles/\r\n|\t\u251c\u2500\u2500 Personne.cs\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ATTENTION"})," : Si une classe est d\xe9plac\xe9e dans un nouveau dossier ou si le dossier est renomm\xe9, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," ne sera pas mis \xe0 jour automatiquement. Il est important de le modifier afin d'avoir une structure logique et physique coh\xe9rente."]}),"\n",(0,s.jsxs)(n.p,{children:["En r\xe9alit\xe9, le nom complet d'une classe consiste au ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," et au nom de la classe. Dans notre exemple, le nom complet de la classe est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DemoCours1.Personne"})})," au niveau du projet. Il est possible d'avoir plusieurs classes ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Personne"})})," dans le m\xeame projet tant que leur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," est diff\xe9rent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"DemoCours1/\r\n\u251c\u2500\u2500 Modeles1/\r\n|\t\u251c\u2500\u2500 Personne.cs  -- Le nom complet de la classe est DemoCours1.Modeles1.Personne\r\n\u251c\u2500\u2500 Modeles2/\r\n|\t\u251c\u2500\u2500 Personne.cs  -- Le nom complet de la classe est DemoCours1.Modeles2.Personne\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Depuis ",(0,s.jsx)(n.strong,{children:".Net 6"}),", il est possible d'utiliser la notation ",(0,s.jsx)(n.strong,{children:"\xe9tendue de fichier"})," pour la d\xe9claration du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})}),". Cette mise en forme est plus compacte et elle sera utilis\xe9 dans les cours. Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," est d\xe9clar\xe9 sur une seule ligne et se termine par un point-virgule ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:";"})}),". La classe doit \xeatre d\xe9clar\xe9e \xe0 la suite du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})}),". Cette notation n'est pas configur\xe9 par d\xe9faut dans Visual Studio 2022. R\xe9f\xe9rez-vous au document d'installation et de configuration pour effectuer le changement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//D\xe9claration en \xe9tendue de fichier\r\nnamespace DemoCours1.Modeles;\r\n\r\npublic class Personne\r\n{\r\n\t//Contenu de la classe\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["L'ancienne notation est le ",(0,s.jsx)(n.strong,{children:"bloc"})," de code.  La classe est d\xe9clar\xe9e \xe0 l'int\xe9reur du bloc de code du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//D\xe9claration en bloc de code\r\nnamespace DemoCours1.Modeles\r\n{\r\n\tpublic class Personne\r\n    {\r\n        //Contenu de la classe\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"attribut",children:"Attribut"}),"\n",(0,s.jsxs)(n.p,{children:["En c#, la convention la plus accept\xe9e pour les attributs est d'utiliser le pr\xe9fix ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"_"})})," (",(0,s.jsx)(n.em,{children:"underscore"}),") au d\xe9but de son nom."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"private string _prenom;\r\nprivate string _nom;\r\nprivate DateTime _dateNaissance;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour avoir acc\xe8s rapidement \xe0 tous les attributs, il suffit de taper le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"_"})})," et l'intellisense s'occupe du reste."]}),"\n",(0,s.jsx)(n.p,{children:"Les attributs sont \xe9galement en haut de la classe."}),"\n",(0,s.jsx)(n.h3,{id:"constructeur",children:"Constructeur"}),"\n",(0,s.jsx)(n.p,{children:"Il n'est pas obligatoire de mettre le constructeur par d\xe9faut dans une classe lorsqu'il y a uniquement un constructeur. La classe ci-dessous est enti\xe8rement fonctionnelle."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace DemoCours1.Modeles;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une personne\r\n/// </summary>\r\npublic class Personne\r\n{\r\n    private string _prenom;\r\n    private string _nom;\r\n    private DateTime _dateNaissance;           \r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom\r\n    {\r\n        get\r\n        {\r\n            return _prenom;\r\n        }\r\n        set\r\n        {\r\n            _prenom = value;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient le nom de la personne\r\n    /// </summary>\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            _nom = value;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient la date de naissance de la personne\r\n    /// </summary>\r\n    public DateTime DateNaissance\r\n    {\r\n        get\r\n        {\r\n            return _dateNaissance;\r\n        }\r\n        set\r\n        {\r\n            _dateNaissance = value;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Par contre, aussit\xf4t qu'il existe une surcharge de constructeur, il est obligatoire de mettre le constructeur par d\xe9faut s'il est n\xe9cessaire."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'namespace DemoCours1.Modeles;\r\n\r\n/// <summary>\r\n/// Classe qui contient l\'information d\'une personne\r\n/// </summary>\r\npublic class Personne\r\n{\r\n    private string _prenom;\r\n    private string _nom;\r\n    private DateTime _dateNaissance;           \r\n\r\n    /// <summary>\r\n    /// Constructeur avec param\xe8tres\r\n    /// </summary>\r\n    /// <param name="prenom">Le pr\xe9nom de la personne</param>\r\n    /// <param name="nom">Le nom de la personne</param>\r\n    /// <param name="dateNaissance">La date de naissance de la personne</param>\r\n    public Personne(string prenom, string nom, DateTime dateNaissance)\r\n    {\r\n        _prenom = prenom;\r\n        _nom = nom; \r\n        _dateNaissance = dateNaissance;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom\r\n    {\r\n        get\r\n        {\r\n            return _prenom;\r\n        }\r\n        set\r\n        {\r\n            _prenom = value;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient le nom de la personne\r\n    /// </summary>\r\n    public string Nom\r\n    {\r\n        get\r\n        {\r\n            return _nom;\r\n        }\r\n        set\r\n        {\r\n            _nom = value;\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigne ou obtient la date de naissance de la personne\r\n    /// </summary>\r\n    public DateTime DateNaissance\r\n    {\r\n        get\r\n        {\r\n            return _dateNaissance;\r\n        }\r\n        set\r\n        {\r\n            _dateNaissance = value;\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Il ne sera pas possible de cr\xe9er un objet comme ci-dessous."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Personne p = new Personne(); //Erreur compilateur CS7036\r\n\r\nPersonne p = new Personne("Fran\xe7ois", "St-Hilaire", new DateTime(1980, 2, 20))\n'})}),"\n",(0,s.jsx)(n.h3,{id:"propri\xe9t\xe9",children:"Propri\xe9t\xe9"}),"\n",(0,s.jsxs)(n.p,{children:["En c#, les propri\xe9t\xe9s sont principalement utilis\xe9es comme ",(0,s.jsx)(n.strong,{children:"getter/setter"}),". La propri\xe9t\xe9 commence toujours par une majuscule."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Personne\r\n{\r\n\tprivate string _prenom;\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom\r\n    {\r\n    \tget\r\n        {\r\n            return _prenom;\r\n        }\r\n        set\r\n        {\r\n            _prenom = value;\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'ajouter de la logique dans un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"get"})})," ou un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"set"})}),", mais elle doit \xeatre minimale. Il faut voir les propri\xe9t\xe9s comme \xe9tant des ",(0,s.jsx)(n.strong,{children:"getter/setter"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de faire plus simple encore en utilisant la notation ci-dessous."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Personne\r\n{\r\n\tprivate string _prenom;\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom\r\n    {\r\n        get => _prenom;\r\n        set => _prenom = value;\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En c#, les attributs sont rarement utilis\xe9s lorsqu'ils sont assign\xe9s par des propri\xe9t\xe9s sans aucune modification. La propri\xe9t\xe9 devient donc un ",(0,s.jsx)(n.strong,{children:"champ"})," de la classe. C'est la notation la plus utilis\xe9e. L'attribut est disparu de la classe."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Personne\r\n{\r\n    public class Personne\r\n\t{  \r\n        /// <summary>\r\n        /// Assigne ou obtient le pr\xe9nom de la personne\r\n        /// </summary>\r\n        public string Prenom { get; set; }\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Qu'est-ce qu'il faut faire dans le cas d'une classe immuable, c'est-\xe0-dire qu'il n'est pas possible de modifier le contenu de ses attributs une fois l'objet cr\xe9\xe9 ?"}),"\n",(0,s.jsxs)(n.p,{children:["En notation plus classique, on enl\xe8ve le bloc du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"set"})})," de la propri\xe9t\xe9."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Personne\r\n{\r\n\tprivate string _prenom;\r\n    \r\n    public Personne(string prenom)\r\n    {\r\n        _prenom = prenom;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom\r\n    {\r\n    \tget\r\n        {\r\n            return _prenom;\r\n        }\r\n        //Aucune logique pour le SET\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la notation avec des propri\xe9t\xe9s uniquement, il faut mettre un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"private set"})}),". Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"private set"})})," indique que l'assignation est disponible uniquement \xe0 l'int\xe9rieur de la classe, mais de l'ext\xe9rieur, il ne sera pas possible de mettre \xe0 jour le ",(0,s.jsx)(n.strong,{children:"champ"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Personne\r\n{\r\n    public Personne(string prenom)\r\n    {\r\n       Prenom = prenom;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom { get; private set; }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Il peut \xeatre utile de mettre des valeurs par d\xe9faut \xe0 une propri\xe9t\xe9. Une technique classique est de mettre les valeurs initiales dans le constructeur par d\xe9faut."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class Personne\r\n{\r\n    public Personne()\r\n    {\r\n       Prenom = "Bob"; //Valeur par d\xe9faut\r\n    }\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom { get; set; }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Mais il est possible de mettre la valeur par d\xe9faut directement au niveau de la propri\xe9t\xe9."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class Personne\r\n{\r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom { get; set; } = "Bob" //Valeur par d\xe9faut\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using",children:"using"}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'utiliser une classe directement si elle est situ\xe9e dans le m\xeame ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})}),". Mais dans la majorit\xe9 des cas, les classes ne sont pas dans le m\xeame ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Il y a 2 fa\xe7ons d'utiliser les classes."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["En utilisant un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using DemoCours1.Modeles;\r\n\r\nnamespace DemoCours1;\r\n\r\npublic class Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        //La classe personne est dans le namespace DemoCours1.Modeles\r\n        Personne p = new Personne();\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Dans le haut d'un fichier .cs, il est possible de mettre un using pour indiquer que le fichier en cours est en mesure d'utiliser les classes directement."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ASTUCES Visual Studio"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #1"})," : Il est possible d'ajouter automatiquement le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," en effectuant ",(0,s.jsx)(n.strong,{children:"ALT+Enter"}),",  ",(0,s.jsx)(n.strong,{children:"ALT+SHIFT+F10"})," ou ",(0,s.jsx)(n.strong,{children:"CTRL+."})," pour afficher le menu contextuel lorsque le curseur est sur la classe \xe0 utiliser."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #2"})," : Il est possible de trier les ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," en ordre alphab\xe9tique et retirer ceux qui sont inutiles en effectuant ",(0,s.jsx)(n.strong,{children:"CTRL+R+G"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"En utilisant le nom complet de la classe."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"DemoCours1.Modeles.Personne personne = new Personne();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Cette notation est tr\xe8s rarement utilis\xe9e. Le seul cas o\xf9 il est obligatoire de l'utiliser est lorsqu'il y a une ambigu\xeft\xe9 avec le nom, c'est-\xe0-dire qu'il y a 2 classes de disponibles avec le m\xeame nom et le compilateur n'est pas en mesure de savoir laquelle il doit utiliser."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"global-using",children:"global using"}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"global using"})})," permet de d\xe9clarer des ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," qui peuvent \xeatre n\xe9cessaire pour la majorit\xe9 des classes d'un projet.\r\nIl faut d\xe9clarer les ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"global using"})})," dans un fichier nomm\xe9 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Usings.cs"})})," \xe0 la racine du projet."]}),"\n",(0,s.jsxs)(n.p,{children:["Si la solution contient plusieurs projets, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"global using"})})," est accessible uniquement dans le projet dans lequel il a \xe9t\xe9 d\xe9clar\xe9."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"global using System;\r\nglobal using System.Collections.Generic;\r\nglobal using System.Linq;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"assignation-de-propri\xe9t\xe9s-et-cr\xe9ation-dun-objet",children:"Assignation de propri\xe9t\xe9s et cr\xe9ation d'un objet."}),"\n",(0,s.jsxs)(n.p,{children:["Dans le cas de notre classe ",(0,s.jsx)(n.strong,{children:"Personne"}),", avec un constructeur par d\xe9faut et uniquement des propri\xe9t\xe9s comme ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class Personne\r\n{\r\n    /// <summary>\r\n    /// Assigne ou obtient le pr\xe9nom de la personne\r\n    /// </summary>\r\n    public string Prenom { get; set; }\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient le nom de la personne\r\n    /// </summary>\r\n    public string Nom { get; set; }\r\n    \r\n    /// <summary>\r\n    /// Assigne ou obtient la date de naissance de la personne\r\n    /// </summary>\r\n    public DateTime DateNaissance\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Pour assigner les valeurs aux propri\xe9t\xe9s, il est possible de le faire comme ci-dessous. C'est une notation classique."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Personne enseignant = new Personne();\r\nenseignant.Prenom = "Fran\xe7ois";\r\nenseignant.Nom = "St-Hilaire";\r\nenseignant.DateNaissance = new DateTime(1980, 2, 20);\n'})}),"\n",(0,s.jsx)(n.p,{children:"Avec c#, il est possible de le faire directement lors de la construction de l'objet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Personne enseignant = new Personne()\r\n{\r\n    Prenom = "Fran\xe7ois",\r\n    Nom = "St-Hilaire",\r\n    DateNaissance = new DateTime(1980, 2, 20)        \r\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"this",children:"this"}),"\n",(0,s.jsxs)(n.p,{children:["Le terme ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"this"})})," permet d'utiliser un \xe9l\xe9ment appartenant \xe0 une classe. Par exemple, une classe a un attribut qui se nomme ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nom"})})," et une m\xe9thode utilise une variable ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nom"})})," \xe9galement. Est-ce que le nom affich\xe9 sera ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Bart Simpson"})})," ou ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Fran\xe7ois St-Hilaire"})})," pour chacun des exemples ?"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public class Exemple\r\n{\r\n\tprivate string nom = "Fran\xe7ois St-Hilaire";\r\n\t\r\n    public void AssigneNom(string nom)\r\n    {\r\n        nom = nom;\r\n    }\r\n    \r\n    public void AfficheNom(string nom)\r\n\t{\r\n\t\tConsole.WriteLine(nom);\r\n\t}\r\n    \r\n\tpublic void AfficheNom()\r\n\t{\r\n\t\tConsole.WriteLine(nom);\r\n\t}\r\n}\r\n\r\n\r\n/**/\r\n\r\nExemple exemple1 = new Exemple();\r\nexemple1.AfficheNom("Bart Simpson");\r\n\r\nExemple exemple2 = new Exemple();\r\nexemple2.AssigneNom("Bart Simpson");\r\nexemple2.AfficheNom();\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La r\xe9ponse est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Bart Simpson"})})," pour l'exemple 1 et ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Fran\xe7ois St-Hilaire"})})," pour l'exemple 2."]}),"\n",(0,s.jsxs)(n.p,{children:["Si un nom de variable est utilis\xe9 sans le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"this"})}),", le compilateur utilisera la variable qui a \xe9t\xe9 d\xe9clar\xe9e le plus pr\xe8s de son bloc de code. Dans ce cas-ci, c'est le param\xe8tre qui est le plus pr\xe8s. Il s'agit d'une assignation sur lui-m\xeame. Le compilateur donnera un avertissement pour ce code."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public void AssigneNom(string nom)\r\n{\r\n        nom = nom;\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour assigner le contenu du param\xe8tre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"nom"})})," dans de l'attribut ",(0,s.jsx)(n.strong,{children:"`nom"}),", il faut inscrire le code comme ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public void AssigneNom(string nom)\r\n{\r\n        this.nom = nom;\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour \xe9viter toute ambigu\xeft\xe9, la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AfficheNom()"})})," sans param\xe8tre devrait \xeatre comme ci-dessous, m\xeame si elle fonctionne avec le code original."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public void AfficheNom()\r\n{\r\n\tConsole.WriteLine(this.nom);\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il est pr\xe9f\xe9rable d'utiliser des attributs avec le pr\xe9fixe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"_"})})," pour \xe9viter ces probl\xe8mes."]}),"\n",(0,s.jsx)(n.h2,{id:"interface-classe-abstraite-et-h\xe9ritage",children:"Interface, classe abstraite et h\xe9ritage"}),"\n",(0,s.jsx)(n.p,{children:"Le c# est un langage orient\xe9 objet, donc il est possible d'h\xe9riter d'une interface, d'une classe ordinaire ou d'une classe abstraite."}),"\n",(0,s.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,s.jsxs)(n.p,{children:["La convention en c# est de nommer une interface avec le pr\xe9fixe ",(0,s.jsx)(n.strong,{children:"I"})," (Lettre i en majuscule) suivi du nom de l'interface."]}),"\n",(0,s.jsx)(n.p,{children:"Une interface peut avoir comme \xe9l\xe9ment :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"M\xe9thode;"}),"\n",(0,s.jsx)(n.li,{children:"Propri\xe9t\xe9;"}),"\n",(0,s.jsx)(n.li,{children:"\xc9v\xe9nement;"}),"\n",(0,s.jsx)(n.li,{children:"Indexeur."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\xc0 partir de la version 8 de c#, il est possible d'impl\xe9menter des constantes et des \xe9l\xe9ments statiques."}),"\n",(0,s.jsxs)(n.p,{children:["Pour plus d'information sur les possibilit\xe9s avanc\xe9es des interfaces : ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/interface",children:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/interface"})]}),"\n",(0,s.jsx)(n.p,{children:"Voici un exemple d'interface qui repr\xe9sente la classe cr\xe9\xe9e au point 3."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace DemoCours1.Modeles;\r\n\r\npublic interface IPersonne\r\n{\r\n    string NomComplet();\r\n    void CalculAge();        \r\n\r\n    string Prenom { get; set; }\r\n    string Nom { get; set; }\r\n    DateTime DateNaissance { get; set; }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La visibilit\xe9 de l'interface va d\xe9terminer la visibilit\xe9 de ses membres. Il n'est pas n\xe9cessaire d'ajouter ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"public"})})," \xe0 la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NomComplet()"})}),". Elle sera ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"public"})})," dans l'impl\xe9mentation de la classe."]}),"\n",(0,s.jsxs)(n.p,{children:["Une interface utilise le m\xeame principe du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"namespace"})})," que les classes."]}),"\n",(0,s.jsx)(n.h3,{id:"classe-abstraite",children:"Classe abstraite"}),"\n",(0,s.jsx)(n.p,{children:"Une classe abstraite est une classe qui ne peut pas \xeatre instanci\xe9e. Elle est peut-\xeatre h\xe9rit\xe9e par une classe uniquement."}),"\n",(0,s.jsx)(n.p,{children:"Il n'existe pas de convention officielle pour nommer une classe abstraite en c#. Il y a 3 options selon la communaut\xe9."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Avoir un nom significatif, sans aucun pr\xe9fixe/suffixe;"}),"\n",(0,s.jsxs)(n.li,{children:["Utiliser le pr\xe9fixe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Base"})})," suivi du nom de la classe;"]}),"\n",(0,s.jsxs)(n.li,{children:["Utiliser le pr\xe9fixe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"A"})})," suivit du nom de la classe."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Pour ma part, je pr\xe9f\xe8re utiliser le pr\xe9fixe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Base"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Voici un exemple d'une classe abstraite."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'namespace DemoCours1.Modeles;\r\n\r\n/// <summary>\r\n/// Classe de base repr\xe9sentant une personne\r\n/// </summary>\r\npublic abstract class BasePersonne\r\n{\r\n    /// <summary>\r\n    /// Constructeur d\'initialisation des valeurs\r\n    /// </summary>\r\n    /// <param name="prenom">Le pr\xe9nom de la personne</param>\r\n    /// <param name="nom">Le nom de la personne</param>\r\n    /// <param name="dateNaissance">La date de naissance de la personne</param>\r\n    public BasePersonne(string prenom, string nom, DateTime dateNaissance)\r\n    {\r\n        Prenom = prenom;\r\n        Nom = nom;\r\n        DateNaissance = dateNaissance;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Calcule l\'\xe2ge de la personne en date d\'aujourd\'hui.\r\n    /// </summary>\r\n    /// <returns>\xc2ge de la personne</returns>\r\n    public int CalculAge()\r\n    {\r\n        DateTime aujourdhui = DateTime.Now.Date;\r\n\r\n        int age = aujourdhui.Year - DateNaissance.Year;\r\n\r\n        if (aujourdhui.DayOfYear < DateNaissance.DayOfYear)\r\n        {\r\n            age--;\r\n        }\r\n\r\n        return age;\r\n    }\r\n    \r\n    /// <summary>\r\n    /// Cr\xe9er la phrase "Mon nom est " avec l\'information de la personne.\r\n    /// </summary>\r\n    /// <returns>La phrase "Mon nom est"</returns>\r\n    public virtual string NomComplet()\r\n    {\r\n        return $"Mon nom est {Prenom} {Nom}.";\r\n    }\r\n\r\n    /// <summary>\r\n    /// Cr\xe9er la phrase de salutation pour la personne.\r\n    /// </summary>\r\n    /// <returns>Phrase de salutation</returns>\r\n    public abstract string Salutation();\r\n\r\n    public string Prenom { get; protected set; }\r\n    public string Nom { get; protected set; }\r\n    public DateTime DateNaissance { get; protected set; }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Une classe abstraite respecte les m\xeames conditions pour le constructeur pour une classe ordinaire (Point 3.3)."}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CalculeAge()"})})," est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"public"})})," et poss\xe8de une impl\xe9mentation. Elle sera la m\xeame pour tous les types de personnes."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NomComplet()"})})," est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"virtual"})}),". Une m\xe9thode virtuelle consiste \xe0 l'impl\xe9mentation g\xe9n\xe9rale de la m\xe9thode, mais il est possible pour une sous-classe d'avoir sa propre impl\xe9mentation. Par exemple, une sous-classe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Medecin"})}),", le r\xe9sultat de cette m\xe9thode pourrait \xeatre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:'"Mon nom est Dr ..."'})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Salutation()"})})," est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"abstract"})}),". Ce qui signifie qu'elle doit obligatoirement avoir une impl\xe9mentation sp\xe9cifique dans la sous-classe."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour les propri\xe9t\xe9s, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"set"})})," est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"protected"})}),". Ce qui signifie que l'assignation est possible uniquement pour la classe abstraite et ses sous-classes."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de mettre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"abstract"})})," et ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"virtual"})})," pour des propri\xe9t\xe9s \xe9galement."]}),"\n",(0,s.jsx)(n.h3,{id:"h\xe9ritage",children:"H\xe9ritage"}),"\n",(0,s.jsxs)(n.p,{children:["Pour ajouter de l'h\xe9ritage \xe0 une classe, il fait ajouter les deux points ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:":"})})," apr\xe8s le nom de la classe."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans l'exemple ci-dessous, la classe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Personne"})})," h\xe9rite de l'interface ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"IPersonne"})}),". La syntaxe est la m\xeame pour l'h\xe9ritage d'une interface ou d'une classe."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Classe qui contient l'information d'une personne\r\n/// </summary>\r\npublic class Personne : IPersonne\r\n{\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Le c# ne supporte pas l'h\xe9ritage multiple. Il est possible d'h\xe9riter d'une seule classe \xe0 la fois. Mais il est possible d'h\xe9riter de plusieurs interfaces."}),"\n",(0,s.jsxs)(n.p,{children:["Pour \xeatre en mesure d'h\xe9riter de plusieurs \xe9l\xe9ments, il faut ajouter ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:","})})," (virgule) entre chacun des \xe9l\xe9ments."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Classe qui contient l'information d'un \xe9tudiant\r\n/// </summary>\r\npublic class Etudiant : Personne, IEtudiant\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"IMPORTANT"})," : Si la classe h\xe9rite d'une classe et aussi d'interfaces, la classe doit \xeatre obligatoirement le premier \xe9l\xe9ment apr\xe8s les ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:":"})}),". Le compilateur va g\xe9n\xe9rer l'erreur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CS1722"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Classe qui contient l'information d'un \xe9tudiant\r\n/// </summary>\r\npublic class Etudiant : IEtudiant, Personne //Erreur CS1722 \r\n{\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ASTUCES Visual Studio"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #1"}),"  : Il est possible d'impl\xe9menter tous les membres en effectuant ",(0,s.jsx)(n.strong,{children:"ALT+Enter"}),",  ",(0,s.jsx)(n.strong,{children:"ALT+SHIFT+F10"})," ou ",(0,s.jsx)(n.strong,{children:"CTRL+."})," pour afficher le menu contextuel lorsque le curseur est sur le mot de l'interface ou de la classe \xe0 h\xe9riter."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #2"})," : Pour acc\xe9der directement \xe0 la d\xe9finition d'une classe ou d'une interface, il suffit de faire ",(0,s.jsx)(n.strong,{children:"F12"})," lorsque le curseur est sur le mot."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #3"})," : Pour acc\xe9der directement \xe0 la l'impl\xe9mentation d'une m\xe9thode, il suffit de faire ",(0,s.jsx)(n.strong,{children:"CTRL+F12"})," lorsque le curseur est sur le mot."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"h\xe9ritage-dune-classe-abstraite",children:"H\xe9ritage d'une classe abstraite"}),"\n",(0,s.jsxs)(n.p,{children:["Voici l'impl\xe9mentation d'une classe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Professionnel"})})," qui h\xe9rite de la classe abstraite ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePersonne"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'namespace DemoCours1.Modeles;\r\n\r\npublic class Professionnel : BasePersonne\r\n{\r\n    /// <summary>\r\n    /// Constructeur d\'initialisation des valeurs\r\n    /// </summary>\r\n    /// <param name="titre">Le titre de la profession</param>\r\n    /// <param name="prenom">Le pr\xe9nom de la personne</param>\r\n    /// <param name="nom">Le nom de la personne</param>\r\n    /// <param name="dateNaissance">La date de naissance de la personne</param>\r\n    public Professionnel(string titre, string prenom, string nom, DateTime dateNaissance) : base(prenom, nom, dateNaissance)\r\n    {\r\n        Titre = titre;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Cr\xe9er la phrase de salutation pour le profesionnel.\r\n    /// </summary>\r\n    /// <returns>Phrase de salutation</returns>\r\n    public override string Salutation()\r\n    {\r\n        return $"Bonjour {Titre} {Prenom} {Nom}.";\r\n    }        \r\n\r\n    public string Titre { get; private set; }        \r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Au niveau du constructeur, il y a le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:": base(...)"})}),". Le terme ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"base"})})," fait r\xe9f\xe9rence au parent d'une classe."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ASTUCE Visual Studio"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #1"})," : Il est possible de g\xe9rer automatiquement les constructeurs obligatoires en effectuant ",(0,s.jsx)(n.strong,{children:"ALT+Enter"}),",  ",(0,s.jsx)(n.strong,{children:"ALT+SHIFT+F10"})," ou ",(0,s.jsx)(n.strong,{children:"CTRL+."})," pour afficher le menu contextuel lorsque le curseur est sur le nom de la classe. Par contre, seulement les param\xe8tres obligatoires seront g\xe9n\xe9r\xe9s."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Salutation()"})})," est obligatoire, car elle est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"abstract"})})," dans la classe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePersonne"})}),". Pour \xeatre en mesure d'impl\xe9menter la m\xe9thode, il faut utiliser le terme ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"override"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE #2"})," : Visual Studio propose tous les \xe9l\xe9ments disponibles lorsqu'on inscrit uniquement ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"override"})}),". Il est donc possible de g\xe9n\xe9rer rapidement la m\xe9thode."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NomComplet()"})})," n'est pas obligatoire, car elle est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"virtual"})}),". Mais si on d\xe9sire de l'impl\xe9menter dans la classe enfant, il faut \xe9galement utiliser le terme ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"override"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Pour une m\xe9thode, la m\xe9thode autog\xe9n\xe9r\xe9e sera comme ci-dessous."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public override string NomComplet()\r\n{\r\n    return base.NomComplet();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le terme ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"base"})})," permet \xe9galement de sp\xe9cifier l'utilisation d'un \xe9l\xe9ment appartenant \xe0 la classe parent dans le cas d'une ambigu\xeft\xe9 avec un \xe9l\xe9ment de la classe enfant. Dans des m\xe9thodes li\xe9es \xe0 un cycle de vie, il est possible que nous d\xe9sirions toujours appeler l'impl\xe9mentation de la classe parent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public override string NomComplet()\r\n{\r\n    return $"Mon nom est {Titre} {Prenom} {Nom}.";\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"les-op\xe9rateurs",children:"Les op\xe9rateurs"}),"\n",(0,s.jsx)(n.p,{children:"Il existe plusieurs op\xe9rateurs en c#. En voici des particuliers \xe0 c# que vous risquez de voir dans la documentation."}),"\n",(0,s.jsxs)(n.h3,{id:"op\xe9ration-conditionnelle-ou-ternaire--",children:["Op\xe9ration conditionnelle ou ternaire (",(0,s.jsx)(n.code,{children:"? :"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["L'op\xe9ration ternaire consiste \xe0 faire un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"if/else"})})," sur une seule ligne."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public string Salutation()\r\n{\r\n\tif(CalculAge() > 50)\r\n\t{\r\n\t\treturn "Bonjour le vieux.";\r\n\t}\r\n\telse    \r\n\t{\r\n \t   return "Bonjour le jeune !".\r\n\t}\r\n}\r\n\r\npublic string SalutationTernaire()\r\n{\r\n\treturn $"Bonjour le {(CalculAge() > 50 ? "vieux" : "jeune")}.";\r\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"le-",children:["Le ",(0,s.jsx)(n.code,{children:"??"})]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"??"})})," permet de prendre action si une valeur est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})}),". Elle est utilis\xe9e dans un contexte de v\xe9rification."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public string Prenom\r\n{\r\n    get => _prenom;\r\n    set => _prenom = value ?? throw new Exception("Le pr\xe9nom ne peut pas \xeatre assign\xe9 \xe0 null.");\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/operators/null-coalescing-operator",children:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/operators/null-coalescing-operator"})}),"\n",(0,s.jsxs)(n.h3,{id:"le--1",children:["Le ",(0,s.jsx)(n.code,{children:"??="})]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"??="})})," permet d'assigner une valeur par d\xe9faut lorsque la valeur est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'if(Prenom is null)\r\n{\r\n\tPrenom = "Bob";\r\n}\r\n\r\n//Peut \xeatre remplac\xe9 par\r\nPrenom ??= "Bob";\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/operators/null-coalescing-operator",children:"https://docs.microsoft.com/fr-ca/dotnet/csharp/language-reference/operators/null-coalescing-operator"})}),"\n",(0,s.jsxs)(n.h3,{id:"le--2",children:["Le ",(0,s.jsx)(n.code,{children:"?."})]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?."})})," permet d'acc\xe9der \xe0 des \xe9l\xe9ments d'un objet sans g\xe9n\xe9rer une exception ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," si on y acc\xe8de directement."]}),"\n",(0,s.jsx)(n.p,{children:"Par exemple, une personne a un animal de compagnie. Nous voulons v\xe9rifier si c'est l'anniversaire de son animal aujourd'hui."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//La personne a un animal de compagnie\r\nif(DateTime.Now.Day == personne.animal.DateNaissance.Day && DateTime.Now.Month == personne.animal.DateNaissance.Month)\r\n{\r\n\t//C'est l'anniversaire de l'animal de compagnie\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Le code ci-dessus peut g\xe9n\xe9rer une exception, si aucun animal de compagnie n\u2019a \xe9t\xe9 cr\xe9\xe9 pour cette personne."}),"\n",(0,s.jsx)(n.p,{children:"Pour \xe9viter de g\xe9n\xe9rer une exception, il faut ajouter une v\xe9rification avant d'acc\xe9der \xe0 la propri\xe9t\xe9 DateNaissance de l'animal."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//V\xe9rifie si la personne a un animal de compagnie.\r\nif(personne.animal != null)\r\n{\r\n\t//La personne a un animal de compagnie\r\n\tif(DateTime.Now.Day == personne.animal.DateNaissance.Day && DateTime.Now.Month == personne.animal.DateNaissance.Month)\r\n\t{\r\n\t\t//C'est l'anniversaire de l'animal de compagnie\r\n\t}\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'all\xe9ger le code en utilisant le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?."})})," comme ci-dessous. Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?."})})," indique que nous acceptons que l'animal puisse \xeatre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," et la v\xe9rification sera en fait une v\xe9rification entre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"int"})})," et ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})}),", ce qui donne toujours faux."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"if(DateTime.Now.Day == personne?.animal.DateNaissance.Day && DateTime.Now.Month == personne?.animal.DateNaissance.Month)\r\n{\r\n\t//C'est l'anniversaire de l'animal de compagnie\r\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>t,a:()=>a});var s=r(7294);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);