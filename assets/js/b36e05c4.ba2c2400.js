"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[5233],{3117:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var i=r(5893),s=r(1151);const l={sidebar_position:2},t="Introduction \xe0 LINQ",a={id:"02 LINQ/introductionLINQ",title:"Introduction \xe0 LINQ",description:"LINQ ou Language Integrated Query dans sa forme longue est un langage de requ\xeates cr\xe9\xe9 par Microsoft.",source:"@site/docs/02 LINQ/introductionLINQ.md",sourceDirName:"02 LINQ",slug:"/02 LINQ/introductionLINQ",permalink:"/4N1_2024/docs/02 LINQ/introductionLINQ",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"NotesSidebar",previous:{title:"Les Collections",permalink:"/4N1_2024/docs/02 LINQ/collections"},next:{title:"exercice_linq",permalink:"/4N1_2024/docs/02 LINQ/exercice_linq"}},o={},c=[{value:"S\xe9lection unique <code>FirstOrDefault()</code> et <code>LastOrDefault()</code>",id:"s\xe9lection-unique-firstordefault-et-lastordefault",level:2},{value:"S\xe9lection multiple <strong><code>ToList()</code></strong>",id:"s\xe9lection-multiple-tolist",level:2},{value:"Tri <code>OrderBy</code>",id:"tri-orderby",level:2},{value:"CountIf <strong><code>Count()</code></strong>",id:"countif-count",level:2},{value:"Objet dynamique",id:"objet-dynamique",level:2},{value:"\xc9l\xe9ments distincts",id:"\xe9l\xe9ments-distincts",level:2},{value:"Th\xe9orie des ensembles - Intersection",id:"th\xe9orie-des-ensembles---intersection",level:2},{value:"Th\xe9orie des ensembles - Union",id:"th\xe9orie-des-ensembles---union",level:2},{value:"Th\xe9orie des ensembles - Diff\xe9rence",id:"th\xe9orie-des-ensembles---diff\xe9rence",level:2},{value:"Exercices",id:"exercices",level:2},{value:"Exercice 1",id:"exercice-1",level:3},{value:"Exercice 2",id:"exercice-2",level:3},{value:"Exercice 3",id:"exercice-3",level:3},{value:"Exercice 4",id:"exercice-4",level:3},{value:"Exercice 5",id:"exercice-5",level:3},{value:"Exercice 6",id:"exercice-6",level:3},{value:"Exercice 7",id:"exercice-7",level:3},{value:"Exercice 8",id:"exercice-8",level:3},{value:"Exercice 9",id:"exercice-9",level:3},{value:"Exercice 10",id:"exercice-10",level:3},{value:"Exercice 11",id:"exercice-11",level:3},{value:"Exercice 12",id:"exercice-12",level:3},{value:"Exercice 13",id:"exercice-13",level:3},{value:"Exercice 14",id:"exercice-14",level:3},{value:"Exercice 15",id:"exercice-15",level:3},{value:"Exercice 16",id:"exercice-16",level:3},{value:"Exercice 17",id:"exercice-17",level:3},{value:"Exercice 18",id:"exercice-18",level:3},{value:"Exercice 19",id:"exercice-19",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"introduction-\xe0-linq",children:"Introduction \xe0 LINQ"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LINQ"})," ou Language Integrated Query dans sa forme longue est un langage de requ\xeates cr\xe9\xe9 par Microsoft."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LINQ"})," est souvent associ\xe9 \xe0 l'",(0,i.jsx)(n.strong,{children:"ORM Entity Framework"}),". ",(0,i.jsx)(n.strong,{children:"LINQ"})," est bien le langage de requ\xeates utilis\xe9 pour interroger une base de donn\xe9es via ",(0,i.jsx)(n.strong,{children:"Entity Framework"}),", mais il ne se limite pas seulement \xe0 cette technologie."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut voir ",(0,i.jsx)(n.strong,{children:"LINQ"})," comme un langage de requ\xeates qui permet d'interagir avec des ",(0,i.jsx)(n.strong,{children:"objets"}),". Une base de donn\xe9es n'est aucunement n\xe9cessaire pour son utilisation. ",(0,i.jsx)(n.strong,{children:"Entity Framework"})," mod\xe9lise la base de donn\xe9es en objets."]}),"\n",(0,i.jsx)(n.h1,{id:"linq",children:"LINQ"}),"\n",(0,i.jsxs)(n.p,{children:["Pour \xeatre en mesure d'avoir acc\xe8s aux requ\xeates LINQ, il faut ajouter la r\xe9f\xe9rence ",(0,i.jsx)(n.strong,{children:"System.Linq"})," \xe0 la classe."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System.Data.Linq;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LINQ"})," utilise l'extension de m\xe9thodes pour ajouter des m\xe9thodes additionnelles \xe0 certaines collections. Ce concept sera \xe9tudi\xe9 plus tard dans la session."]}),"\n",(0,i.jsxs)(n.p,{children:["La collection la plus utilis\xe9e sous ",(0,i.jsx)(n.strong,{children:"LINQ"})," est la ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"List<T>"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Il existe 2 types de syntaxes pour effectuer des requ\xeates LINQ."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntaxe de requ\xeate (Query syntax)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Personne personne = (from lqPersonne in list\r\n                     where\r\n                         lqPersonne.Id == 2\r\n                     select\r\n                         lqPersonne).FirstOrDefault();\t\t\t\t\t \t\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En ",(0,i.jsx)(n.strong,{children:"SQL"}),", la syntaxe serait comme ceci"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT TOP 1 * FROM list WHERE Id = 2\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Il faut lire la ",(0,i.jsx)(n.strong,{children:"syntaxe Query"})," comme ceci."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"from lqPersonne in list"})})," => Pour chacun des \xe9l\xe9ments de ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"list"})}),", met l'item dans la variable ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"lqPersonne"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"where lqPersonne.Id == 2"})})," => Qui ont le ",(0,i.jsx)(n.strong,{children:"Id"})," \xe9gale \xe0 ",(0,i.jsx)(n.strong,{children:"2"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["**",(0,i.jsx)(n.code,{children:"select lqPersonne"})," ** => Ajoute l'objet ",(0,i.jsx)(n.strong,{children:"lqPersonne"})," dans les items \xe0 retourner."]}),"\n",(0,i.jsxs)(n.p,{children:["Il ne faut pas confondre le ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"from"})})," de ",(0,i.jsx)(n.strong,{children:"LINQ"})," du ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"from"})})," de ",(0,i.jsx)(n.strong,{children:"SQL"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans la documentation, la variable du ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"from"})})," est souvent une seule lettre."]}),"\n",(0,i.jsx)(n.p,{children:"Il est pr\xe9f\xe9rable d'avoir un nom significatif, car pour les requ\xeates complexes, le m\xe9lange des variables deviendra incompr\xe9hensible."}),"\n",(0,i.jsxs)(n.p,{children:["Le pr\xe9fixe ",(0,i.jsx)(n.strong,{children:"lq"})," sera utilis\xe9 pour indiquer que c'est une variable dans une requ\xeate ",(0,i.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntaxe Lambda"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Personne personne = list.Where(lqPersonne => lqPersonne.Id == 2).FirstOrDefault();\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Les deux bouts de code ci-dessus sont \xe9quivalents."}),"\n",(0,i.jsxs)(n.p,{children:["La ",(0,i.jsx)(n.strong,{children:"syntaxe Query"})," ressemble plus \xe0 ",(0,i.jsx)(n.strong,{children:"SQL"})," et elle est un peu plus intuitive et plus simple \xe0 faire lorsqu'elles sont complexes."]}),"\n",(0,i.jsxs)(n.p,{children:["La ",(0,i.jsx)(n.strong,{children:"Syntaxe Lambda"})," est plus compacte et elle est parfois plus simple pour les requ\xeates simples."]}),"\n",(0,i.jsxs)(n.h2,{id:"s\xe9lection-unique-firstordefault-et-lastordefault",children:["S\xe9lection unique ",(0,i.jsx)(n.code,{children:"FirstOrDefault()"})," et ",(0,i.jsx)(n.code,{children:"LastOrDefault()"})]}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"FirstOrDefault"})})," permet de retourner le premier \xe9l\xe9ment en fonction de la recherche demand\xe9e."]}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"LastOrDefault"})})," permet de retourner le premier \xe9l\xe9ment en fonction de la recherche demand\xe9e."]}),"\n",(0,i.jsx)(n.p,{children:"Si aucun \xe9l\xe9ment n\u2019est trouv\xe9, ce sera la valeur par d\xe9faut qui sera retourn\xe9e."}),"\n",(0,i.jsxs)(n.p,{children:["Dans le cas d'un objet, ce sera ",(0,i.jsx)(n.strong,{children:"null"}),". Dans le cas d'un type primitif, ce sera la valeur par d\xe9faut du type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> listInt = new List<int>();\r\nlistInt.Add(13);\r\nlistInt.Add(6);\r\nlistInt.Add(9);\r\n\r\n//Lambda\r\nint premierLambda = listInt.FirstOrDefault(); //13\r\nint dernierLambda = listInt.LastOrDefault(); //9\r\n\r\n//Query\r\nint premierQuery = (from lqInt in listInt select lqInt).FirstOrDefault(); //13\r\nint dernierQuery = (from lqInt in listInt select lqInt).LastOrDefault(); //9\n"})}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de forcer une valeur par d\xe9faut en mettant la valeur en param\xe8tre."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> listInt = new List<int>();\r\nint default = listInt.FirstOrDefault(); //0\r\nint defaultSpecifique = listInt.FirstOrDefault(9); //9\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La clause ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"where"})})," permet de sp\xe9cifier les conditions de s\xe9lection."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'Personne personne1 = new Personne();\r\npersonne1.Id = 1;\r\npersonne1.Prenom = "Fran\xe7ois";\r\npersonne1.Nom = "St-Hilaire";\r\n\r\nPersonne personne2 = new Personne();\r\npersonne2.Id = 2;\r\npersonne2.Prenom = "St\xe9phane";\r\npersonne2.Nom = "Janvier";\r\n\r\nPersonne personne3 = new Personne();\r\npersonne3.Id = 3;\r\npersonne3.Prenom = "Fran\xe7ois";\r\npersonne3.Nom = "Morin";\r\n\r\nList<Personne> list = new List<Personne>(); \r\nlist.Add(personne1);\r\nlist.Add(personne2);\r\nlist.Add(personne3);\r\n\r\n//Query\r\nPersonne premierQuery = (from lqPersonne in list\r\n\t                     where\r\n     \t                    lqPersonne.Prenom == "Fran\xe7ois"\r\n         \t             select\r\n              \t            lqPersonne).FirstOrDefault(); //Retourne Fran\xe7ois St-Hilaire\r\n\r\n//Lambda\r\nPersonne premierLambda = list.where(lqPersonne.Prenom == "Fran\xe7ois").FirstOrDefault();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le cas qu'il y a plusieurs conditions, il faut utiliser le ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"&&"})})," et le ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"||"})})," comme pour un ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"if"})})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'//Query\r\nPersonne premierQuery = (from lqPersonne in list\r\n       \t\t             where\r\n            \t\t          lqPersonne.Prenom == "Fran\xe7ois" &&\r\n\t\t                      lqPersonne.Id > 1\r\n        \t              select\r\n\t\t                      lqPersonne).FirstOrDefault(); //Fran\xe7ois\r\n//Lambda\r\nPersonne premierLambda = list.where(lqPersonne.Prenom == "Fran\xe7ois" && lqPersonne.Id > 1).FirstOrDefault();\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"s\xe9lection-multiple-tolist",children:["S\xe9lection multiple ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ToList()"})})]}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ToList()"})})," permet de d\xe9tourner tous les items qui correspondent aux crit\xe8res de la requ\xeate dans une ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"List<T>"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'//Query\r\nList<Personne> lstQuery = (from lqPersonne in list\r\n\t                       where\r\n      \t                      lqPersonne.Prenom == "Fran\xe7ois"\r\n           \t               select\r\n              \t              lqPersonne).ToList(); //Retourne Fran\xe7ois St-Hilaire et Fran\xe7ois Morin\r\n\r\n//Lambda\r\nList<Personne> lstLambda = list.where(lqPersonne.Prenom == "Fran\xe7ois").ToList();\n'})}),"\n",(0,i.jsx)(n.p,{children:"Dans le cas que la requ\xeate retourne uniquement 1 seul item, la liste contiendra 1 seul item."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'//Query\r\nList<Personne> lstQuery = (from lqPersonne in list\r\n\t                       where\r\n      \t                      lqPersonne.Prenom == "St\xe9phane"\r\n           \t               select\r\n              \t              lqPersonne).ToList(); //Retourne St\xe9phane Janvier\r\n\r\n//Lambda\r\nList<Personne> lstLambda = list.where(lqPersonne.Prenom == "St\xe9phane").ToList();\r\n\r\nConsole.WriteLine(lstQuery.Count); //Retoune 1\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le cas que la requ\xeate ne retourne aucun item, la liste sera vide. ",(0,i.jsx)(n.strong,{children:"LINQ"})," ne retourne pas de liste ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"null"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'//Query\r\nList<Personne> lstQuery = (from lqPersonne in list\r\n\t                       where\r\n      \t                      lqPersonne.Prenom == "Benoit" ||\r\n\t                          lqPersonne.Prenom == "Louis" ||\r\n   \t                          lqPersonne.Prenom == "Frederic" ||\r\n           \t               select\r\n              \t              lqPersonne).ToList(); //Retourne rien\r\n\r\n//Lambda\r\nList<Personne> lstLambda = list.where(lqPersonne.Prenom == "Benoit" || lqPersonne.Prenom == "Louis" || lqPersonne.Prenom == "Frederic").ToList();\r\n\r\nConsole.WriteLine(lstQuery.Count); //Retoune 0\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"tri-orderby",children:["Tri ",(0,i.jsx)(n.code,{children:"OrderBy"})]}),"\n",(0,i.jsxs)(n.p,{children:["Pour effectuer un tri sur une requ\xeate, il est plus facile d'utiliser la ",(0,i.jsx)(n.strong,{children:"syntaxe Query"})," que la ",(0,i.jsx)(n.strong,{children:"syntaxe Lambda"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour trier la liste de ",(0,i.jsx)(n.strong,{children:"Personne"})," en fonction du ",(0,i.jsx)(n.strong,{children:"nom"})," en ordre ",(0,i.jsx)(n.strong,{children:"croissant"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"//Query\r\nList<Personne> lstTriQuery = (from lqPersonne in list\r\n                              orderby\r\n                                lqPersonne.Nom \r\n                              select\r\n                                lqPersonne).ToList();\r\n\r\n//Lambda\r\n List<Personne> lstTriLambda = list.OrderBy(lqPersonne => lqPersonne.Nom).ToList();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour trier la liste de ",(0,i.jsx)(n.strong,{children:"Personne"})," en fonction du ",(0,i.jsx)(n.strong,{children:"nom"})," en ordre ",(0,i.jsx)(n.strong,{children:"d\xe9croissant"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"//Query\r\nList<Personne> lstTriQuery = (from lqPersonne in list\r\n                              orderby\r\n                                lqPersonne.Nom descending\r\n                              select\r\n                                lqPersonne).ToList();\r\n\r\n//Lambda\r\n List<Personne> lstTriLambda = list.OrderByDescending(lqPersonne => lqPersonne.Nom).ToList();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour un seul item, ce n'est pas tr\xe8s compliqu\xe9 le ",(0,i.jsx)(n.strong,{children:"Lambda"}),". Mais pour plusieurs crit\xe8res voici la syntaxe."]}),"\n",(0,i.jsxs)(n.p,{children:["Le tri sera fait en ordre croissant pour le ",(0,i.jsx)(n.strong,{children:"Prenom"})," et ensuite le ",(0,i.jsx)(n.strong,{children:"Nom"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Personne> lstTriQuery = (from lqPersonne in list\r\n                              orderby\r\n                                lqPersonne.Prenom,\r\n                                lqPersonne.Nom\r\n                              select\r\n                                lqPersonne).ToList();\r\n\r\nList<Personne> lstTriLambda = list.OrderBy(lqPersonne => lqPersonne.Prenom).ThenBy(lqPersonne => lqPersonne.Nom).ToList();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Il n'est pas possible de les regrouper tous les champs dans la m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OrderBy"})})," ou ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"OrderByDescending"})}),". Il faut ajouter la m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ThenBy"})})," ou ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ThenByDescending"})})," pour chacun des champs additionnels."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Personne> lstTriQuery = (from lqPersonne in list\r\n                              orderby\r\n                                lqPersonne.Prenom,\r\n                                lqPersonne.Nom descending\r\n                              select\r\n                                lqPersonne).ToList();\r\n\r\nList<Personne> lstTriLambda = list.OrderBy(lqPersonne => lqPersonne.Prenom).ThenByDescending(lqPersonne => lqPersonne.Nom).ToList();\n"})}),"\n",(0,i.jsx)(n.p,{children:"La liste peut devenir longue si le nombre de champs pour le tri est \xe9norme."}),"\n",(0,i.jsxs)(n.h2,{id:"countif-count",children:["CountIf ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Count()"})})]}),"\n",(0,i.jsxs)(n.p,{children:["Il est possible de faire un ",(0,i.jsx)(n.strong,{children:"CountIf"})," avec ",(0,i.jsx)(n.strong,{children:"LINQ"}),". Il faut utiliser la m\xe9thode ",(0,i.jsx)(n.strong,{children:"Count()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour le ",(0,i.jsx)(n.strong,{children:"CountIf"})," il est plus efficace d'utiliser la ",(0,i.jsx)(n.strong,{children:"syntaxe Lamba"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Par exemple, il faut obtenir le nombre de ",(0,i.jsx)(n.strong,{children:"Personne"})," avec le ",(0,i.jsx)(n.strong,{children:"pr\xe9nom"})," Fran\xe7ois."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'//Query\r\nint nbFrancoisQuery = (from lqPersonne in list\r\n                       where\r\n                            lqPersonne.Prenom == "Fran\xe7ois"\r\n                       select\r\n                            lqPersonne).Count(); //Retourne 2\r\n\r\n//Lambda\r\nint nbFrancoisLambda = lstTriLambda.Count(lqPersonne => lqPersonne.Prenom == "Fran\xe7ois"); //Retourne 2\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Avec la syntaxe ",(0,i.jsx)(n.strong,{children:"Lambda"}),", il est possible de mettre la condition directement dans la m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Count()"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"objet-dynamique",children:"Objet dynamique"}),"\n",(0,i.jsxs)(n.p,{children:["Il est possible de cr\xe9er des objets ",(0,i.jsx)(n.strong,{children:"dynamiquement"})," avec C#. Pour ",(0,i.jsx)(n.strong,{children:"LINQ"}),", cette fonctionnalit\xe9 peut \xeatre tr\xe8s pratique, car il permet d'\xe9viter de cr\xe9er un objet pour tous les types de requ\xeates."]}),"\n",(0,i.jsx)(n.p,{children:"Par contre, l'utilisation d'objets dynamiques fonctionne uniquement si celui-ci est utilis\xe9 uniquement dans le bloc de code. S'il doit \xeatre retourn\xe9 dans une m\xe9thode ou utilis\xe9 comme param\xe8tre, son utilisation ne fonctionne plus."}),"\n",(0,i.jsxs)(n.p,{children:["Pour cr\xe9er un objet dynamique, il faut utiliser le type ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"var"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var personne = new\r\n{\r\n    NomComplet = "Fran\xe7ois St-Hilaire",\r\n    Age = 22\r\n};\r\n//var est un type anonyme string, int\n'})}),"\n",(0,i.jsx)(n.p,{children:"Dans le cas de la liste de Personne, s'il faut retourner un objet contenant le nom complet dans une seule propri\xe9t\xe9, il est possible de le faire avec un objet dynamique."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'//Query\r\nvar lstDynQuery = (from lqPersonne in list\r\n                   select new\r\n                   {\r\n                       Id = lqPersonne.Id,\r\n                       Nom = $"{lqPersonne.Prenom} {lqPersonne.Nom}"\r\n                   }).ToList();\r\n\r\n//Lambda\r\nvar lstDynLambda = list.Select(lqPersonne => new { Id = lqPersonne.Id, Nom = $"{lqPersonne.Prenom} {lqPersonne.Nom}" }).ToList();\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Le type ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"var"})})," dans ce contexte est une ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"List<>"})})," d'un objet dynamique ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"int"})}),", ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"string"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"\xe9l\xe9ments-distincts",children:"\xc9l\xe9ments distincts"}),"\n",(0,i.jsx)(n.p,{children:"Avec les listes, il est possible d'obtenir les \xe9l\xe9ments distincts s'il y a des doublons."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> liste = new List<int> { 1, 1, 3, 4, 6, 7, 3, 6 };\r\nList<int> listeDistinct = liste.Distinct().ToList(); // 1, 3, 4, 6, 7\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour les classes, il faut ajouter impl\xe9menter les m\xe9thodes ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Equals"})})," et ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"GetHashCode"})})," pour \xeatre en mesure d'utiliser le ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Distinct"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"th\xe9orie-des-ensembles---intersection",children:"Th\xe9orie des ensembles - Intersection"}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de trouver les \xe9l\xe9ments communs dans les 2 listes gr\xe2ce \xe0 la th\xe9orique des ensembles."}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Intersect"})})," permet de voir l'intersection des 2 listes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> liste1 = new List<int> { 1, 3, 4, 6, 7 };\r\nList<int> liste2 = new List<int> { 1, 2, 4, 5, 8, 9 };\r\n\r\nList<int> listeIntersect = liste1.Intersect(liste2).ToList(); //1, 4 => liste1 \u2229 liste2\n"})}),"\n",(0,i.jsx)(n.h2,{id:"th\xe9orie-des-ensembles---union",children:"Th\xe9orie des ensembles - Union"}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de regrouper tous les \xe9l\xe9ments des 2 listes gr\xe2ce \xe0 la th\xe9orique des ensembles."}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Union"})})," permet de voir l'intersection des 2 listes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> liste1 = new List<int> { 1, 3, 4, 6, 7 };\r\nList<int> liste2 = new List<int> { 1, 2, 4, 5, 8, 9 };\r\n\r\nList<int> listeUnion = liste1.Union(liste2).ToList(); //1, 2, 3, 4, 5, 6, 7, 8, 9 => liste1 \u222a liste2\n"})}),"\n",(0,i.jsx)(n.h2,{id:"th\xe9orie-des-ensembles---diff\xe9rence",children:"Th\xe9orie des ensembles - Diff\xe9rence"}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de trouver les \xe9l\xe9ments diff\xe9rents dans les 2 listes gr\xe2ce \xe0 la th\xe9orique des ensembles."}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Except"})})," permet de voir la diff\xe9rence entre les 2 listes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<int> liste1 = new List<int> { 1, 3, 4, 6, 7 };\r\nList<int> liste2 = new List<int> { 1, 2, 4, 5, 8, 9 };\r\n\r\nList<int> listeDiff1 = liste1.Except(liste2).ToList(); //3, 6, 7 => liste1 \\ liste2\r\nList<int> listeDiff2 = liste2.Except(liste1).ToList(); //2, 5, 8, 9 =>  liste2 \\ liste1\n"})}),"\n",(0,i.jsx)(n.h1,{id:"cr\xe9ation-du-projet",children:"Cr\xe9ation du projet"}),"\n",(0,i.jsxs)(n.p,{children:["Pour faire vos exercices, cr\xe9ez une application console en ",(0,i.jsx)(n.strong,{children:".NET 7"})]}),"\n",(0,i.jsx)(n.p,{children:"Cr\xe9ez un projet."}),"\n",(0,i.jsx)("img",{src:"/4N1_2024/img/04_projet_1.png"}),"\n",(0,i.jsxs)(n.p,{children:["S\xe9lectionnez le type ",(0,i.jsx)(n.strong,{children:"Application Console"})," en ",(0,i.jsx)(n.strong,{children:"C#"}),". Important, il ne faut pas avoir la mention ",(0,i.jsx)(n.strong,{children:"(.NET Framework)"}),"."]}),"\n",(0,i.jsx)("img",{src:"/4N1_2024/img/04_projet_2.png"}),"\n",(0,i.jsxs)(n.p,{children:["Nommez le projet ",(0,i.jsx)(n.strong,{children:"ConsoleLINQ"}),"."]}),"\n",(0,i.jsx)("img",{src:"/4N1_2024/img/04_projet_3.png"}),"\n",(0,i.jsxs)(n.p,{children:["S\xe9lectionnez l'infrastructure ",(0,i.jsx)(n.strong,{children:".NET 7.0"})," et d\xe9cochez ",(0,i.jsx)(n.strong,{children:"N'utilisez pas d'instructions de niveau sup\xe9rieur."})]}),"\n",(0,i.jsx)("img",{src:"/4N1_2024/img/04_projet_4.png"}),"\n",(0,i.jsx)(n.h2,{id:"exercices",children:"Exercices"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez l'enum ",(0,i.jsx)(n.strong,{children:"TypeAnimal"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace ConsoleLINQ;\r\n\r\npublic enum TypeAnimal\r\n{\r\n    Mammifere,\r\n    Reptile,\r\n    Oiseau,\r\n    Amphibien,\r\n    Poisson,\r\n    Crustace,\r\n    Insecte\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"Animal"})," et copiez le code ci-dessous."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace ConsoleLINQ;\r\n\r\npublic class Animal\r\n{\r\n    public int AnimalId { get; set; }\r\n    public string Nom { get; set; }\r\n    public string Espece { get; set; }\r\n    public decimal Poids { get; set; }\r\n    public bool Male { get; set; }\r\n    public string Proprietaire { get; set; }\r\n    public DateTime Naissance { get; set; }\r\n    public TypeAnimal TypeAnimal { get; set; }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"GenerateurListeAnimal"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'namespace ConsoleLINQ;\r\n\r\npublic class GenerateurListeAnimal\r\n{\r\n    public static List<Animal> ObtenirListe()\r\n    {\r\n        List<Animal> listeAnimal = new List<Animal>();\r\n\r\n        listeAnimal.Add(new Animal() { AnimalId = 1, Nom = "Peanut", Espece = "Chat", Poids = 6.5m, Male = true, Proprietaire = "Martin Simard", Naissance = new DateTime(2018, 12, 17), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 2, Nom = "Poppey", Espece = "Chien", Poids = 9.5m, Male = true, Proprietaire = "Simon Turcotte", Naissance = new DateTime(2011, 05, 28), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 3, Nom = "Pincette", Espece = "Homard", Poids = 3.1m, Male = false, Proprietaire = "Homer Simpson", Naissance = new DateTime(2011, 06, 02), TypeAnimal = TypeAnimal.Crustace });\r\n        listeAnimal.Add(new Animal() { AnimalId = 4, Nom = "Doris", Espece = "Poisson-chirurgien", Poids = 0.1m, Male = false, Proprietaire = "Pascal Tanguay", Naissance = new DateTime(2021, 08, 31), TypeAnimal = TypeAnimal.Poisson });\r\n        listeAnimal.Add(new Animal() { AnimalId = 5, Nom = "Serge", Espece = "Chat", Poids = 2.3m, Male = true, Proprietaire = "Michel Simard", Naissance = new DateTime(2021, 07, 06), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 6, Nom = "Snape", Espece = "Serpent", Poids = 1.1m, Male = false, Proprietaire = "Martin Morin", Naissance = new DateTime(2019, 03, 30), TypeAnimal = TypeAnimal.Reptile });\r\n        listeAnimal.Add(new Animal() { AnimalId = 7, Nom = "Pitpit", Espece = "Rossignol", Poids = 0.4m, Male = true, Proprietaire = "Sylvain Bernier", Naissance = new DateTime(2016, 12, 19), TypeAnimal = TypeAnimal.Oiseau });\r\n        listeAnimal.Add(new Animal() { AnimalId = 8, Nom = "Croco", Espece = "Crocodile", Poids = 25.4m, Male = false, Proprietaire = "Jean-Fran\xe7ois Turcotte", Naissance = new DateTime(2010, 11, 21), TypeAnimal = TypeAnimal.Reptile });\r\n        listeAnimal.Add(new Animal() { AnimalId = 9, Nom = "Prince", Espece = "Grenouille", Poids = 0.2m, Male = false, Proprietaire = "Pascal Bernier", Naissance = new DateTime(2022, 01, 01), TypeAnimal = TypeAnimal.Amphibien });\r\n        listeAnimal.Add(new Animal() { AnimalId = 10, Nom = "Bob", Espece = "Rat", Poids = 0.7m, Male = false, Proprietaire = "Simon Turcotte", Naissance = new DateTime(2015, 07, 15), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 11, Nom = "Arnold", Espece = "Fourmis", Poids = 0.00001m, Male = false, Proprietaire = "Jean-Michel Chabot", Naissance = new DateTime(2021, 11, 15), TypeAnimal = TypeAnimal.Insecte });\r\n        listeAnimal.Add(new Animal() { AnimalId = 12, Nom = "Crispie", Espece = "Salamande", Poids = 0.5m, Male = true, Proprietaire = "Michel St-Pierre", Naissance = new DateTime(2019, 09, 14), TypeAnimal = TypeAnimal.Reptile });\r\n        listeAnimal.Add(new Animal() { AnimalId = 13, Nom = "Hot-dog", Espece = "Chien", Poids = 3.3m, Male = true, Proprietaire = "Fran\xe7ois Turcotte", Naissance = new DateTime(2016, 11, 09), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 14, Nom = "Poppey", Espece = "Chien", Poids = 4.3m, Male = false, Proprietaire = "V\xe9ronique Morin", Naissance = new DateTime(2014, 07, 11), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 15, Nom = "Luigi", Espece = "Chien", Poids = 7.5m, Male = true, Proprietaire = "Michel St-Pierre", Naissance = new DateTime(2020, 02, 15), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 16, Nom = "Mario", Espece = "Chat", Poids = 4.5m, Male = true, Proprietaire = "Michel St-Pierre", Naissance = new DateTime(2020, 10, 30), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 17, Nom = "Steak", Espece = "Chat", Poids = 2.6m, Male = false, Proprietaire = "Marge Simpson", Naissance = new DateTime(2019, 05, 05), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 18, Nom = "Minette", Espece = "Chat", Poids = 2.7m, Male = true, Proprietaire = "Bertrand Drouin", Naissance = new DateTime(2017, 04, 12), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 19, Nom = "Nemo", Espece = "Poisson-clown", Poids = 0.2m, Male = true, Proprietaire = "Bertrand Bernier", Naissance = new DateTime(2020, 04, 15), TypeAnimal = TypeAnimal.Poisson });\r\n        listeAnimal.Add(new Animal() { AnimalId = 20, Nom = "Cricri", Espece = "Criquet", Poids = 0.00002m, Male = true, Proprietaire = "Michel Simard", Naissance = new DateTime(2021, 10, 15), TypeAnimal = TypeAnimal.Insecte });\r\n        listeAnimal.Add(new Animal() { AnimalId = 21, Nom = "Ciel", Espece = "Pigeon", Poids = 0.9m, Male = false, Proprietaire = "Michel Simard", Naissance = new DateTime(2019, 07, 22), TypeAnimal = TypeAnimal.Oiseau });\r\n        listeAnimal.Add(new Animal() { AnimalId = 22, Nom = "Pirate", Espece = "Perroquet", Poids = 1.1m, Male = false, Proprietaire = "Michel Simard", Naissance = new DateTime(2016, 09, 09), TypeAnimal = TypeAnimal.Oiseau });\r\n        listeAnimal.Add(new Animal() { AnimalId = 23, Nom = "Labo", Espece = "Rat", Poids = 0.9m, Male = true, Proprietaire = "Jean-Michel Turcotte", Naissance = new DateTime(2017, 06, 12), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 24, Nom = "Doris", Espece = "Cochon d\'Inde", Poids = 1.2m, Male = true, Proprietaire = "Fran\xe7ois Turcotte", Naissance = new DateTime(2019, 09, 14), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 25, Nom = "Prince", Espece = "Chat", Poids = 5.2m, Male = true, Proprietaire = "Bertrand Drouin", Naissance = new DateTime(2009, 07, 07), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 26, Nom = "Arnold", Espece = "Chien", Poids = 6.4m, Male = true, Proprietaire = "V\xe9ronique St-Pierre", Naissance = new DateTime(2008, 02, 25), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 27, Nom = "Simba", Espece = "Lion", Poids = 62.3m, Male = true, Proprietaire = "Pascal Lassonde", Naissance = new DateTime(2005, 09, 12), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 28, Nom = "Lapinette", Espece = "Lapin", Poids = 1.7m, Male = false, Proprietaire = "Simon Martel", Naissance = new DateTime(2021, 04, 18), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 29, Nom = "Boule-de-poils", Espece = "Lapin", Poids = 1.5m, Male = false, Proprietaire = "Simon Martel", Naissance = new DateTime(2021, 04, 18), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 30, Nom = "Terreur", Espece = "Serpent", Poids = 1.4m, Male = false, Proprietaire = "Pascal Tanguay", Naissance = new DateTime(2018, 11, 30), TypeAnimal = TypeAnimal.Reptile });\r\n        listeAnimal.Add(new Animal() { AnimalId = 31, Nom = "Piquette", Espece = "Ch\xe8vre", Poids = 9.5m, Male = false, Proprietaire = "V\xe9ronique St-Pierre", Naissance = new DateTime(2019, 06, 25), TypeAnimal = TypeAnimal.Mammifere });\r\n        listeAnimal.Add(new Animal() { AnimalId = 32, Nom = "Biquette", Espece = "Ch\xe8vre", Poids = 9.8m, Male = false, Proprietaire = "V\xe9ronique St-Pierre", Naissance = new DateTime(2018, 09, 25), TypeAnimal = TypeAnimal.Mammifere });\r\n\r\n\r\n        return listeAnimal;\r\n\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"Program.cs"}),", d\xe9butez avec cette ligne pour r\xe9cup\xe9rer la liste d'objets de type ",(0,i.jsx)(n.strong,{children:"Animal"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using ConsoleLINQ;\r\n\r\nList<Animal> lstAnimal = GenerateurListeAnimal.ObtenirListe();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour chacun des exercices, nommez votre objet de retour comme indiqu\xe9 ci-dessous. Inscrivez directement les requ\xeates dans le fichier ",(0,i.jsx)(n.strong,{children:"Program.cs"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour chacun des exercices, effectuez la requ\xeate en syntaxe ",(0,i.jsx)(n.strong,{children:"Lamba"})," et ",(0,i.jsx)(n.strong,{children:"Query"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"//Pour l'exercice 1.\r\n//Si un seul objet\r\nAnimal ex1Lambda = ...\r\nAnimal ex1Query = ...\r\n\r\n//Si liste\r\nList<Animal> ex1Lambda = ...\r\nList<Animal> ex1Query = ...\r\n\r\n//Si count\r\nint ex1Lambda = ...\r\nint ex1Query = ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"exercice-1",children:"Exercice 1"}),"\n",(0,i.jsxs)(n.p,{children:["Trouvez tous les animaux ayant pour nom ",(0,i.jsx)(n.strong,{children:"Arnold"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'List<Animal> ex1Lamba = listeAnimal.Where(lqAnimal => lqAnimal.Nom == "Arnold").ToList();\r\nList<Animal> ex1Query = (from lqAnimal in listeAnimal\r\n                         where\r\n                              lqAnimal.Nom == "Arnold"\r\n                         select\r\n                              lqAnimal).ToList();\r\n\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-2",children:"Exercice 2"}),"\n",(0,i.jsxs)(n.p,{children:["Triez les animaux par ",(0,i.jsx)(n.strong,{children:"Nom"})," et retournez le premier."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Animal ex2Lambda = listeAnimal.OrderBy(lqAnimal => lqAnimal.Nom).First();\r\nAnimal ex2Query = (from lqAnimal in listeAnimal\r\n                   orderby\r\n                        lqAnimal.Nom\r\n                   select\r\n                        lqAnimal).First();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-3",children:"Exercice 3"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez une liste tri\xe9e par ",(0,i.jsx)(n.strong,{children:"Nom"})," de propri\xe9taire en ordre ",(0,i.jsx)(n.strong,{children:"croissant"})," et par ",(0,i.jsx)(n.strong,{children:"Date de naissance"})," en ordre ",(0,i.jsx)(n.strong,{children:"d\xe9croissant"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Animal> ex3Lambda = listeAnimal.OrderBy(lqAnimal => lqAnimal.Nom).ThenByDescending(lqAnimal => lqAnimal.Naissance).ToList();\r\nList<Animal> ex3Query = (from lqAnimal in listeAnimal\r\n                         orderby\r\n                            lqAnimal.Nom,\r\n                            lqAnimal.Naissance descending\r\n                         select\r\n                            lqAnimal).ToList();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-4",children:"Exercice 4"}),"\n",(0,i.jsx)(n.p,{children:"Retournez l'animal le plus \xe2g\xe9."}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Animal ex4Lambda = listeAnimal.OrderBy(lqAnimal => lqAnimal.Naissance).First();\r\nAnimal ex4Query = (from lqAnimal in listeAnimal\r\n                   orderby\r\n                        lqAnimal.Naissance\r\n                   select\r\n                        lqAnimal).First();\r\n\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-5",children:"Exercice 5"}),"\n",(0,i.jsx)(n.p,{children:"Retournez le nombre d'animaux qui ont 4 ans et plus."}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int ex5Lambda = listeAnimal.Count(lqAnimal => lqAnimal.Naissance <= DateTime.Now.Date.AddYears(-4));\r\nint ex5Query = (from lqAnimal in listeAnimal\r\n                where\r\n                    lqAnimal.Naissance <= DateTime.Now.Date.AddYears(-4)\r\n                select\r\n                    lqAnimal).Count();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-6",children:"Exercice 6"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez tous les animaux qui sont des  ",(0,i.jsx)(n.strong,{children:"m\xe2les"})," et qui sont des ",(0,i.jsx)(n.strong,{children:"mammif\xe8res"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Utilisez l'",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"enum"})})," pour faire la s\xe9lection du type d'animal."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Animal> ex6Lamda = listeAnimal.Where(lqAnimal => lqAnimal.Male == true && lqAnimal.TypeAnimal == TypeAnimal.Mammifere).ToList();\r\nList<Animal> ex6Query = (from lqAnimal in listeAnimal\r\n                         where\r\n                            lqAnimal.Male == true &&\r\n                            lqAnimal.TypeAnimal == TypeAnimal.Mammifere\r\n                         select\r\n                            lqAnimal).ToList();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-7",children:"Exercice 7"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez le nombre d'animaux de type ",(0,i.jsx)(n.strong,{children:"Reptile"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int ex7Lambda = listeAnimal.Count(lqAnimal => lqAnimal.TypeAnimal == TypeAnimal.Reptile);\r\nint ex7Query = (from lqAnimal in listeAnimal\r\n                where\r\n                    lqAnimal.TypeAnimal == TypeAnimal.Reptile\r\n                select\r\n                    lqAnimal).Count();\r\n\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-8",children:"Exercice 8"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez tous les animaux que leur ",(0,i.jsx)(n.strong,{children:"nom"})," commence par ",(0,i.jsx)(n.strong,{children:"P"})," ou ",(0,i.jsx)(n.strong,{children:"L"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'List<Animal> ex8Lambda = listeAnimal.Where(lqAnimal => lqAnimal.Nom.StartsWith("P") || lqAnimal.Nom.StartsWith("L")).ToList();\r\nList<Animal> ex8Query = (from lqAnimal in listeAnimal\r\n                         where\r\n                            lqAnimal.Nom.StartsWith("P") ||\r\n                            lqAnimal.Nom.StartsWith("L")\r\n                         select\r\n                            lqAnimal).ToList();\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-9",children:"Exercice 9"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez un objet qui contient le ",(0,i.jsx)(n.strong,{children:"nom"})," de l'animal,  ",(0,i.jsx)(n.strong,{children:"l'esp\xe8ce"})," et le ",(0,i.jsx)(n.strong,{children:"type"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Utilisez un type **var **pour l'objet de retour."}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var ex9Lambda = listeAnimal.Select(lqAnimal => new { Nom = lqAnimal.Nom, Espece = lqAnimal.Espece, TypeAnimal = lqAnimal.TypeAnimal }).ToList();\r\nvar ex9Query = (from lqAnimal in listeAnimal\r\n                select new\r\n                {\r\n                    Nom = lqAnimal.Nom,\r\n                    Espece = lqAnimal.Espece,\r\n                    TypeAnimal = lqAnimal.TypeAnimal\r\n                }).ToList();\r\n\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-10",children:"Exercice 10"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez un objet qui contient le ",(0,i.jsx)(n.strong,{children:"nom"})," de l'animal, ",(0,i.jsx)(n.strong,{children:"l'esp\xe8ce"})," et le ",(0,i.jsx)(n.strong,{children:"type"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Le nom de l'animal doit contenir le ",(0,i.jsx)(n.strong,{children:"nom de famille"})," du propri\xe9taire. Utilisez un ",(0,i.jsx)(n.strong,{children:"split"})," pour s\xe9parer le pr\xe9nom du nom."]}),"\n",(0,i.jsxs)(n.p,{children:["Utilisez un type ",(0,i.jsx)(n.strong,{children:"var"})," pour l'objet de retour."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var ex10Lambda = listeAnimal.Select(lqAnimal => new { Nom = $\"{lqAnimal.Nom} {lqAnimal.Proprietaire.Split(' ')[1]}\", Espece = lqAnimal.Espece, TypeAnimal = lqAnimal.TypeAnimal }).ToList();\r\nvar ex10Query = (from lqAnimal in listeAnimal\r\n                 select new\r\n                 {\r\n                     Nom = $\"{lqAnimal.Nom} {lqAnimal.Proprietaire.Split(' ')[1]}\",\r\n                     Espece = lqAnimal.Espece,\r\n                     TypeAnimal = lqAnimal.TypeAnimal\r\n                 }).ToList();\r\n\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-11",children:"Exercice 11"}),"\n",(0,i.jsx)(n.p,{children:"Retournez l'animal qui a le grand nom (plus de lettres)."}),"\n",(0,i.jsxs)(n.p,{children:["Utilisez un ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"LastOrDefault()"})}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Animal? ex11Lambda = listeAnimal.OrderBy(lqAnimal => lqAnimal.Nom.Length).LastOrDefault();\r\nAnimal? ex11Query = (from lqAnimal in listeAnimal\r\n                    orderby\r\n                        lqAnimal.Nom.Length\r\n                    select lqAnimal).LastOrDefault();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-12",children:"Exercice 12"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez tous les ",(0,i.jsx)(n.strong,{children:"mammif\xe8res"})," qui sont des ",(0,i.jsx)(n.strong,{children:"femelles"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Triez par le ",(0,i.jsx)(n.strong,{children:"propri\xe9taire"})," de l'animal en ordre ",(0,i.jsx)(n.strong,{children:"croissant"})," et par la ",(0,i.jsx)(n.strong,{children:"date de naissance"})," en ordre ",(0,i.jsx)(n.strong,{children:"d\xe9croissant"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Animal> ex12Lambda = listeAnimal.Where(lqAnimal => lqAnimal.Male == false && lqAnimal.TypeAnimal == TypeAnimal.Mammifere)\r\n                                     .OrderBy(lqAnimal => lqAnimal.Proprietaire)\r\n                                     .ThenByDescending(lqAnimal => lqAnimal.Naissance).ToList();\r\n\r\nList<Animal> ex12Query = (from lqAnimal in listeAnimal\r\n                          where\r\n                            lqAnimal.Male == false &&\r\n                            lqAnimal.TypeAnimal == TypeAnimal.Mammifere\r\n                          orderby\r\n                            lqAnimal.Proprietaire,\r\n                            lqAnimal.Naissance descending\r\n                          select\r\n                            lqAnimal).ToList();\r\n\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-13",children:"Exercice 13"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez une liste d'objet. Il doit avoir le ",(0,i.jsx)(n.strong,{children:"Id"}),", le ",(0,i.jsx)(n.strong,{children:"Nom"})," de l'animal, ",(0,i.jsx)(n.strong,{children:"PoidsLbs"}),", ",(0,i.jsx)(n.strong,{children:"PoidsKg"}),", et le ",(0,i.jsx)(n.strong,{children:"Sexe"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Retournez un objet qui contient le poids en ",(0,i.jsx)(n.strong,{children:"livre"}),". Le poids actuel dans l'objet est en ",(0,i.jsx)(n.strong,{children:"kilogramme"}),". La formule est ",(0,i.jsx)(n.strong,{children:"Lbs = Kg * 2,2"})]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut \xe9crire ",(0,i.jsx)(n.strong,{children:"M\xe2le"})," si c'est Male = true et ",(0,i.jsx)(n.strong,{children:"Femelle"})," si Male = false pour la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Sexe"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'var ex13Lambda = listeAnimal.Select(lqAnimal => new\r\n{\r\n    Id = lqAnimal.AnimalId,\r\n    Nom = lqAnimal.Nom,\r\n    PoidsLbs = lqAnimal.Poids * 2.2m,\r\n    PoidsKg = lqAnimal.Poids,\r\n    Sexe = (lqAnimal.Male == true ? "M\xe2le" : "Femelle")\r\n}).ToList();\r\n\r\nvar ex13Query = (from lqAnimal in listeAnimal\r\n                 select\r\n                    new\r\n                    {\r\n                        Id = lqAnimal.AnimalId,\r\n                        Nom = lqAnimal.Nom,\r\n                        PoidsLbs = lqAnimal.Poids * 2.2m,\r\n                        PoidsKg = lqAnimal.Poids,\r\n                        Sexe = (lqAnimal.Male == true ? "M\xe2le" : "Femelle")\r\n                    }).ToList();\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-14",children:"Exercice 14"}),"\n",(0,i.jsx)(n.p,{children:"Retournez tous les animaux n\xe9s en d\xe9cembre."}),"\n",(0,i.jsx)(n.p,{children:"Triez le r\xe9sultat du plus vieux au plus jeune."}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var ex14Lambda = listeAnimal.Where(lqAnimal => lqAnimal.Naissance.Month == 12 || lqAnimal.Naissance.Month == 5)\r\n                            .OrderByDescending(lqAnimal => lqAnimal.Naissance).ToList();\r\n\r\nvar ex14Query = (from lqAnimal in listeAnimal\r\n                 where\r\n                    lqAnimal.Naissance.Month == 12 ||\r\n                    lqAnimal.Naissance.Month == 5\r\n                 orderby\r\n                    lqAnimal.Naissance descending\r\n                 select\r\n                    lqAnimal).ToList();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-15",children:"Exercice 15"}),"\n",(0,i.jsx)(n.p,{children:"Retournez la liste des noms des animaux. Il faut \xe9liminer les doublons."}),"\n",(0,i.jsx)(n.p,{children:"Triez la liste en ordre alphab\xe9tique."}),"\n",(0,i.jsxs)(n.p,{children:["Utilisez la m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Distinct()"})})," avant de faire le ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:".ToList()"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Retournez une liste de ",(0,i.jsx)(n.strong,{children:"string"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<string> ex15Lambda = listeAnimal.OrderBy(lqAnimal => lqAnimal.Nom).Select(lqAnimal => lqAnimal.Nom).Distinct().ToList();\r\nList<string> ex15Query = (from lqAnimal in listeAnimal\r\n                          orderby\r\n                               lqAnimal.Nom\r\n                          select\r\n                               lqAnimal.Nom).Distinct().ToList();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-16",children:"Exercice 16"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez dans un objet la liste des ",(0,i.jsx)(n.strong,{children:"ids"})," qui sont des ",(0,i.jsx)(n.strong,{children:"m\xe2les"})," et une liste des ",(0,i.jsx)(n.strong,{children:"ids"})," qui sont  des ",(0,i.jsx)(n.strong,{children:"femelles"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut cr\xe9ez l'objet dynamique et ses propri\xe9t\xe9s utilisent du ",(0,i.jsx)(n.strong,{children:"Lambda"})," ou du ",(0,i.jsx)(n.strong,{children:"Query"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["L'objet doit avoir comme propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"IdMale"})," et ",(0,i.jsx)(n.strong,{children:"IdFemelle"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var ex16Lambda = new\r\n{\r\n    IdMale = listeAnimal.Where(lqAnimal => lqAnimal.Male == true).Select(lqAnimal => lqAnimal.AnimalId).ToList(),\r\n    IdFemelle = listeAnimal.Where(lqAnimal => lqAnimal.Male == false).Select(lqAnimal => lqAnimal.AnimalId).ToList()\r\n};\r\n\r\nvar ex16Query = new\r\n{\r\n    IdMale = (from lqAnimal in listeAnimal\r\n              where\r\n                  lqAnimal.Male == true\r\n              select\r\n                  lqAnimal.AnimalId).ToList(),\r\n    IdFemelle = (from lqAnimal in listeAnimal\r\n                 where\r\n                     lqAnimal.Male == false\r\n                 select\r\n                     lqAnimal.AnimalId).ToList()\r\n};\r\n\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-17",children:"Exercice 17"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez la liste des animaux que leur propri\xe9taire on un ",(0,i.jsx)(n.strong,{children:"pr\xe9nom compos\xe9"}),". Utilisez un ",(0,i.jsx)(n.strong,{children:"split"})," et un ",(0,i.jsx)(n.strong,{children:"contains"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Triez la liste par le nom du propri\xe9taire."}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Animal> ex17Lambda = listeAnimal.Where(lqAnimal => lqAnimal.Proprietaire.Split(' ')[0].Contains(\"-\") == true)\r\n                                     .OrderBy(lqAnimal => lqAnimal.Proprietaire).ToList();\r\n\r\nList<Animal> ex18Query = (from lqAnimal in listeAnimal\r\n                          where\r\n                               lqAnimal.Proprietaire.Split(' ')[0].Contains(\"-\") == true\r\n                          orderby\r\n                               lqAnimal.Proprietaire\r\n                          select\r\n                                lqAnimal).ToList();\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-18",children:"Exercice 18"}),"\n",(0,i.jsxs)(n.p,{children:["Retournez la liste des ",(0,i.jsx)(n.strong,{children:"propri\xe9taires"})," qui ont des ",(0,i.jsx)(n.strong,{children:"chiens"}),". La liste doit avoir seulement des \xe9l\xe9ments ",(0,i.jsx)(n.strong,{children:"distincts"}),". Utilisez la syntaxe ",(0,i.jsx)(n.strong,{children:"Lambda"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Retournez la liste des ",(0,i.jsx)(n.strong,{children:"propri\xe9taires"})," qui ont des ",(0,i.jsx)(n.strong,{children:"chats"}),". La liste doit avoir seulement des \xe9l\xe9ments ",(0,i.jsx)(n.strong,{children:"distincts"}),". Utilisez la syntaxe ",(0,i.jsx)(n.strong,{children:"Query"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Utilisez 2 listes diff\xe9rentes. Exemple : ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"List<string> ex18ChienLambda"})})," et ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"List<string> ex18ChatQuery"})})," ."]}),"\n",(0,i.jsxs)(n.p,{children:["Retournez la liste des propri\xe9taires qui ont des chats et des chiens. Utilisez la m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Intersect"})})," (intersection)."]}),"\n",(0,i.jsxs)(n.p,{children:["Retournez la liste des propri\xe9taires qui ont soit un chat ou un chien, mais pas les 2. Utilisez la m\xe9thode ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Union"})})," et ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Except"})})," (diff\xe9rence) et le r\xe9sultat de l'intersection."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'List<string> ex18ChienLambda = listeAnimal.Where(lqAnimal => lqAnimal.Espece == "Chien")\r\n                                          .Select(lqAnimal => lqAnimal.Proprietaire).Distinct().ToList();\r\n\r\nList<string> ex18ChatQuery = (from lqAnimal in listeAnimal\r\n                              where\r\n                                   lqAnimal.Espece == "Chat"\r\n                              select\r\n                                   lqAnimal.Proprietaire).Distinct().ToList();\r\n\r\nList<string> ex18ChatEtChien = ex18ChatQuery.Intersect(ex18ChienLambda).ToList();\r\n\r\nList<string> ex18ChatOuChien = ex18ChatQuery.Union(ex18ChienLambda).Except(ex18ChatEtChien).ToList();\r\n\r\n\n'})})]}),"\n",(0,i.jsx)(n.h3,{id:"exercice-19",children:"Exercice 19"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez un dictionnaire de type ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Dictionary<int, Animal> ex20dicAnimal"})}),", o\xf9 la cl\xe9 est le ",(0,i.jsx)(n.strong,{children:"AnimalId"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Effectuez une boucle **foreach **et non par ",(0,i.jsx)(n.strong,{children:"LINQ"}),", car ce n'est pas possible directement."]}),"\n",(0,i.jsxs)(n.p,{children:["Au prochain cours, nous utiliserons l'extension de classe pour \xeatre en mesure de le faire avec ",(0,i.jsx)(n.strong,{children:"LINQ"}),"."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Solution"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Dictionary<int, Animal> ex19dicAnimal = new Dictionary<int, Animal>();\r\n\r\nforeach (Animal animal in listeAnimal)\r\n{\r\n    ex19dicAnimal.Add(animal.AnimalId, animal);\r\n}\n"})})]})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>t});var i=r(7294);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);