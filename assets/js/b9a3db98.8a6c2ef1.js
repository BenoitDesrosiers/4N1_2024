"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[9134],{9034:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=n(5893),a=n(1151);const i={sidebar_position:4},t="SuperCarte.Core",l={id:"WPF/supercarte_core",title:"SuperCarte.Core",description:"Cr\xe9ation du projet dans une solution existante",source:"@site/docs/70-WPF/supercarte_core.md",sourceDirName:"70-WPF",slug:"/WPF/supercarte_core",permalink:"/4N1_2024/docs/WPF/supercarte_core",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"NotesSidebar",previous:{title:"SuperCarte.EF",permalink:"/4N1_2024/docs/WPF/supercarte_ef"},next:{title:"SuperCarte.WPF",permalink:"/4N1_2024/docs/WPF/supercarte_wpf"}},o={},d=[{value:"Cr\xe9ation du projet dans une solution existante",id:"cr\xe9ation-du-projet-dans-une-solution-existante",level:2},{value:"Ajout des d\xe9pendances de projet",id:"ajout-des-d\xe9pendances-de-projet",level:2},{value:"G\xe9n\xe9ralisation du contexte",id:"g\xe9n\xe9ralisation-du-contexte",level:2},{value:"Obtenir un enregistrement sp\xe9cifique par sa cl\xe9",id:"obtenir-un-enregistrement-sp\xe9cifique-par-sa-cl\xe9",level:3},{value:"Repository non standard - Th\xe9orie",id:"repository-non-standard---th\xe9orie",level:2},{value:"Cr\xe9ation des Repositories sp\xe9cifiques",id:"cr\xe9ation-des-repositories-sp\xe9cifiques",level:2},{value:"RoleRepo",id:"rolerepo",level:3},{value:"UtilisateurRepo",id:"utilisateurrepo",level:3},{value:"EnsembleRepo",id:"ensemblerepo",level:3},{value:"CategorieRepo",id:"categorierepo",level:3},{value:"CarteRepo",id:"carterepo",level:3},{value:"UtilisateurCarteRepo",id:"utilisateurcarterepo",level:3}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,s.jsx)(r.h2,{id:"cr\xe9ation-du-projet-dans-une-solution-existante",children:"Cr\xe9ation du projet dans une solution existante"}),"\n",(0,s.jsxs)(r.p,{children:["Il faut ajouter le projet ",(0,s.jsx)(r.strong,{children:"Core"})," dans la solution."]}),"\n",(0,s.jsxs)(r.p,{children:["Ce projet aura les classes de type ",(0,s.jsx)(r.strong,{children:"Service"}),", de type ",(0,s.jsx)(r.strong,{children:"Repository"}),", de type ",(0,s.jsx)(r.strong,{children:"Validateur"})," et les mod\xe8les du domaine."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez un projet de type ",(0,s.jsx)(r.strong,{children:"Biblioth\xe8que de classe"}),". Il est important ",(0,s.jsx)(r.strong,{children:"de ne pas choisir"})," la version ",(0,s.jsx)(r.strong,{children:".NET Framework"}),"."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Nom du projet"})," : SuperCarte.Core"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Infrastructure"})," : .NET 7"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Pour le champ ",(0,s.jsx)(r.strong,{children:"Solution"}),", indiquez d'",(0,s.jsx)(r.strong,{children:"Ajouter \xe0 la solution"})," et gardez SuperCarteApp."]}),"\n",(0,s.jsxs)(r.p,{children:["Supprimez le fichier ",(0,s.jsx)(r.strong,{children:"Class1.cs"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(r.strong,{children:"Models"})," \xe0 la racine du projet. Ce dossier contient les classes du mod\xe8le du domaine."]}),"\n",(0,s.jsx)(r.p,{children:"Il faut diff\xe9rencier les classes du mod\xe8le de donn\xe9es et du mod\xe8le du domaine."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Mod\xe8le de donn\xe9es"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Il s'agit d'une classe qui repr\xe9sente une entit\xe9 de la base de donn\xe9es. (Table ou Vue)."}),"\n",(0,s.jsx)(r.li,{children:"L'application ne doit pas travailler directement avec cette classe."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Mod\xe8le du domaine"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Il s'agit d'une classe qui repr\xe9sente un \xe9l\xe9ment du domaine de l'application. Elle peut \xeatre tr\xe8s similaire \xe0 une classe du mod\xe8le de donn\xe9es, mais peut \xe9galement contenir des champs de plusieurs tables et de la logique propre."}),"\n",(0,s.jsx)(r.li,{children:"La logique applicative travaille avec la classe du mod\xe8le de domaine."}),"\n",(0,s.jsxs)(r.li,{children:["Le ",(0,s.jsx)(r.strong,{children:"Service"})," s'occupe de faire la transition (",(0,s.jsx)(r.strong,{children:"mapping"}),") entre la classe du mod\xe8le de donn\xe9es et la classe du domaine du domaine."]}),"\n",(0,s.jsxs)(r.li,{children:["Le ",(0,s.jsx)(r.strong,{children:"Repository"})," peut \xe9galement utiliser les classes du domaine pour ins\xe9rer les donn\xe9es de plusieurs tables dans un seul objet."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Avec ",(0,s.jsx)(r.strong,{children:"Entity Framework"}),", il n'est pas recommand\xe9 que la classe du mod\xe8le de donn\xe9es soit \xe9galement la classe du mod\xe8le du domaine. ",(0,s.jsx)(r.strong,{children:"Dapper"})," offre un plus grand contr\xf4le sur la cr\xe9ation de l'objet, il serait possible de donner les 2 r\xf4les \xe0 la m\xeame classe."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(r.strong,{children:"Repositories"})," \xe0 la racine du projet. Ce dossier contiendra les classes de type ",(0,s.jsx)(r.strong,{children:"Repository"}),". Ce sont les classes qui contiennent les requ\xeates pour communiquer avec la base de donn\xe9es."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(r.strong,{children:"Services"})," \xe0 la racine du projet. Ce dossier contiendra les services de l'application. Les classes de type ",(0,s.jsx)(r.strong,{children:"Service"})," contiennent la logique de l'application. Elles s'occuperont de convertir les objets de donn\xe9es en objet du domaine et vice-versa dans un certain cas \xe9galement."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(r.strong,{children:"Validateurs"}),". Les classes de type ",(0,s.jsx)(r.strong,{children:"Validateur"})," s'occupent de valider les donn\xe9es. Ce sont des outils que le service utilisera pour s'assurer que l'objet du domaine est conforme aux exigences du logiciel. Avant d'envoyer un objet \xe0 la base de donn\xe9es, il doit respecter les contraintes."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(r.strong,{children:"Extensions"}),". Il y aura des extensions pour faire la conversion entre les objets du mod\xe8le de donn\xe9es et du mod\xe8le du domaine."]}),"\n",(0,s.jsxs)(r.p,{children:["Voici la structure compl\xe8te des dossiers du projet ",(0,s.jsx)(r.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"SuperCarte.Core\r\n\t- Extensions\r\n\t- Models\r\n\t- Repositories\r\n\t- Services\r\n\t- Validateurs\n"})}),"\n",(0,s.jsx)(r.h2,{id:"ajout-des-d\xe9pendances-de-projet",children:"Ajout des d\xe9pendances de projet"}),"\n",(0,s.jsxs)(r.p,{children:["Le projet ",(0,s.jsx)(r.strong,{children:"SuperCarte.Core"})," aura besoin du projet ",(0,s.jsx)(r.strong,{children:"SuperCarte.EF"})," pour utiliser le contexte."]}),"\n",(0,s.jsx)(r.p,{children:"Il faut l'ajouter dans les d\xe9pendances du projet."}),"\n",(0,s.jsxs)(r.p,{children:["S\xe9lectionnez le dossier ",(0,s.jsx)(r.strong,{children:"D\xe9pendances"})," du projet ",(0,s.jsx)(r.strong,{children:"SuperCarte.Core"})," et choisissez ",(0,s.jsx)(r.strong,{children:"Ajouter une r\xe9f\xe9rence de projet"})," dans le menu contextuel."]}),"\n",(0,s.jsxs)(r.p,{children:["Dans la fen\xeatre, il faut cocher ",(0,s.jsx)(r.strong,{children:"SuperCarte.EF"}),". Vous venez d'int\xe9grer une librairie interne au projet."]}),"\n",(0,s.jsx)(r.h2,{id:"g\xe9n\xe9ralisation-du-contexte",children:"G\xe9n\xe9ralisation du contexte"}),"\n",(0,s.jsxs)(r.p,{children:["Les m\xe9thodes de base de la classe ",(0,s.jsx)(r.strong,{children:"DBContext"})," utilisent les types g\xe9n\xe9riques. Il est donc possible de g\xe9n\xe9raliser les requ\xeates de base et r\xe9p\xe9titives dans le ",(0,s.jsx)(r.strong,{children:"Repository"}),"."]}),"\n",(0,s.jsx)(r.admonition,{type:"note",children:(0,s.jsx)(r.p,{children:"Revoir la section sur les types g\xe9n\xe9riques dans l'introduction \xe0 C#"})}),"\n",(0,s.jsxs)(r.p,{children:["Voici une liste de requ\xeates ",(0,s.jsx)(r.strong,{children:"classiques"})," qui sont g\xe9n\xe9ralement identiques."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Obtenir tous les \xe9l\xe9ments de la table"}),"\n",(0,s.jsx)(r.li,{children:"Ajouter un ou des \xe9l\xe9ments"}),"\n",(0,s.jsx)(r.li,{children:"Supprimer un ou des \xe9l\xe9ments"}),"\n",(0,s.jsx)(r.li,{children:"Enregistrer les modifications"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(r.strong,{children:"Bases"})," dans le dossier ",(0,s.jsx)(r.strong,{children:"Repositories"}),". Ce dossier contiendra les classes g\xe9n\xe9riques de base."]}),"\n",(0,s.jsxs)(r.p,{children:["L'injection de d\xe9pendances du ",(0,s.jsx)(r.strong,{children:"Repository"})," se fera par les interfaces. Il faut donc que les classes de base poss\xe8dent une interface."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"IBaseRepo"})," dans le dossier ",(0,s.jsx)(r.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'namespace SuperCarte.Core.Repositories.Bases;\r\n\r\n/// <summary>\r\n/// Interface g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base de donn\xe9es\r\n/// </summary>\r\n/// <typeparam name="TData">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\npublic interface IBaseRepo<TData> where TData : class\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste de tous les items en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste des items</returns>\r\n    Task<List<TData>> ObtenirListeAsync();\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de tous les items.\r\n    /// </summary>\r\n    /// <returns>Liste des items</returns>\r\n    List<TData> ObtenirListe();\r\n\r\n    /// <summary>\r\n    /// Ajouter une liste d\'items dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task AjouterAsync(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Ajouter une liste d\'items dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Ajouter(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Ajouter un item dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task AjouterAsync(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Ajouter un item dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Ajouter(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer une liste d\'items dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task SupprimerAsync(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer une liste d\'items dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Supprimer(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer un item dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task SupprimerAsync(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer un item dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Supprimer(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Enregistrer l\'\xe9tat actuel du contexte dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    Task EnregistrerAsync();\r\n\r\n    /// <summary>\r\n    /// Enregistrer l\'\xe9tat actuel du contexte dans la base de donn\xe9es.\r\n    /// </summary>\r\n    void Enregistrer();\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["\xc0 la ligne 7, il y a la d\xe9claration de l'interface avec un type g\xe9n\xe9rique.  Il est possible de renommer le ",(0,s.jsx)(r.strong,{children:"T"})," pour un nom plus sp\xe9cifique ",(0,s.jsx)(r.strong,{children:"TData"}),". Par convention, le type g\xe9n\xe9rique d\xe9bute toujours avec le pr\xe9fixe ",(0,s.jsx)(r.strong,{children:"T"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Il est possible de mettre des contraintes au type g\xe9n\xe9rique. Le mot-cl\xe9 ",(0,s.jsx)(r.strong,{children:"where"})," permet de sp\xe9cifier les contraintes. Dans ce cas-ci, il est seulement possible de sp\xe9cifier un type qui est une classe. Donc, il n'est pas possible de sp\xe9cifier ",(0,s.jsx)(r.strong,{children:"IBaseRepo<int>"}),", car le type ",(0,s.jsx)(r.strong,{children:"int"})," n'est pas une classe, mais un type primitif."]}),"\n",(0,s.jsxs)(r.p,{children:["Pour plus d'information pour le ",(0,s.jsx)(r.strong,{children:"where"})," ",(0,s.jsx)(r.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/where-generic-type-constraint",children:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/where-generic-type-constraint"})]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"public interface IBaseRepo<TData> where TData : class\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Pour chacune des m\xe9thodes, il y a le ",(0,s.jsx)(r.strong,{children:"TData"})," pour le type d'un param\xe8tre ou pour le retour."]}),"\n",(0,s.jsxs)(r.p,{children:["\xc9galement, l'application doit pouvoir fonctionner en ",(0,s.jsx)(r.strong,{children:"asynchrone"}),". Par convention en ",(0,s.jsx)(r.strong,{children:"C#"}),", une m\xe9thode ",(0,s.jsx)(r.strong,{children:"asynchrone"})," doit avoir le suffixe ",(0,s.jsx)(r.strong,{children:"Async"}),", mais ce n'est pas obligatoire. De plus, les m\xe9thodes doivent retourner un type ",(0,s.jsx)(r.strong,{children:"Task"})," ou ",(0,s.jsx)(r.strong,{children:"Task<T>"}),". L'explication du fonctionnement de l'asynchrone sera expliqu\xe9e plus tard. Il faut \xe9galement le m\xe9thode ",(0,s.jsx)(r.strong,{children:"synchrone"}),", car selon le cas d'utilisation, l'appel peut \xeatre obligatoirement synchrone."]}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"BaseRepo"})," dans le dossier ",(0,s.jsx)(r.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using Microsoft.EntityFrameworkCore;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories.Bases;\r\n\r\n/// <summary>\r\n/// Classe abstraite g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base de donn\xe9es\r\n/// </summary>\r\n/// <typeparam name=\"TData\">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\npublic class BaseRepo<TData> : IBaseRepo<TData> where TData : class\r\n{\r\n    protected readonly SuperCarteContext _bd;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"bd\">Contexte de la base de donn\xe9es</param>\r\n    public BaseRepo(SuperCarteContext bd)\r\n    {\r\n        _bd = bd;\r\n    }\r\n\r\n    public async Task<List<TData>> ObtenirListeAsync()\r\n    {\r\n        //\xc9quivalent \xe0 _db.TData.ToListAsync();\r\n        return await _bd.Set<TData>().ToListAsync();\r\n    }\r\n\r\n    public List<TData> ObtenirListe()\r\n    {\r\n        //\xc9quivalent \xe0 _db.TData.ToList();\r\n        return _bd.Set<TData>().ToList();\r\n    }\r\n\r\n    public async Task AjouterAsync(TData item, bool enregistrer)\r\n    {\r\n        //Add est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Add<TData>().\r\n        _bd.Add(item);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //L'ajout est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Ajouter(TData item, bool enregistrer)\r\n    {\r\n        //Add est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Add<TData>().\r\n        _bd.Add(item);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n\r\n    public async Task AjouterAsync(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //AddRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.AddRange<TData>().\r\n        _bd.AddRange(lstItem);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //L'ajout est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Ajouter(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //AddRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.AddRange<TData>().\r\n        _bd.AddRange(lstItem);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n\r\n    public async Task SupprimerAsync(TData item, bool enregistrer)\r\n    {\r\n        //Remove est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Remove<TData>().\r\n        _bd.Remove(item);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //La suppression est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Supprimer(TData item, bool enregistrer)\r\n    {\r\n        //Remove est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Remove<TData>().\r\n        _bd.Remove(item);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n\r\n    public async Task SupprimerAsync(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //RemoveRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.RemoveRange<TData>().        \r\n        _bd.RemoveRange(lstItem);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //La suppression est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Supprimer(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //RemoveRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.RemoveRange<TData>().        \r\n        _bd.RemoveRange(lstItem);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n    public async Task EnregistrerAsync()\r\n    {\r\n        //Enregistre les ajouts, modifications et suppression en attente dans la m\xe9moire du contexte\r\n        await _bd.SaveChangesAsync();\r\n    }\r\n\r\n    public void Enregistrer()\r\n    {\r\n        //Enregistre les ajouts, modifications et suppressions en attente dans la m\xe9moire du contexte\r\n        _bd.SaveChanges();\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Les m\xe9thodes ressemblent \xe0 ce que vous avez d\xe9j\xe0 fait, mais elles sont g\xe9n\xe9riques."}),"\n",(0,s.jsxs)(r.p,{children:["\xc9galement, le contexte utilise des m\xe9thodes ",(0,s.jsx)(r.strong,{children:"asynchrones"}),". Pour y avoir acc\xe8s, il faut inclure ",(0,s.jsx)(r.strong,{children:"using Microsoft.EntityFrameworkCore;"}),"."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"ToListAsync()"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.strong,{children:"SaveChangesAsync()"})}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["La d\xe9claration de la classe ",(0,s.jsx)(r.strong,{children:"public class BaseRepo<TData> : IBaseRepo<TData> where TData : class"})," doit \xe9galement inclure le ",(0,s.jsx)(r.strong,{children:"<TData>"}),". Elle doit la r\xe9pliquer dans l'impl\xe9mentation de l'interface avec la m\xeame contrainte ",(0,s.jsx)(r.strong,{children:"where"}),". Retirez le ",(0,s.jsx)(r.strong,{children:"where"})," et le compilateur indiquera que la classe est en erreur."]}),"\n",(0,s.jsx)(r.h3,{id:"obtenir-un-enregistrement-sp\xe9cifique-par-sa-cl\xe9",children:"Obtenir un enregistrement sp\xe9cifique par sa cl\xe9"}),"\n",(0,s.jsx)(r.p,{children:"Une op\xe9ration de base dans les op\xe9rations de la base de donn\xe9es est d'obtenir un enregistrement sp\xe9cifique en fonction de sa cl\xe9 primaire."}),"\n",(0,s.jsx)(r.p,{children:"Le nom du champ de la cl\xe9 primaire change pour chacune des tables. G\xe9n\xe9ralement, le type de la cl\xe9 primaire est un entier, mais ce n'est pas une garantie."}),"\n",(0,s.jsx)(r.p,{children:"Il y a aussi le cas d'une cl\xe9 primaire compos\xe9e."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"//Cl\xe9 avec nom diff\xe9rent\r\nCarte carte = _bd.CarteTb.Where(c => c.CarteId == carteId).FirstOrDefault();\r\nUtilisateur utilisateur = _bd.UtilisateurTb.Where(c => c.UtilisateurId == utilisateurId).FirstOrDefault();\r\n\r\n//Cl\xe9 pas un entier. DA est une string, car les DA peuvent d\xe9buter par 0, pour ceux qui ont \xe9t\xe9 inscrits entre 2000 et 2009\r\nEtudiant etudiant = _bd.EtudiantTb.Where(e => e.DA == da).FirstOrDefault();\r\n\r\n//Cl\xe9 compos\xe9e\r\nUtilisateurCarte utilisateurCarte = _bd.UtilisateurCarteTb.Where(uc => uc.CarteId == carteId && uc.utilisateurId == UtilisateurId).FirstOrDefault();\n"})}),"\n",(0,s.jsx)(r.admonition,{type:"note",children:(0,s.jsxs)(r.p,{children:["Remarquez ici que le nom des tables se termine par ",(0,s.jsx)(r.strong,{children:"Tb"}),". C'est donc le nom du ",(0,s.jsx)(r.strong,{children:"DbSet"})," dans ",(0,s.jsx)(r.strong,{children:"SuperCarteContext.cs"})]})}),"\n",(0,s.jsx)(r.p,{children:"Est-ce possible de g\xe9n\xe9raliser ceci ? Oui et non."}),"\n",(0,s.jsxs)(r.p,{children:["Le ",(0,s.jsx)(r.strong,{children:"contexte"})," poss\xe8de une m\xe9thode ",(0,s.jsx)(r.strong,{children:"Find()"})," ou ",(0,s.jsx)(r.strong,{children:"FindAsync()"}),". Cette m\xe9thode permet de recevoir un enregistrement en fonction de sa cl\xe9 primaire."]}),"\n",(0,s.jsxs)(r.p,{children:["Cette m\xe9thode peut recevoir un ",(0,s.jsx)(r.strong,{children:"params object?[]? keyValues"}),". Le type est ",(0,s.jsx)(r.strong,{children:"object"}),", donc il peut recevoir une cl\xe9 en ",(0,s.jsx)(r.strong,{children:"int"}),", en ",(0,s.jsx)(r.strong,{children:"string"}),", etc. selon le cas."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"//Cl\xe9 avec nom diff\xe9rent\r\nCarte carte = _bd.CarteTb.Find(carteId).FirstOrDefault();\r\nUtilisateur utilisateur = _bd.UtilisateurTb.Find(utilisateurId).FirstOrDefault();\r\n\r\n//Cl\xe9 pas un entier. DA est une string, car les DA peuvent d\xe9buter par 0, pour ceux qui ont \xe9t\xe9 inscrits entre 2000 et 2009\r\nEtudiant etudiant = _bd.EtudiantTb.Find(da).FirstOrDefault();\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Le mot-cl\xe9 ",(0,s.jsx)(r.strong,{children:"params"})," permet d'ajouter des param\xe8tres illimit\xe9s (max r\xe9el de 65 535) \xe0 la m\xe9thode. Donc il est possible de faire ",(0,s.jsx)(r.strong,{children:'Find(1, "2", new DateTime(2022, 1, 3), 10.3m, true)'})," ou ",(0,s.jsx)(r.strong,{children:"Find(1, 2, 3)"}),".  En r\xe9alit\xe9, il faudrait envoyer un tableau ",(0,s.jsx)(r.strong,{children:"object[]"})," en param\xe8tre, mais le mot-cl\xe9 ",(0,s.jsx)(r.strong,{children:"params"})," permet de le cr\xe9er lors de l'appel de la m\xe9thode en fusionnant les param\xe8tres. Donc ",(0,s.jsx)(r.strong,{children:"Find(1, 2, 3)"})," est en r\xe9alit\xe9 ",(0,s.jsxs)(r.strong,{children:["Find(new object",3,")"]}),". Pour plus d'information pour le ",(0,s.jsx)(r.strong,{children:"params"})," ",(0,s.jsx)(r.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/params",children:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/params"})]}),"\n",(0,s.jsx)(r.p,{children:"Il est donc possible de r\xe9cup\xe9rer un enregistrement qui a une cl\xe9 primaire compos\xe9e."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"UtilisateurCarte utilisateurCarte1 = _bd.UtilisateurCarteTb.Find(carteId, utilisateurId).FirstOrDefault();\r\nUtilisateurCarte utilisateurCarte2 = _bd.UtilisateurCarteTb.Find(utilisateurId, carte).FirstOrDefault();\n"})}),"\n",(0,s.jsxs)(r.p,{children:["L'ordre des cl\xe9s a-t-il son importance ? La r\xe9ponse est ",(0,s.jsx)(r.strong,{children:"oui"}),". Lequel des 2 appels est la bonne ? Il faut retourner dans la m\xe9thode ",(0,s.jsx)(r.strong,{children:"OnModelCreating"})," du ",(0,s.jsx)(r.strong,{children:"contexte"})," pour voir dans quel ordre les cl\xe9s ont \xe9t\xe9 sp\xe9cifi\xe9es."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\n"})}),"\n",(0,s.jsxs)(r.p,{children:["C'est donc ",(0,s.jsx)(r.strong,{children:"UtilisateurCarte utilisateurCarte2 = _bd.UtilisateurCarteTb.Find(utilisateurId, carte).FirstOrDefault();"})," qui serait la bonne. Il est possible de g\xe9n\xe9raliser la m\xe9thode ",(0,s.jsx)(r.strong,{children:"Find"})," dans le ",(0,s.jsx)(r.strong,{children:"Repo"}),", mais il faut l'encadrer."]}),"\n",(0,s.jsxs)(r.p,{children:["Le ",(0,s.jsx)(r.strong,{children:"Repo"})," g\xe9n\xe9rique ne permettra pas la gestion des cl\xe9s multiples, car la validation de l'ordre des cl\xe9s primaires risque de provoquer des erreurs. Ce sera une m\xe9thode sp\xe9cifique pour les tables qui ont une cl\xe9 primaire compos\xe9e."]}),"\n",(0,s.jsx)(r.p,{children:"La m\xe9thode g\xe9n\xe9rique ressemblerait \xe0 celle-ci."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"public Task<TData?> ObtenirParCleAsync(int id)\r\n{\r\n\treturn await _bd.FindAsync<TData>(id);\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Il y a 1 probl\xe8me dans cette m\xe9thode. Elle fonctionne uniquement pour une cl\xe9 primaire qui est un ",(0,s.jsx)(r.strong,{children:"entier"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"Il est possible de mettre plusieurs types g\xe9n\xe9riques dans une classe."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"public class BaseRepo<TData, TClePrimaire> : IBaseRepo<TData, TClePrimaire> where TData : class\r\n{\r\n    /**\r\n     Code retir\xe9 pour simplifier\r\n    */\r\n    public Task<TData?> ObtenirParCleAsync(TClePrimaire clePrimaire)\r\n    {\r\n        return await _bd.FindAsync<TData>(clePrimaire);\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Le nombre de types g\xe9n\xe9riques d'une classe n'est pas limit\xe9 \xe0 1 uniquement. Il suffit de mettre une virgule dans le ",(0,s.jsx)(r.strong,{children:"<>"})," pour ajouter des types g\xe9n\xe9riques, par exemple  ",(0,s.jsx)(r.strong,{children:"<T1, T2, T3, T4>"})," . Lorsqu'il y a plusieurs types g\xe9n\xe9riques, il est important de les nommer avec un nom significatif."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"TClePrimaire"})," sert uniquement pour le param\xe8tre de la m\xe9thode ",(0,s.jsx)(r.strong,{children:"ObtenirParCleAsync()"}),"."]}),"\n",(0,s.jsxs)(r.p,{children:["Mais est-ce BaseRepo est le bon endroit pour mettre cette m\xe9thode ? Que devra-t-il \xeatre sp\xe9cifi\xe9 pour la table ",(0,s.jsx)(r.strong,{children:"UtilisateurCarte"})," ? Dans le cas ci-dessous, ce sera ",(0,s.jsx)(r.strong,{children:"int"}),", mais si le programmeur utilise quand m\xeame la m\xe9thode ",(0,s.jsx)(r.strong,{children:"ObtenirParCleAsync()"}),", il y aura une exception car cette table n\xe9cessite 2 cl\xe9s."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"var utilisateurCarteRepo BaseRepo<UtilisateurCarte>();\r\n\r\n//La valeur 1 est-ce carteId ou utilisateurId ???\r\nutilisateurCarteRepo.ObtenirParCleAsync(1); //Il y aura une exception \"System.ArgumentException\xa0: \r\n    'Entity type 'UtilisateurCarte' is defined with a 2-part composite key, \r\n    but 1 values were passed to the 'Find' method.'\"\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cette approche va contre les principes ",(0,s.jsx)(r.strong,{children:"SOLID"}),". Il s'agit du ",(0,s.jsxs)(r.strong,{children:["L (",(0,s.jsx)(r.a,{href:"https://fr.wikipedia.org/wiki/Principe_de_substitution_de_Liskov",children:"Liskov substitution"}),")"]}),". \xc7a ne s'applique pas n\xe9cessairement au type g\xe9n\xe9rique dans sa d\xe9finition pure, mais l'id\xe9e est tout de m\xeame respect\xe9e. Ce principe consiste au fait qu'une classe de ",(0,s.jsx)(r.strong,{children:"Base"})," doit fonctionner pour tous les types de donn\xe9es. Il ne doit pas avoir de m\xe9thode disponible dans une classe pour laquelle le programmeur sait qu'un cas particulier va g\xe9n\xe9rer une exception si elle est utilis\xe9e. Donc par conception, le programmeur concepteur sait que la m\xe9thode ",(0,s.jsx)(r.strong,{children:"ObtenirParCleAsync()"})," va g\xe9n\xe9rer une exception pour le mod\xe8le de donn\xe9es ",(0,s.jsx)(r.strong,{children:"UtilisateurCarte"}),". Le programmeur qui n'est pas concepteur et qui voit cette m\xe9thode disponible, ne saura pas n\xe9cessairement qu'il ne peut pas l'utiliser, d'o\xf9 l'importance de respecter le ",(0,s.jsx)(r.strong,{children:"L"})," de ",(0,s.jsx)(r.strong,{children:"SOLID"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"La solution a ce probl\xe8me est de cr\xe9er une classe de base interm\xe9diaire."}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"IBasePKUniqueRepo"})," dans le dossier ",(0,s.jsx)(r.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="Bonne solution"',children:'namespace SuperCarte.Core.Repositories.Bases;\r\n\r\n/// <summary>\r\n/// Interface g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base\r\n/// de donn\xe9es pour une table \xe0 cl\xe9 primaire unique\r\n/// </summary>\r\n/// <typeparam name="TData">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\n/// <typeparam name="TClePrimaire">Type de la cl\xe9 primaire</typeparam>\r\npublic interface IBasePKUniqueRepo<TData, TClePrimaire> : IBaseRepo<TData> where TData : class\r\n{\r\n    /// <summary>\r\n    /// Obtenir un item sp\xe9cifique en fonction de sa cl\xe9 primaire en asynchrone.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>\r\n    /// <returns>L\'item ou null si non trouv\xe9</returns>\r\n    Task<TData?> ObtenirParCleAsync(TClePrimaire clePrimaire);\r\n\r\n    /// <summary>\r\n    /// Obtenir un item sp\xe9cifique en fonction de sa cl\xe9 primaire.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>\r\n    /// <returns>L\'item ou null si non trouv\xe9</returns>\r\n    TData? ObtenirParCle(TClePrimaire clePrimaire);\r\n\r\n    /// <summary>\r\n    /// Suprimer un item sp\xe9cifique en fonction de sa cl\xe9 primaire en asynchrone.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>    \r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task SupprimerParCleAsync(TClePrimaire clePrimaire, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Suprimer un item sp\xe9cifique en fonction de sa cl\xe9 primaire.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>    \r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void SupprimerParCle(TClePrimaire clePrimaire, bool enregistrer);\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"BasePKUniqueRepo"})," dans le dossier ",(0,s.jsx)(r.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories.Bases;\r\n\r\n// <summary>\r\n/// Classe abstraite g\xe9n\xe9rique qui contient les op\xe9rations de base des tables \r\n/// de la base de donn\xe9es pour une table \xe0 cl\xe9 primaire unique\r\n/// </summary>\r\n/// <typeparam name="TData">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\n/// <typeparam name="TClePrimaire">Type de la cl\xe9 primaire</typeparam>\r\npublic abstract class BasePKUniqueRepo<TData, TClePrimaire> : BaseRepo<TData>, IBasePKUniqueRepo<TData, TClePrimaire> where TData : class\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public BasePKUniqueRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n    public async Task<TData?> ObtenirParCleAsync(TClePrimaire clePrimaire)\r\n    {\r\n        return await _bd.FindAsync<TData>(clePrimaire);\r\n    }\r\n\r\n    public TData? ObtenirParCle(TClePrimaire clePrimaire)\r\n    {\r\n        return _bd.Find<TData>(clePrimaire);\r\n    }\r\n\r\n    public async Task SupprimerParCleAsync(TClePrimaire clePrimaire, bool enregistrer)\r\n    {\r\n        TData? item = await ObtenirParCleAsync(clePrimaire);\r\n\r\n        //V\xe9rifie si un item a \xe9t\xe9 trouv\xe9 avec la cl\xe9 sp\xe9cifi\xe9e\r\n        if (item != null)\r\n        {\r\n            //Il y a un item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            await SupprimerAsync(item, enregistrer);\r\n        }\r\n        else\r\n        {\r\n            //Il n\'y a pas d\'item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            throw new Exception("Impossible de trouver l\'item \xe0 supprimer avec la cl\xe9 sp\xe9cifi\xe9e.");\r\n        }\r\n    }\r\n\r\n    public void SupprimerParCle(TClePrimaire clePrimaire, bool enregistrer)\r\n    {\r\n        TData? item = ObtenirParCle(clePrimaire);\r\n\r\n        //V\xe9rifie si un item a \xe9t\xe9 trouv\xe9 avec la cl\xe9 sp\xe9cifi\xe9e\r\n        if (item != null)\r\n        {\r\n            //Il y a un item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            Supprimer(item, enregistrer);\r\n        }\r\n        else\r\n        {\r\n            //Il n\'y a pas d\'item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            throw new Exception("Impossible de trouver l\'item \xe0 supprimer avec la cl\xe9 sp\xe9cifi\xe9e.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe a 2 m\xe9thodes sp\xe9cifiques aux tables avec une cl\xe9 primaire unique. Il est possible d'obtenir un item \xe0 partir de sa cl\xe9 primaire et de le supprimer. Il y a la version ",(0,s.jsx)(r.strong,{children:"synchrone"})," et ",(0,s.jsx)(r.strong,{children:"asynchrone"}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"repository-non-standard---th\xe9orie",children:"Repository non standard - Th\xe9orie"}),"\n",(0,s.jsxs)(r.p,{children:["Pour utiliser un ",(0,s.jsx)(r.strong,{children:"Repository"})," g\xe9n\xe9rique, il faut l'injecter comme ceci. Voici l'exemple pour ",(0,s.jsx)(r.strong,{children:"Carte"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"public classe CarteService\r\n{\r\n\tprivate readonly IBasePKUniqueRepo<Carte, int> _baseRepoCarte;\r\n    \r\n\tpublic CarteService(IBasePKUniqueRepo<Carte, int> baseRepoCarte)\r\n\t{\r\n\t\t_baseRepoCarte = baseRepoCarte;\r\n\t}\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:"Par contre, si le logiciel doit obtenir les cartes qui ont plus qu'un certain nombre de vies, il faut une requ\xeate sp\xe9cifique dans le Repository ."}),"\n",(0,s.jsxs)(r.p,{children:["Il sera donc n\xe9cessaire de cr\xe9er la classe ",(0,s.jsx)(r.strong,{children:"CarteRepo"})," afin de r\xe9pondre \xe0 cette requ\xeate sp\xe9cifique (",(0,s.jsx)(r.strong,{children:"ObtenirListeParPointVieMin()"}),")."]}),"\n",(0,s.jsx)(r.p,{children:"Il y a 2 options."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Option 1: Cr\xe9er un deuxi\xe8me type de Repository pour r\xe9pondre \xe0 cette question sp\xe9cifiquement."}),"\n",(0,s.jsxs)(r.p,{children:["Voici l'interface et la classe du ",(0,s.jsx)(r.strong,{children:"Repository"})," sp\xe9cifique."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="CE N\'EST PAS LA M\xc9THODE RECOMMAND\xc9E DANS LE COURS"',children:"public interface ICarteRepo\r\n{\r\n\tList<Carte> ObtenirListeParPointVieMin(int vie);\r\n}\r\n\r\npublic classe CarteRepo : ICarteService\r\n{\r\n    private readonly SuperCarteContext _bd;\r\n    \r\n    public CarteRepo(SuperCarteContext bd)\r\n    {\r\n        _bd = bd;\r\n    }\r\n    \r\n    public List<Carte> ObtenirListeParPointVieMin(int vie)\r\n    {\r\n        return _bd.CarteTb.Where(c => c.vie >= vie).ToList();\r\n    }\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Pour les mod\xe8les qui n\xe9cessitent des requ\xeates sp\xe9cifiques, il est possible d'injecter les 2 ",(0,s.jsx)(r.strong,{children:"Repositories"})," dans le ",(0,s.jsx)(r.strong,{children:"Service"})," de la fa\xe7on suivante."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="CE N\'EST PAS LA M\xc9THODE RECOMMAND\xc9E DANS LE COURS"',children:"public classe CarteService\r\n{\r\n\tprivate readonly IBaseRepo<Carte> _carteBaseRepo;\r\n\tprivate readonly ICarteRepo _carteSpecificRepo;\r\n    \r\n\tpublic CarteService(IBaseRepo<Carte> _carteBaseRepo, \r\n                      ICarteRepo _carteSpecificRepo)\r\n\t{\r\n\t\t_carteBaseRepo = carteBaseRepo;\r\n\t\t_carteSpecificRepo = carteSpecificRepo;\r\n\t}\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Option 2: H\xe9riter de ",(0,s.jsx)(r.strong,{children:"BaseRepo"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"Il y aurait seulement un Repository. Le Repository sp\xe9cifique h\xe9riterait du Repository g\xe9n\xe9rique de base."}),"\n",(0,s.jsx)(r.p,{children:"Voici l'interface et la classe du Repository sp\xe9cifique."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="M\xc9THODE RECOMMAND\xc9E DANS LE COURS"',children:"public interface ICarteRepo : IBasePKUniqueRepo<Carte,int>\r\n{\r\n\tList<Carte> ObtenirListeParPointVieMin(int vie);\r\n}\r\n\r\npublic classe CarteRepo : BasePKUniqueRepo<Carte,int>, ICarteService\r\n{   \r\n    public CarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        \r\n    }\r\n    \r\n    public List<Carte> ObtenirListeParPointVieMin(int vie)\r\n    {\r\n        return _bd.CarteTb.Where(c => c.vie >= vie).ToList();\r\n    }\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Et l'injection dans le ",(0,s.jsx)(r.strong,{children:"Service"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:'title="M\xc9THODE RECOMMAND\xc9E DANS LE COURS"',children:"public classe CarteService\r\n{\r\n\tprivate readonly ICarteRepo _carteRepo;\r\n    \r\n\tpublic CarteService(ICarteRepo _carteRepo)\r\n\t{\r\n\t\t_carteRepo = carteRepo;\r\n\t}\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Les 2 approches ont leurs avantages et leurs inconv\xe9nients."}),"\n",(0,s.jsxs)(r.p,{children:["L'approche par h\xe9ritage permet d'avoir un seul ",(0,s.jsx)(r.strong,{children:"Repository"})," qui contient toutes les m\xe9thodes n\xe9cessaires \xe0 l'entit\xe9. Par contre, ce n'est pas tous les ",(0,s.jsx)(r.strong,{children:"Repository"})," qui n\xe9cessitent des requ\xeates sp\xe9cifiques. Dans une approche standardis\xe9e, il pourrait \xeatre exig\xe9 au programmeur de cr\xe9er des classes sp\xe9cifiques, m\xeame s'il n'y a pas de requ\xeate sp\xe9cifique."]}),"\n",(0,s.jsxs)(r.p,{children:["Dans une approche non standardis\xe9e, il faudrait injecter le ",(0,s.jsx)(r.strong,{children:"BaseRepo<TData>"})," dans le service lorsqu'il n'y a pas de requ\xeates sp\xe9cifiques. Si un jour, il faut ajouter une requ\xeate sp\xe9cifique, il faut cr\xe9er le ",(0,s.jsx)(r.strong,{children:"Repository"})," sp\xe9cifique et modifier tous les services qui utilisaient le ",(0,s.jsx)(r.strong,{children:"Repository"})," de base. Ceci peut demander beaucoup de refactorisation."]}),"\n",(0,s.jsxs)(r.p,{children:["L'approche avec 2 ",(0,s.jsx)(r.strong,{children:"Repositories"})," a l'avantage de cr\xe9er uniquement un ",(0,s.jsx)(r.strong,{children:"Repo"})," sp\xe9cialis\xe9 lorsque n\xe9cessaire. Par contre, le programmeur doit basculer d'un ",(0,s.jsx)(r.strong,{children:"Repository"})," \xe0 l'autre selon le contexte. Aussi, \xe0 chaque fois qu'il faut injecter le ",(0,s.jsx)(r.strong,{children:"Repository"})," de base, il faut s'assurer de sp\xe9cifier le type de la bonne cl\xe9 primaire. Rien n'emp\xeache \xe9galement d'injecter la mauvaise classe de base, par exemple ",(0,s.jsx)(r.strong,{children:"BaseRepo<Carte>"}),"."]}),"\n",(0,s.jsx)(r.p,{children:"Si l'enregistrement des services est bien fait dans l'injection des d\xe9pendances, le programme g\xe9n\xe8rera une exception lorsque la mauvaise classe de base sera utilis\xe9e. Par contre, si le programmeur l'ajoute dans l'enregistrement sans valider l'existence des autres, le programme va devenir non uniforme et moins maintenable dans le temps."}),"\n",(0,s.jsxs)(r.p,{children:["Principalement pour la derni\xe8re raison, l'approche par h\xe9ritage sera utilis\xe9e et il faudra cr\xe9er la classe et l'interface sp\xe9cifique en tout temps, m\xeame si elle est vide. Le programme sera plus uniforme et plus facilement maintenable \xe0 long terme.  De plus, dans les applications d'envergure, les ",(0,s.jsx)(r.strong,{children:"entit\xe9s"})," sans aucune requ\xeate sp\xe9cifique sont assez rares."]}),"\n",(0,s.jsxs)(r.p,{children:["Remarquez que les classes ",(0,s.jsx)(r.strong,{children:"BaseRepo"})," et ",(0,s.jsx)(r.strong,{children:"BasePKUniqueRepo"})," ont \xe9t\xe9 d\xe9clar\xe9es d\xe8s le d\xe9part ",(0,s.jsx)(r.strong,{children:"abstract"})," pour \xe9viter l'utilisation directe sans h\xe9ritage."]}),"\n",(0,s.jsx)(r.h2,{id:"cr\xe9ation-des-repositories-sp\xe9cifiques",children:"Cr\xe9ation des Repositories sp\xe9cifiques"}),"\n",(0,s.jsx)(r.p,{children:"Il faut cr\xe9er les classes sp\xe9cifiques qui h\xe9riteront de la classe de base correspondante."}),"\n",(0,s.jsx)(r.p,{children:"Pour l'instant, toutes les classes seront vides."}),"\n",(0,s.jsxs)(r.p,{children:["Toutes les classes et interfaces doivent \xeatre cr\xe9\xe9es dans le dossier ",(0,s.jsx)(r.strong,{children:"Repositories"}),"."]}),"\n",(0,s.jsx)(r.h3,{id:"rolerepo",children:"RoleRepo"}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"IRoleRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic interface IRoleRepo : IBasePKUniqueRepo<Role,int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"RoleRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic class RoleRepo : BasePKUniqueRepo<Role,int>, IRoleRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public RoleRepo(SuperCarteContext bd) : base(bd)\r\n\t{\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"BasePKUniqueRepo<Role,int>"})}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(r.h3,{id:"utilisateurrepo",children:"UtilisateurRepo"}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"IUtilisateurRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Utilisateur\r\n/// </summary>\r\npublic interface IUtilisateurRepo : IBasePKUniqueRepo<Utilisateur, int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"UtilisateurRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Utilisateur\r\n/// </summary>\r\npublic class UtilisateurRepo : BasePKUniqueRepo<Utilisateur, int>, IUtilisateurRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public UtilisateurRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(r.strong,{children:"BasePKUniqueRepo<Utilisateur,int>"}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(r.h3,{id:"ensemblerepo",children:"EnsembleRepo"}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"IEnsembleRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Ensemble\r\n/// </summary>\r\npublic interface IEnsembleRepo : IBasePKUniqueRepo<Ensemble, int>\r\n{\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"EnsembleRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Ensemble\r\n/// </summary>\r\npublic class EnsembleRepo : BasePKUniqueRepo<Ensemble, int>, IEnsembleRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public EnsembleRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(r.strong,{children:"BasePKUniqueRepo<Ensemble,int>"}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(r.h3,{id:"categorierepo",children:"CategorieRepo"}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"ICategorieRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic interface ICategorieRepo : IBasePKUniqueRepo<Categorie, int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"CategorieRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic class CategorieRepo : BasePKUniqueRepo<Categorie, int>, ICategorieRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CategorieRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\r\n\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(r.strong,{children:"BasePKUniqueRepo<Categorie,int>"}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(r.h3,{id:"carterepo",children:"CarteRepo"}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"ICarteRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic interface ICarteRepo : IBasePKUniqueRepo<Carte, int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"CarteRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic class CarteRepo : BasePKUniqueRepo<Carte, int>, ICarteRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(r.strong,{children:"BasePKUniqueRepo<Carte,int>"}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(r.h3,{id:"utilisateurcarterepo",children:"UtilisateurCarteRepo"}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(r.strong,{children:"IUtilisateurCarteRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic interface IUtilisateurCarteRepo : IBaseRepo<UtilisateurCarte>\r\n{\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(r.strong,{children:"UtilisateurCarteRepo"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table UtilisateurCarte\r\n/// </summary>\r\npublic class UtilisateurCarteRepo : BaseRepo<UtilisateurCarte>, IUtilisateurCarteRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public UtilisateurCarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(r.strong,{children:"BaseRepo<UtilisateurCarte>"}),", car elle n'a pas de cl\xe9 primaire unique."]})]})}function u(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>t});var s=n(7294);const a={},i=s.createContext(a);function t(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);