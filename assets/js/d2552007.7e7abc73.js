"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[804],{5575:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=n(5893),a=n(1151);const t={sidebar_position:240,draft:!1},s="Supprimer une cat\xe9gorie",o={id:"WPF partie 2/supprimer_categorie",title:"Supprimer une cat\xe9gorie",description:"Cette section utilise les techniques apprises dans la section pr\xe9c\xe9dente afin de faire la suppression des cat\xe9gories dans SuperCarte (Le D du CRUD).",source:"@site/docs/72-WPF partie 2/supprimer_categorie.md",sourceDirName:"72-WPF partie 2",slug:"/WPF partie 2/supprimer_categorie",permalink:"/4N1_2024/docs/WPF partie 2/supprimer_categorie",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:240,frontMatter:{sidebar_position:240,draft:!1},sidebar:"NotesSidebar",previous:{title:"R\xe9sum\xe9 du code",permalink:"/4N1_2024/docs/WPF partie 2/revue_partie2"},next:{title:"Localisation de .xaml",permalink:"/4N1_2024/docs/WPF partie 2/localisation"}},l={},c=[{value:"SuperCarte.Core",id:"supercartecore",level:2},{value:"Cr\xe9ation du mod\xe8le de d\xe9pendance - CategorieDependance",id:"cr\xe9ation-du-mod\xe8le-de-d\xe9pendance---categoriedependance",level:3},{value:"Ajouter la requ\xeate dans le Repository - CategorieRepo",id:"ajouter-la-requ\xeate-dans-le-repository---categorierepo",level:3},{value:"Ajouter dans le service - CategorieService",id:"ajouter-dans-le-service---categorieservice",level:3},{value:"SuperCarte.WPF",id:"supercartewpf",level:2},{value:"Ajouter la commande dans le ViewModel - ListeCategoriesVM",id:"ajouter-la-commande-dans-le-viewmodel---listecategoriesvm",level:3},{value:"Lier le bouton avec la commande dans la vue  - UcListeCategories.xaml",id:"lier-le-bouton-avec-la-commande-dans-la-vue----uclistecategoriesxaml",level:3},{value:"R\xe9appliquer le seed",id:"r\xe9appliquer-le-seed",level:3}];function d(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"supprimer-une-cat\xe9gorie",children:"Supprimer une cat\xe9gorie"}),"\n",(0,i.jsx)(r.p,{children:"Cette section utilise les techniques apprises dans la section pr\xe9c\xe9dente afin de faire la suppression des cat\xe9gories dans SuperCarte (Le D du CRUD)."}),"\n",(0,i.jsx)(r.p,{children:"Pour \xeatre en mesure de supprimer un \xe9l\xe9ment d'une liste, il faut au pr\xe9alable v\xe9rifier les d\xe9pendances. L'entit\xe9 categorie n'a pas de FK, mais d'autres entit\xe9s ont des FK pointant vers la cat\xe9gorie. Par exemple, si une carte utilise la cat\xe9gorie, il ne faut pas qu'il soit possible de supprimer la cat\xe9gorie sinon ca supprimerait les cartes aussi (il serait possible de suivre cette logique, mais ici, nous l'emp\xeacherons)."}),"\n",(0,i.jsxs)(r.p,{children:["Il faut ajouter de nouvelles fonctionnalit\xe9s dans le ",(0,i.jsx)(r.strong,{children:"Repository"})," et dans le ",(0,i.jsx)(r.strong,{children:"Service"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-mod\xe8le-de-d\xe9pendance---categoriedependance",children:"Cr\xe9ation du mod\xe8le de d\xe9pendance - CategorieDependance"}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"CategorieDependance.cs"}),", dans le dossier ",(0,i.jsx)(r.strong,{children:"Models"})," du projet ",(0,i.jsx)(r.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient le nombre de d\xe9pendances (entit\xe9s qui ont une FK vers cette cat\xe9gorie) pour une cat\xe9gorie\r\n/// </summary>\r\npublic class CategorieDependance\r\n{\r\n    public int CategorieId { get; init; }\r\n    public int NbCartes { get; init; }\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["S'il avait d'autres tables qui utiliseraient ",(0,i.jsx)(r.strong,{children:"Categorie"})," comme cl\xe9 \xe9trang\xe8re, il faudrait ajouter les autres ",(0,i.jsx)(r.strong,{children:"Nb[Table]"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"La classe a \xe9galement la cl\xe9 primaire correspondant."}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsxs)(r.p,{children:["Le mot cl\xe9 ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/init",children:"init"})})," sert \xe0 indiquer qu'il n'est pas possible de modifier la valeur apr\xe8s la construction de l'objet."]})}),"\n",(0,i.jsx)(r.h3,{id:"ajouter-la-requ\xeate-dans-le-repository---categorierepo",children:"Ajouter la requ\xeate dans le Repository - CategorieRepo"}),"\n",(0,i.jsxs)(r.p,{children:["Dans l'interface ",(0,i.jsx)(r.strong,{children:"ICategorieRepo"}),", il faut ajouter la m\xe9thode ",(0,i.jsx)(r.strong,{children:"ObtenirDependanceAsync"})," et ",(0,i.jsx)(r.strong,{children:"ObtenirDependance"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Les deux versions (asynchrone et synchrone) sont ajout\xe9es, car les 2 seront n\xe9cessaires. Si seulement une version \xe9tait n\xe9cessaire, il ne serait pas n\xe9cessaire d'ajouter les 2."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic interface ICategorieRepo : IBasePKUniqueRepo<Categorie, int>\r\n{\r\n    /// <summary>\r\n    /// Obtenir les d\xe9pendances d'une cat\xe9gorie en asynchrone.\r\n    /// </summary>\r\n    /// <param name=\"categorieId\">Cl\xe9 primaire de la cat\xe9gorie/param>\r\n    /// <returns>Les d\xe9pendances ou null si la cat\xe9gorie n'est pas trouv\xe9e</returns>\r\n    Task<CategorieDependance?> ObtenirDependanceAsync(int categorieId);\r\n    \r\n    /// <summary>\r\n    /// Obtenir les d\xe9pendances d'une cat\xe9gorie.\r\n    /// </summary>\r\n    /// <param name=\"categorieId\">Cl\xe9 primaire de la cat\xe9gorie/param>\r\n    /// <returns>Les d\xe9pendances ou null si la cat\xe9gorie n'est pas trouv\xe9e</returns>\r\n    CategorieDependance? ObtenirDependance(int categorieId);\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Ajoutez l'impl\xe9mentation de la m\xe9thode dans la classe ",(0,i.jsx)(r.strong,{children:"CategorieRepo"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic class CategorieRepo : BasePKUniqueRepo<Categorie, int>, ICategorieRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CategorieRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n    public async Task<CategorieDependance?> ObtenirDependanceAsync(int categorieId)\r\n    {\r\n        return await (from lqCategorie in _bd.CategorieTb\r\n                      where\r\n                          lqCategorie.CategorieId == categorieId\r\n                      select\r\n                          new CategorieDependance()\r\n                          {\r\n                              CategorieId = lqCategorie.CategorieId,\r\n                              NbCartes = lqCategorie.CarteListe.Count()\r\n                          }).FirstOrDefaultAsync();\r\n    }\r\n\r\n    public CategorieDependance? ObtenirDependance(int categorieId)\r\n    {\r\n        return (from lqCategorie in _bd.CategorieTb\r\n                where\r\n                    lqCategorie.CategorieId == categorieId\r\n                select\r\n                    new CategorieDependance()\r\n                    {\r\n                        CategorieId = lqCategorie.CategorieId,\r\n                        NbCartes = lqCategorie.CarteListe.Count()\r\n                    }).FirstOrDefault();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"ajouter-dans-le-service---categorieservice",children:"Ajouter dans le service - CategorieService"}),"\n",(0,i.jsx)(r.p,{children:"Il faut ajouter la m\xe9thode de suppression et d'obtention des d\xe9pendances dans le service."}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez l'interface ",(0,i.jsx)(r.strong,{children:"Services/ICategorieService.cs"}),". Il y a seulement la version ",(0,i.jsx)(r.strong,{children:"synchrone"})," de ",(0,i.jsx)(r.strong,{children:"ObtenirDependance"})," et la version ",(0,i.jsx)(r.strong,{children:"asynchrone"})," de ",(0,i.jsx)(r.strong,{children:"SupprimerAsync"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic interface ICategorieService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste de cat\xe9gories</returns>\r\n    Task<List<CategorieModel>> ObtenirListeAsync();  \r\n\r\n//highlight-start\r\n    /// <summary>\r\n    /// Obtenir les d\xe9pendances d\'une cat\xe9gorie.\r\n    /// </summary>\r\n    /// <param name="categorieId">Cl\xe9 primaire de la cat\xe9gorie</param>\r\n    /// <returns>Les d\xe9pendances ou null si la cat\xe9gorie n\'est pas trouv\xe9e</returns>\r\n    CategorieDependance? ObtenirDependance(int categorieId);\r\n\r\n    /// <summary>\r\n    /// Supprimer une cat\xe9gorie en asynchrone.\r\n    /// </summary>    \r\n    /// <param name="categorieId">Cl\xe9 primaire de la cat\xe9gorie</param>    \r\n    Task SupprimerAsync(int categorieId);\r\n//highlight-end\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez la classe ",(0,i.jsx)(r.strong,{children:"CategorieService.cs"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'using SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic class CategorieService : ICategorieService\r\n{\r\n    private readonly ICategorieRepo _categorieRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieRepo">Repository Categorie</param>\r\n    public CategorieService(ICategorieRepo categorieRepo)\r\n    {\r\n        _categorieRepo = categorieRepo;\r\n    }\r\n\r\n    public async Task<List<CategorieModel>> ObtenirListeAsync()\r\n    {\r\n        return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\r\n    }\r\n\r\n//highlight-start\r\n    public CategorieDependance? ObtenirDependance(int categorieId)\r\n    {\r\n        return _categorieRepo.ObtenirDependance(categorieId);\r\n    }\r\n\r\n    public async Task SupprimerAsync(int categorieId)\r\n    {\r\n        CategorieDependance? categorieDependance = await _categorieRepo.ObtenirDependanceAsync(categorieId);\r\n\r\n        if(categorieDependance != null)\r\n        {\r\n            if(categorieDependance.NbCartes == 0)\r\n            {\r\n                await _categorieRepo.SupprimerParCleAsync(categorieId, true);\r\n            }\r\n            else\r\n            {\r\n                throw new Exception("La cat\xe9gorie a des d\xe9pendances. Impossible \xe0 supprimer.");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            throw new Exception("La cat\xe9gorie n\'existe pas dans la base de donn\xe9es.");\r\n        }\r\n    }\r\n//highlight-end\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["La m\xe9thode ",(0,i.jsx)(r.strong,{children:"SupprimerAsync"})," s'assure qu'il est possible d'effectuer la suppression, sinon elle g\xe9n\xe8re des exceptions."]}),"\n",(0,i.jsx)(r.h2,{id:"supercartewpf",children:"SuperCarte.WPF"}),"\n",(0,i.jsx)(r.h3,{id:"ajouter-la-commande-dans-le-viewmodel---listecategoriesvm",children:"Ajouter la commande dans le ViewModel - ListeCategoriesVM"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut ajouter une nouvelle commande ",(0,i.jsx)(r.strong,{children:"SupprimerCommande"})," dans le ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Dans une commande, il est possible d'ajouter une logique pour indiquer s'il est possible ou non de l'ex\xe9cuter. Dans ce cas-ci, il y a 2 conditions."}),"\n",(0,i.jsxs)(r.p,{children:["Premi\xe8rement, il doit avoir une cat\xe9gorie s\xe9lectionn\xe9e dans le ",(0,i.jsx)(r.strong,{children:"DataGrid"}),". Deuxi\xe8mement, la cat\xe9gorie ne doit pas avoir de d\xe9pendance."]}),"\n",(0,i.jsx)(r.p,{children:"\xc0 chaque fois que la s\xe9lection sera modifi\xe9e, il faudra appliquer la logique si la commande supprimer peut s'appliquer."}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez la classe ",(0,i.jsx)(r.strong,{children:"ListeCategoriesVM"})," par le code ci-dessous."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;\r\n    private bool _estEnTravail = false;\r\n\t//highlight-next-line\r\n    private CategorieModel? _categorieSelection;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"categorieService\">Service du mod\xe8le Categorie</param>\r\n\tpublic ListeCategoriesVM(ICategorieService categorieService)\r\n    {\r\n        _categorieService = categorieService;\r\n\r\n        ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n\t\t//highlight-next-line\r\n        SupprimerCommande = new AsyncRelayCommand(SupprimerAsync, PeutSupprimer);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        ListeCategories = await _categorieService.ObtenirListeAsync();        \r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n//highlight-start\r\n    /// <summary>\r\n    /// Supprimer la cat\xe9gorie s\xe9lectionn\xe9e\r\n    /// </summary>    \r\n    private async Task SupprimerAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        await _categorieService.SupprimerAsync(CategorieSelection!.CategorieId);\r\n\r\n        await ObtenirListeAsync();\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// V\xe9rifier si la commande supprimer peut s'ex\xe9cuter\r\n    /// </summary>\r\n    /// <returns>Vrai si elle peut s'ex\xe9cuter, faux si elle ne peut pas</returns>\r\n    private bool PeutSupprimer()\r\n    {        \r\n        //V\xe9rifie si une cat\xe9gorie peut \xeatre supprim\xe9e\r\n        if (CategorieSelection != null)\r\n        {\r\n            //Il y a une cat\xe9gorie de s\xe9lectionn\xe9e\r\n\r\n            //Il faut emp\xeacher la v\xe9rification si l'op\xe9ration est en cours d'ex\xe9cution\r\n            //L'appel se fait en parall\xe8le avec l'ex\xe9cution et il y a une v\xe9rification dans la BD\r\n            //Entity Framework ne peut pas fonctionner en parall\xe8le avec la m\xeame instance du contexte.\r\n            //Cette v\xe9rification est seulement n\xe9cessaire dans le cas d'un appel avec la base de donn\xe9es.\r\n            if (SupprimerCommande.IsRunning == false)\r\n            {\r\n                //V\xe9rifie si elle a des d\xe9pendances\r\n                CategorieDependance? categorieDependance =\r\n                    _categorieService.ObtenirDependance(CategorieSelection.CategorieId);\r\n\r\n                //Si aucune cartes, elle peut \xeatre supprim\xe9e\r\n                return categorieDependance?.NbCartes == 0;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Aucune cat\xe9gorie n\u2019est s\xe9lectionn\xe9e\r\n            return false;\r\n        }\r\n    }    \r\n//highlight-end\r\n\r\n    //Commandes\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n//highlight-next-line\r\n    public IAsyncRelayCommand SupprimerCommande { get; set; }\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        {\r\n            return _lstCategories;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }\r\n    }\r\n\r\n//highlight-start\r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n            if(SetProperty(ref _categorieSelection, value))\r\n            {\r\n                SupprimerCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n//highlight-end\r\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Voici les \xe9l\xe9ments n\xe9cessaires pour la commande ",(0,i.jsx)(r.strong,{children:"Supprimer"}),"."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"La commande doit \xeatre asynchrone: ligne 94 ."}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["La m\xe9thode pour ex\xe9cuter la commande est ",(0,i.jsx)(r.strong,{children:"SupprimerAsync"}),": ligne 45."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"\xc0 l'int\xe9rieur, elle appelle le service pour supprimer la cat\xe9gorie s\xe9lectionn\xe9e: ligne 49."}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:"\xc9galement, apr\xe8s la suppression, la liste est mise \xe0 jour: ligne 51."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["Avant d'ex\xe9cuter une m\xe9thode, il faut v\xe9rifier si elle peut \xeatre ex\xe9cut\xe9e. La m\xe9thode ",(0,i.jsx)(r.strong,{children:"PeutSupprimer"})," fait cette v\xe9rification: ligne 60."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"La premi\xe8re \xe9tape consiste \xe0 v\xe9rifier si une cat\xe9gorie est s\xe9lectionn\xe9e: ligne 63."}),"\n",(0,i.jsx)(r.li,{children:"Ensuite, il faut obtenir les d\xe9pendances \xe0 partir de la base de donn\xe9es: ligne 74."}),"\n",(0,i.jsx)(r.li,{children:"Cette m\xe9thode ne peut pas \xeatre asynchrone. Il faut donc que sa logique soit assez rapide. Si l'appel \xe0 la base de donn\xe9es est long, il faudrait revoir la logique. Il serait possible d'afficher un message d'erreur lors de la suppression s'il y a des d\xe9pendances. La v\xe9rification avec la base de donn\xe9es se ferait uniquement si l'action est r\xe9ellement demand\xe9e."}),"\n",(0,i.jsx)(r.li,{children:"Notez que la commande SupprimerCommande ne doit pas s'ex\xe9cuter 2 fois en m\xeame temps. La ligne 71 s'assure qu'elle n'est pas d\xe9j\xe0 en ex\xe9cution."}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["Il faut \xe9galement modifier la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"CategorieSelection"}),"."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Si la propri\xe9t\xe9 est modifi\xe9e, il faut indiquer \xe0 la commande ",(0,i.jsx)(r.strong,{children:"SupprimerCommande"})," de v\xe9rifier de nouveau si elle peut \xeatre ex\xe9cut\xe9e. Cette propri\xe9t\xe9 a un lien avec la logique de v\xe9rification, il faut donc appeler ",(0,i.jsx)(r.strong,{children:"NotifyCanExecuteChanged"})," pour que l'\xe9tat du bouton change dans la vue."]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["Finalement, il faut cr\xe9er la commande avec les 2 m\xe9thodes \xe0 la ligne 27. La premi\xe8re m\xe9thode ",(0,i.jsx)(r.strong,{children:"SupprimerAsync"})," sera ex\xe9cut\xe9e si la commande est appel\xe9e. La deuxi\xe8me m\xe9thode ",(0,i.jsx)(r.strong,{children:"PeutSupprimer"})," sert \xe0 emp\xeacher d'appeler cette commande (si c'est faux). Cette deuxi\xe8me m\xe9thode sera ex\xe9cut\xe9 quand le bouton apparaitra, et chaque fois que CanExecuteChanged sera appel\xe9 (ligne 131)"]}),"\n",(0,i.jsx)(r.admonition,{title:"Important",type:"warning",children:(0,i.jsxs)(r.p,{children:["Bien que le VM fait en sorte que le bouton S de l'interface ne sera pas disponible (",(0,i.jsx)(r.strong,{children:"PeutSupprimer"}),") s'il y a des d\xe9pendances pour une cat\xe9gorie, il est important que le service emp\xeache d'effacer une cat\xe9gorie ayant des d\xe9pendances. Le service est le dernier point de v\xe9rification. Il est possible que le programmeur d'interface n'ait pas pens\xe9 \xe0 \xe7a."]})}),"\n",(0,i.jsx)(r.h3,{id:"lier-le-bouton-avec-la-commande-dans-la-vue----uclistecategoriesxaml",children:"Lier le bouton avec la commande dans la vue  - UcListeCategories.xaml"}),"\n",(0,i.jsxs)(r.p,{children:["Dans le fichier ",(0,i.jsx)(r.strong,{children:"UcListeCategories.xaml"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Voici la nouvelle d\xe9finition du bouton. La commande est li\xe9e \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"SupprimerCommande"})," du ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",children:'<Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\n'})}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marrez le programme."}),"\n",(0,i.jsxs)(r.p,{children:["Changez la s\xe9lection dans la liste. Seulement la cat\xe9gorie ",(0,i.jsx)(r.strong,{children:"Mages"})," aura le bouton ",(0,i.jsx)(r.strong,{children:"S"})," activ\xe9. Les autre ont des cartes associ\xe9es"]}),"\n",(0,i.jsxs)(r.p,{children:["Appuyez sur le bouton et la cat\xe9gorie ",(0,i.jsx)(r.strong,{children:"Mages"})," ne sera plus l\xe0."]}),"\n",(0,i.jsx)(r.p,{children:"G\xe9n\xe9ralement, il est recommand\xe9 d'avoir une demande de confirmation avant de supprimer un \xe9l\xe9ment. Cette technique sera pr\xe9sent\xe9e dans un autre document."}),"\n",(0,i.jsx)(r.h3,{id:"r\xe9appliquer-le-seed",children:"R\xe9appliquer le seed"}),"\n",(0,i.jsxs)(r.p,{children:["Pour appliquer de nouveau le ",(0,i.jsx)(r.strong,{children:"Seed_Carte"}),", il faut synchroniser la base de donn\xe9es avec la migration pr\xe9c\xe9dent ce seed et ensuite l'appliquer de nouveau."]}),"\n",(0,i.jsxs)(r.p,{children:["Ouvrez la ",(0,i.jsx)(r.strong,{children:"Console du Gestionnaire de package"})," et assurez-vous que ",(0,i.jsx)(r.strong,{children:"SuperCarte.ef"})," est le Projet par d\xe9faut."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Update-Database -StartupProject SuperCarte.EF -Migration Seed_RoleEtUtilisateur\r\nUpdate-Database -StartupProject SuperCarte.EF -Migration Seed_Carte\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>o,a:()=>s});var i=n(7294);const a={},t=i.createContext(a);function s(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);