"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[6437],{5458:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var s=r(5893),i=r(1151);const a={sidebar_position:3},t="Injection de d\xe9pendance",l={id:"03 Injection de d\xe9pendance/injection_dependance",title:"Injection de d\xe9pendance",description:"Les applications consoles que vous avez fait jusqu'\xe0 maintenant dans vos autres cours utilisaient l'approche classique. Lors de l'ex\xe9cution du programme, une instance de la classe principale est cr\xe9\xe9e et la m\xe9thode de d\xe9marrage (g\xe9n\xe9ralement Main) est appel\xe9e. La logique du programme d\xe9bute dans le Main.",source:"@site/docs/03 Injection de d\xe9pendance/injection_dependance.md",sourceDirName:"03 Injection de d\xe9pendance",slug:"/03 Injection de d\xe9pendance/injection_dependance",permalink:"/4N1_2024/docs/03 Injection de d\xe9pendance/injection_dependance",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"NotesSidebar",previous:{title:"exercice_linq",permalink:"/4N1_2024/docs/02 LINQ/exercice_linq"}},o={},c=[{value:"Exemple de l&#39;approche classique",id:"exemple-de-lapproche-classique",level:2},{value:"Exemple de l&#39;approche sans classe",id:"exemple-de-lapproche-sans-classe",level:2},{value:"Projet et solution",id:"projet-et-solution",level:2},{value:"Principes SOLID",id:"principes-solid",level:2},{value:"Structure de base de l&#39;application",id:"structure-de-base-de-lapplication",level:2},{value:"Pr\xe9paration du projet",id:"pr\xe9paration-du-projet",level:3},{value:"Installation des librairies",id:"installation-des-librairies",level:3},{value:"La classe App",id:"la-classe-app",level:2},{value:"Fichier Program.cs",id:"fichier-programcs",level:2},{value:"Arguments du programme",id:"arguments-du-programme",level:2},{value:"Sp\xe9cification des arguments en mode d\xe9veloppement",id:"sp\xe9cification-des-arguments-en-mode-d\xe9veloppement",level:3},{value:"Classe de coordination - Manager",id:"classe-de-coordination---manager",level:2},{value:"Enregistrement du Manager - program.cs",id:"enregistrement-du-manager---programcs",level:3},{value:"IServiceProvider",id:"iserviceprovider",level:3},{value:"Injection de d\xe9pendances",id:"injection-de-d\xe9pendances",level:2},{value:"Cr\xe9ation directe - new class (\xe0 ne pas faire)",id:"cr\xe9ation-directe---new-class-\xe0-ne-pas-faire",level:2},{value:"Injection de la classe (\xe0 \xe9viter)",id:"injection-de-la-classe-\xe0-\xe9viter",level:2},{value:"Injection par l&#39;interface (approche recommand\xe9e)",id:"injection-par-linterface-approche-recommand\xe9e",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"injection-de-d\xe9pendance",children:"Injection de d\xe9pendance"}),"\n",(0,s.jsxs)(n.p,{children:["Les applications consoles que vous avez fait jusqu'\xe0 maintenant dans vos autres cours utilisaient l'approche classique. Lors de l'ex\xe9cution du programme, une instance de la classe principale est cr\xe9\xe9e et la m\xe9thode de d\xe9marrage (g\xe9n\xe9ralement ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Main"})}),") est appel\xe9e. La logique du programme d\xe9bute dans le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Main"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Certains environnements de travail, comme ",(0,s.jsx)(n.strong,{children:".NET 6"})," et plus, ne n\xe9cessitent pas de classe de d\xe9marrage. Le code dans le fichier est ex\xe9cut\xe9 automatiquement. L'environnement de travail s'occupe de g\xe9n\xe9rer automatiquement l'encapsulation du code. En ",(0,s.jsx)(n.strong,{children:".NET"}),", cette approche s'appelle ",(0,s.jsx)(n.strong,{children:"Instructions de niveau sup\xe9rieur"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour plus d'information : ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/csharp/fundamentals/program-structure/top-level-statements",children:"https://learn.microsoft.com/fr-ca/dotnet/csharp/fundamentals/program-structure/top-level-statements"})]}),"\n",(0,s.jsxs)(n.p,{children:["La nouvelle approche permet de g\xe9rer plus facilement les nouveaux concepts introduits dans ",(0,s.jsx)(n.strong,{children:".NET Core"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"exemple-de-lapproche-classique",children:"Exemple de l'approche classique"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un nouveau projet dans Visual Studio. S\xe9lectionnez le mod\xe8le ",(0,s.jsx)(n.strong,{children:"Application console (.NET Framework)"}),". Prenez celui avec la mention ",(0,s.jsx)(n.strong,{children:"csharp"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Nommez votre projet ",(0,s.jsx)(n.strong,{children:"DemoC4_Classique"}),". S\xe9lectionnez l'infrastructure ",(0,s.jsx)(n.strong,{children:".Net Framework 4.8"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La classe ",(0,s.jsx)(n.strong,{children:"Program.cs"})," contient le code de d\xe9marrage."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 l'int\xe9rieur de la m\xe9thode  ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Main"})}),", ce sera le code du programme."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'namespace DemoC4_Classique\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine("Appuyez sur ENTER pour quitter.");\r\n\t\t\t\r\n            //Demande une touche \xe0 l\'utilisateur tant que ce n\'est pas la touche ENTER\r\n            while (Console.ReadKey().Key != ConsoleKey.Enter)\r\n            {\r\n                Console.Clear();\r\n                Console.WriteLine("Mauvaise touche. Appuyez sur ENTER pour quitter.");\r\n            }\r\n\r\n            Console.WriteLine("Aurevoir !");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"exemple-de-lapproche-sans-classe",children:"Exemple de l'approche sans classe"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un nouveau projet dans Visual Studio. S\xe9lectionnez le mod\xe8le ",(0,s.jsx)(n.strong,{children:"Application console"}),". Prenez celui avec la mention ",(0,s.jsx)(n.strong,{children:"csharp"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Nommez votre projet ",(0,s.jsx)(n.strong,{children:"DemoC4"}),". S\xe9lectionnez l'infrastructure ",(0,s.jsx)(n.strong,{children:".NET 7.0"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," est vide."]}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de reproduire le m\xeame programme directement."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine("Appuyez sur ENTER pour quitter.");\r\n\t\t\t\r\n//Demande une touche \xe0 l\'utilisateur tant que ce n\'est pas la touche ENTER\r\nwhile (Console.ReadKey().Key != ConsoleKey.Enter)\r\n{\r\n    Console.Clear();\r\n    Console.WriteLine("Mauvaise touche. Appuyez sur ENTER pour quitter.");\r\n}\r\n\r\nConsole.WriteLine("Aurevoir !");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"projet-et-solution",children:"Projet et solution"}),"\n",(0,s.jsxs)(n.p,{children:["Quelle est la diff\xe9rence entre un projet et une solution en ",(0,s.jsx)(n.strong,{children:".Net"})," ?"]}),"\n",(0,s.jsxs)(n.p,{children:["Il est fr\xe9quent en ",(0,s.jsx)(n.strong,{children:".Net"})," de s\xe9parer une application en plusieurs projets. G\xe9n\xe9ralement, le projet consiste en une couche logicielle. Cette couche contient le code correspondant au r\xf4le du projet dans l'application. Un projet peut \xeatre utilis\xe9 dans plusieurs applications."]}),"\n",(0,s.jsx)(n.p,{children:"La solution permet de regrouper plusieurs projets ensemble. La solution n'a pas de logique en soi. Elle permet d'avoir acc\xe8s \xe0 plusieurs projets rapidement. G\xe9n\xe9ralement, la solution contient tous les projets n\xe9cessaires \xe0 l'application."}),"\n",(0,s.jsx)(n.h2,{id:"principes-solid",children:"Principes SOLID"}),"\n",(0,s.jsxs)(n.p,{children:["Les principes ",(0,s.jsx)(n.strong,{children:"SOLID"})," sont 5 principes qui permettent d'avoir une meilleure conception des logiciels."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici l'explication r\xe9sum\xe9e des principes selon la page Wikip\xe9dia : ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/SOLID_(informatique)",children:"https://fr.wikipedia.org/wiki/SOLID_(informatique)"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsabilit\xe9 unique (Single responsibility principle)"}),"\r\nUne classe, une fonction ou une m\xe9thode doit avoir une et une seule responsabilit\xe9."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ouvert/ferm\xe9 (Open/closed principle)"}),"\r\nUne entit\xe9 applicative (classe, fonction, module ...) doit \xeatre ferm\xe9e \xe0 la modification directe, mais ouverte \xe0 l'extension."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Substitution de Liskov (Liskov substitution principle)"}),"\r\nUne instance de type T doit pouvoir \xeatre remplac\xe9e par une instance de type G, tel que G sous-type de T, sans que cela ne modifie la coh\xe9rence du programme."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"S\xe9gr\xe9gation des interfaces (Interface segregation principle)"}),"\r\nPr\xe9f\xe9rer plusieurs interfaces sp\xe9cifiques pour chaque client plut\xf4t qu'une seule interface g\xe9n\xe9rale."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inversion des d\xe9pendances (Dependency inversion principle)"}),"\r\nIl faut d\xe9pendre des abstractions, pas des impl\xe9mentations"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Certaines techniques pr\xe9sent\xe9es dans ce cours r\xe9f\xe8reront \xe0 l'un des principes ",(0,s.jsx)(n.strong,{children:"SOLID"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"structure-de-base-de-lapplication",children:"Structure de base de l'application"}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible d'utiliser cette approche avec une application console avec ",(0,s.jsx)(n.strong,{children:".NET 7"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Les prochaines \xe9tapes pr\xe9parent la structure de base du projet ",(0,s.jsx)(n.strong,{children:"Console"})," pour \xeatre en mesure d'utiliser l'injection de d\xe9pendances."]}),"\n",(0,s.jsx)(n.h3,{id:"pr\xe9paration-du-projet",children:"Pr\xe9paration du projet"}),"\n",(0,s.jsx)(n.p,{children:"Afin de structurer notre application console convenablement, il faut mettre en place certains \xe9l\xe9ments."}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un nouveau projet ",(0,s.jsx)(n.strong,{children:"Application Console"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_projet_1.png"}),"\n",(0,s.jsxs)(n.p,{children:["Nommez le projet ",(0,s.jsx)(n.strong,{children:"GestionPersonnageApp"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_projet_2.png"}),"\n",(0,s.jsxs)(n.p,{children:["S\xe9lectionnez l'infrastructure ",(0,s.jsx)(n.strong,{children:".NET 7.0"})," et d\xe9cochez ",(0,s.jsx)(n.strong,{children:"N'utilisez pas d'instructions de niveau sup\xe9rieur."})]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_projet_3.png"}),"\n",(0,s.jsx)(n.h3,{id:"installation-des-librairies",children:"Installation des librairies"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut utiliser la librairie ",(0,s.jsx)(n.strong,{children:"Microsoft.Extensions.Hosting"})," pour \xeatre en mesure de cr\xe9er une application avec l'enregistrement de services par injection de d\xe9pendances."]}),"\n",(0,s.jsxs)(n.p,{children:["L'ajout des librairies se fait par ",(0,s.jsx)(n.strong,{children:"Nuget"}),". Il est plus convivial d'utiliser la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),". Elle se retrouve dans le bas de l'\xe9cran\xad. Si l'onglet n'est pas l\xe0, allez dans le menu ",(0,s.jsx)(n.strong,{children:"Affichage -> Autres fen\xeatres -> Console du Gestionnaire de package"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_package_console_1.png"}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", incrivez cette ligne."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Install-Package Microsoft.Extensions.Hosting\n"})}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_package_console_2.png"}),"\n",(0,s.jsxs)(n.p,{children:["Lorsque la librairie est install\xe9e, elle est maintenant visible dans le dossier ",(0,s.jsx)(n.strong,{children:"D\xe9pendances -> Packages"})," du projet de l'",(0,s.jsx)(n.strong,{children:"Explorateur de solutions"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_package_console_3.png"}),"\n",(0,s.jsx)(n.h2,{id:"la-classe-app",children:"La classe App"}),"\n",(0,s.jsxs)(n.p,{children:["Le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," sert \xe0 configurer et \xe0 pr\xe9parer l'environnement de l'application. Il faut tout de m\xeame une classe de d\xe9part pour accueillir le code initial de l'application."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"App.cs"})," \xe0 la racine du projet."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"namespace GestionPersonnageApp;\r\n\r\n/// <summary>\r\n/// Classe qui repr\xe9sente la base de l'application console\r\n/// </summary>\r\npublic class App\r\n{\r\n    private readonly IServiceProvider _serviceProvider;\r\n    private readonly string[] _args;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"serviceProvider\">Fournisser de service pour r\xe9cupp\xe9rer les d\xe9pendances</param>\r\n    public App(IServiceProvider serviceProvider)\r\n    {   \r\n        _serviceProvider = serviceProvider;\r\n        \r\n        //Verifie si le programme a des arguments sp\xe9cifiques\r\n        if(Environment.GetCommandLineArgs().Length > 1)\r\n        {\r\n            //Le programme a des arguments sp\xe9cifiques\r\n            //R\xe9cup\xe8re \xe0 partir du 2e argument, car le premier est la r\xe9f\xe9rence du programme\r\n            _args = Environment.GetCommandLineArgs().ToList().GetRange(1, Environment.GetCommandLineArgs().Length - 1).ToArray();\r\n        }\r\n        else\r\n        {\r\n            //Il n'y a aucun argument sp\xe9cifique\r\n            //Cr\xe9e un tableau vide\r\n            _args = new string[0];\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    /// <summary>\r\n    /// M\xe9thode qui s'occupe du d\xe9marrage de l'application\r\n    /// </summary>\r\n    /// <returns>T\xe2ches</returns>\r\n    public async Task DemarrerApplicationAsync()\r\n    {\r\n        //Le point de d\xe9part de la logique de l'application\r\n        \r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour le test initial, ins\xe9rez le code ci-dessous dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DemarrerApplicationAsync"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'Console.WriteLine("Appuyez sur ENTER pour quitter.");\r\n\t\t\t\r\n//Demande une touche \xe0 l\'utilisateur tant que ce n\'est pas la touche ENTER\r\nwhile (Console.ReadKey().Key != ConsoleKey.Enter)\r\n{\r\n    Console.Clear();\r\n    Console.WriteLine("Mauvaise touche. Appuyez sur ENTER pour quitter.");\r\n}\r\n\r\nConsole.WriteLine("Aurevoir !");\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe ",(0,s.jsx)(n.strong,{children:"App"})," a le r\xf4le d'initialiser l'application console en fonction des param\xe8tres re\xe7us. Une application console peut effectuer plusieurs t\xe2ches diff\xe9rentes, mais la coordination des t\xe2ches doivent se faire dans leur propre classe."]}),"\n",(0,s.jsxs)(n.p,{children:["Cette approche permet de respecter le ",(0,s.jsx)(n.strong,{children:"S"})," de ",(0,s.jsx)(n.strong,{children:"SOLID"}),". Une classe doit avoir une seule responsabilit\xe9."]}),"\n",(0,s.jsx)(n.h2,{id:"fichier-programcs",children:"Fichier Program.cs"}),"\n",(0,s.jsxs)(n.p,{children:["Pour \xeatre en mesure de d\xe9marrer l'application, il faut ajouter le code ci-dessous dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Le fichier programme sert \xe0 configurer l'application et \xe0 enregistrer les services (classes) disponibles pour l'injection de d\xe9pendances."}),"\n",(0,s.jsx)(n.p,{children:"Voici la coquille du fichier."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\n//La variable args sont les arguments du programme. Ils seront accessibles en tout temps \xe0 partir de Environment.GetCommandLineArgs()\r\n//\xc0 noter que l'index 0 est toujours le nom du DLL ex\xe9cut\xe9.\r\n\r\n//Creation du configurateur de l'application\r\n\r\nvar builder = Host.CreateDefaultBuilder(args);\r\n\r\n//Configuration des services\r\nbuilder.ConfigureServices((context, services) =>\r\n{\r\n    services.AddTransient<App>(); //Application principale\r\n});\r\n\r\n//Cr\xe9ation du host de l'application en fonction de sa configuration\r\nvar host = builder.Build();\r\n\r\n//D\xe9marrage de l'application\r\nApp application = host.Services.GetRequiredService<App>();\r\nawait application.DemarrerApplicationAsync();\n"})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"sur la ligne services.AddTransientApp();"}),(0,s.jsx)(n.p,{children:"App r\xe9f\xe8re \xe0 la classe App"})]}),"\n",(0,s.jsx)(n.p,{children:"D\xe9marrez le programme pour tester votre code."}),"\n",(0,s.jsx)(n.p,{children:"Pourquoi ne pas avoir fait ceci \xe0 la ligne 21 ."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"App application = new App(host.Services);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En utilisant ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"host.Services.GetRequiredService<App>();"})}),", ceci permet de d'injecter automatiquement toutes les d\xe9pendances dans le constructeur."]}),"\n",(0,s.jsx)(n.h2,{id:"arguments-du-programme",children:"Arguments du programme"}),"\n",(0,s.jsx)(n.p,{children:"Afin de permettre \xe0 l'application d'effectuer plusieurs t\xe2ches, il faut passer en arguments diff\xe9rents param\xe8tres."}),"\n",(0,s.jsx)(n.p,{children:"Voici comment les arguments sont envoy\xe9s par l'invite de commandes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"c:\\projet> monprog.exe -univers -afficher\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Les arguments proviennent de la variable ",(0,s.jsx)(n.strong,{children:"args"})," du fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"}),". Cette variable est un tableau. L'index 0 correspond \xe0 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"-univers"})}),", l'index 1 correspond  \xe0 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"-afficher"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La classe ",(0,s.jsx)(n.strong,{children:"App"})," dans son constructeur r\xe9cup\xe8re les arguments du programme \xe0 la ligne 24."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"        _args = Environment.GetCommandLineArgs().ToList().GetRange(1, Environment.GetCommandLineArgs().Length - 1).ToArray();\n"})}),"\n",(0,s.jsx)(n.p,{children:"\xc0 cette \xe9tape, l'index 0 correspond au fichier compil\xe9 du programme. Il faut donc l'exclure."}),"\n",(0,s.jsxs)(n.p,{children:["Selon l'option choisie par l'utilisateur, la classe ",(0,s.jsx)(n.strong,{children:"App"})," choisira l\u2019action \xe0 utiliser. Ce choix se fera dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DemarrerApplicationAsync"})}),".  Remplacez la m\xe9thode avec le code ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'public async Task DemarrerApplicationAsync()\r\n{\r\n    //Le point de d\xe9part de la logique de l\'application\r\n\r\n    switch(_args[0].ToLower())\r\n    {\r\n        case "-univers":\r\n\r\n            if (_args[1].ToLower() == "-afficher")\r\n            {\r\n                Console.WriteLine("J\'affiche les univers.");\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            Console.WriteLine("Argument non valide");\r\n            break;\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Ex\xe9cutez l'application. Elle devrait g\xe9n\xe9rer une exception \xe0 la ligne 5 ci-dessus. La raison est que le programme n' a re\xe7u aucun argument et que le code de s\xe9lection en attend. Il faut donc ajouter une v\xe9rification si la longueur des arguments n'est pas valide, et avoir une option par d\xe9faut si aucun argument n'est sp\xe9cifi\xe9."}),"\n",(0,s.jsxs)(n.p,{children:["Dans notre cas, l'argument par d\xe9faut sera ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"-aide"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Modifiez le constructeur par celui-ci. La ligne 16 sera modifi\xe9e pour appliquer le param\xe8tre par d\xe9faut."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:'public App(IServiceProvider serviceProvider)\r\n{\r\n    _serviceProvider = serviceProvider;\r\n\r\n    //Verifie si le programme a des arguments sp\xe9cifiques\r\n    if (Environment.GetCommandLineArgs().Length > 1)\r\n    {\r\n        //Le programme a des arguments sp\xe9cifiques\r\n        //R\xe9cup\xe8re \xe0 partir du 2e argument, car le premier est la r\xe9f\xe9rence du programme\r\n        _args = Environment.GetCommandLineArgs().ToList().GetRange(1, Environment.GetCommandLineArgs().Length - 1).ToArray();\r\n    }\r\n    else\r\n    {\r\n        //Il n\'y a aucun argument sp\xe9cifique\r\n        //Cr\xe9e un tableau vide\r\n        // highlight-next-line\r\n        _args = new string[] { "-aide" };\r\n    }\r\n\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Ajoutez la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AfficherAide()"})})," dans la classe App."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\r\n/// M\xe9thode qui affiche le message d\'aide du programme\r\n/// </summary>    \r\nprivate void AfficherAide()\r\n{\r\n    Console.WriteLine("Voici les param\xe8tres \xe0 utiliser.");\r\n    Console.WriteLine("-aide        Affiche l\'aide du programme.");\r\n    Console.WriteLine("-[module] -[t\xe2che]       Permet de s\xe9lectionner le module et appliquer une t\xe2che.");\r\n    Console.WriteLine("La liste des modules : univers.");\r\n    Console.WriteLine("La liste des t\xe2ches : afficher.");\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Modifiez la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DemarrerApplicationAsync"})})," pour ajouter l'option ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"-aide"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public async Task DemarrerApplicationAsync()\r\n{\r\n    //Le point de d\xe9part de la logique de l\'application\r\n\r\n    switch (_args[0].ToLower())\r\n    {\r\n        //highlight-start\r\n        case "-aide":\r\n            AfficherAide();\r\n            break;\r\n        //highlight-end\r\n        case "-univers":\r\n\r\n            if (_args[1].ToLower() == "-afficher")\r\n            {\r\n                Console.WriteLine("J\'affiche les univers.");\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            Console.WriteLine("Argument non valide");\r\n            break;\r\n    }\r\n\r\n    //N\xe9c\xe9ssaire, car il n\'y a aucun await dans le code et la m\xe9thode est async\r\n    await Task.CompletedTask;\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"D\xe9marrez de nouveau l'application. Le message d'aide s'affichera."}),"\n",(0,s.jsx)(n.h3,{id:"sp\xe9cification-des-arguments-en-mode-d\xe9veloppement",children:"Sp\xe9cification des arguments en mode d\xe9veloppement"}),"\n",(0,s.jsxs)(n.p,{children:["En d\xe9veloppement, il est possible de sp\xe9cifier les arguments. Appuyez sur le bouton ",(0,s.jsx)(n.strong,{children:"fl\xe8che vers le bas"})," \xe0 droite du bouton d'ex\xe9cution. Ensuite, s\xe9lectionnez le menu ",(0,s.jsx)(n.strong,{children:"Propri\xe9t\xe9s de d\xe9bogage de ..."}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_argument_1.png"}),"\n",(0,s.jsxs)(n.p,{children:["Dans la zone de texte ",(0,s.jsx)(n.strong,{children:"Arguments de ligne de commande"}),", il faut mettre les arguments \xe0 utiliser. Appuyez sur le ",(0,s.jsx)(n.strong,{children:"X"})," de la fen\xeatre pour fermer. Il n'y a pas de bouton ",(0,s.jsx)(n.strong,{children:"OK"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_argument_2.png"}),"\n",(0,s.jsxs)(n.p,{children:["D\xe9marrez le programme et le texte ",(0,s.jsx)(n.strong,{children:"J'affiche les univers."})," s'affichera dans la console."]}),"\n",(0,s.jsx)(n.h2,{id:"classe-de-coordination---manager",children:"Classe de coordination - Manager"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut maintenant ajouter la logique pour la gestion de l'affichage de l'univers. Cette logique ne doit pas \xeatre dans la classe ",(0,s.jsx)(n.strong,{children:"App"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Afin de respecter le ",(0,s.jsx)(n.strong,{children:"S"})," de ",(0,s.jsx)(n.strong,{children:"SOLID"}),", les classes doivent avoir une seule responsabilit\xe9. La responsabilit\xe9 de la classe ",(0,s.jsx)(n.strong,{children:"App"})," est de d\xe9terminer la t\xe2che et d'appeler le bonne classe de coordination."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut donc cr\xe9er une classe qui s'occupe de la coordination entre l'utilisateur et l'utilisation des services. Ce type de classe sera un ",(0,s.jsx)(n.strong,{children:"Manager"}),". Plusieurs personnes appellent \xe9galement ce type de classe un ",(0,s.jsx)(n.strong,{children:"contr\xf4leur"}),", car son r\xf4le est de faire le lien entre l'utilisateur et la logique de notre application. Dans un serveur Web MVC ou API Rest, le ",(0,s.jsx)(n.strong,{children:"contr\xf4leur"})," a le m\xeame r\xf4le. Afin de diff\xe9rencier le concept entre une application Web et une application console, la classe de coordination sera un ",(0,s.jsx)(n.strong,{children:"Manager"})," dans ce cours pour faire la coordination entre la console et la logique."]}),"\n",(0,s.jsxs)(n.p,{children:["Il peut \xeatre difficile de d\xe9terminer le d\xe9coupage des ",(0,s.jsx)(n.strong,{children:"Manager"}),". Il serait possible de cr\xe9er un ",(0,s.jsx)(n.strong,{children:"AfficherUniversManager"})," et un ",(0,s.jsx)(n.strong,{children:"SupprimerUniversManager"}),". Par contre, la quantit\xe9 de classe risque d'\xeatre assez \xe9norme. Il serait plus int\xe9ressant de regrouper les t\xe2ches en fonction du mod\xe8le. Par exemple, ",(0,s.jsx)(n.strong,{children:"UniversManager"}),". Le ",(0,s.jsx)(n.strong,{children:"S"})," est encore respect\xe9, car cette classe s'occupe uniquement de coordonner ",(0,s.jsx)(n.strong,{children:"Univers"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"Managers"}),". Dans ce dossier, cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"UniversManager"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'namespace GestionPersonnageApp.Managers;\r\n\r\n/// <summary>\r\n/// Classe qui s\'occupe de la coordination du mod\xe8le Univers\r\n/// </summary>\r\npublic class UniversManager\r\n{\r\n    public void AfficherListe()\r\n    {\r\n        Console.WriteLine("Afficher tout.");\r\n    }\r\n\r\n    public void AfficherParId()\r\n    {\r\n        Console.WriteLine("Entrer la cl\xe9 de l\'univers.");\r\n        \r\n        int universId = Int32.Parse(Console.ReadLine());\r\n\r\n        Console.WriteLine($"Afficher univers #{universId}.");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["G\xe9n\xe9rez automatiquement l'interface avec l'action rapide. Placez le curseur sur le nom de la classe, faites ",(0,s.jsx)(n.strong,{children:"CTRL+."})," (CTRL et le point) et s\xe9lectionnez ",(0,s.jsx)(n.strong,{children:"Extraire l'interface"}),". (ou ",(0,s.jsx)(n.strong,{children:"CTRL-R, CTRL_I"}),", ou Edition/Refactoriser/Extraire interface)"]}),"\n",(0,s.jsx)(n.p,{children:"N'oubliez pas de mettre des commentaires dans l'interface lorsque cette technique est utilis\xe9e."}),"\n",(0,s.jsx)(n.p,{children:"Voici ce que l'interface devrait ressembler une fois document\xe9e."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace GestionPersonnageApp.Managers;\r\n\r\n/// <summary>\r\n/// Interface qui s'occupe de la coordination du mod\xe8le Univers\r\n/// </summary>\r\npublic interface IUniversManager\r\n{\r\n    /// <summary>\r\n    /// Afficher tous les univers\r\n    /// </summary>\r\n    void AfficherListe();\r\n\r\n    /// <summary>\r\n    /// Afficher un univers en fonction de sa cl\xe9 primaire\r\n    /// </summary>        \r\n    void AfficherParId();\r\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["En ",(0,s.jsx)(n.strong,{children:"c#"}),", si un membre provient de l'interface, il faut seulement le documenter dans l'interface pour respecter le principe ",(0,s.jsx)(n.strong,{children:"DRY (Don't Repeate Yourself) ou Ne te r\xe9p\xe8te pas."})]})}),"\n",(0,s.jsx)(n.h3,{id:"enregistrement-du-manager---programcs",children:"Enregistrement du Manager - program.cs"}),"\n",(0,s.jsxs)(n.p,{children:["Remplacez la section de la configuration des services du fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," par le code ci-dessous."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"}),", il faut enregistrer le ",(0,s.jsx)(n.strong,{children:"Manager"})," comme indiqu\xe9 \xe0 la ligne 7."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"//Configuration des services\r\nbuilder.ConfigureServices((context, services) =>\r\n{\r\n    services.AddTransient<App>(); //Application principale\r\n\r\n//highlight-start\r\n    //Manager\r\n    services.AddTransient<IUniversManager, UniversManager>();\r\n//highlight-end\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"iserviceprovider",children:"IServiceProvider"}),"\n",(0,s.jsxs)(n.p,{children:["Il serait possible d'injecter les ",(0,s.jsx)(n.strong,{children:"Manager"})," dans le constructeur comme l'exemple ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public App(IUniversManager universManager, IPersonnageManager personnageManager)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, le programme risque d'avoir plusieurs ",(0,s.jsx)(n.strong,{children:"Manager"}),". Un seul ",(0,s.jsx)(n.strong,{children:"Manager"})," est n\xe9cessaire par ex\xe9cution du programme. Si tous les ",(0,s.jsx)(n.strong,{children:"Manager"})," sont inject\xe9s automatiquement lors de la cr\xe9ation de la classe ",(0,s.jsx)(n.strong,{children:"App"}),", beaucoup de m\xe9moire sera utilis\xe9e inutilement. Si le programme n\xe9cessite uniquement ",(0,s.jsx)(n.strong,{children:"UniversManager"}),", la cr\xe9ation de ",(0,s.jsx)(n.strong,{children:"PersonnageManager"})," sera inutile et consommera de la m\xe9moire et des ressources inutiles."]}),"\n",(0,s.jsxs)(n.p,{children:["Le service ",(0,s.jsx)(n.strong,{children:"IServiceProvider"}),", est en mesure de cr\xe9er uniquement les classes n\xe9cessaires \xe0 l'application console. Si l'application peut effectuer plusieurs t\xe2ches selon la r\xe9ception des param\xe8tres, il est pr\xe9f\xe9rable d'injecter uniquement la classe qui s'occupera de la coordination de la t\xe2che demand\xe9e."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est recommand\xe9 de limiter l'utilisation du ",(0,s.jsx)(n.strong,{children:"IServiceProvider"})," au maximum. Il faut le mettre \xe0 un seul endroit dans le programme si c'est n\xe9cessaire. C'est une mauvaise pratique d'injecter partout le ",(0,s.jsx)(n.strong,{children:"IServiceProvider"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut donc cr\xe9er ",(0,s.jsx)(n.strong,{children:"UniversManager"})," par cette technique."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"IUniversManager universManager = _serviceProvider.GetRequiredService<IUniversManager>();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la classe ",(0,s.jsx)(n.strong,{children:"App"}),", il faut modifier la m\xe9thode ",(0,s.jsx)(n.strong,{children:"DemarrerApplicationAsync"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'public async Task DemarrerApplicationAsync()\r\n{\r\n    //Le point de d\xe9part de la logique de l\'application\r\n\r\n    switch (_args[0].ToLower())\r\n    {\r\n        case "-aide":\r\n            AfficherAide();\r\n            break;\r\n\r\n        case "-univers":\r\n\r\n            if (_args[1].ToLower() == "-afficher")\r\n            {\r\n                //highlight-start\r\n                //Cr\xe9ation du manager par le service d\'injection de d\xe9pendances.\r\n                IUniversManager universManager = _serviceProvider.GetRequiredService<IUniversManager>();\r\n\r\n                universManager.AfficherParId();\r\n                //highlight-end\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            Console.WriteLine("Argument non valide");\r\n            break;\r\n    }\r\n    \r\n    //highlight-start\r\n    //N\xe9cessaire, car il n\'y a aucun await dans le code et la m\xe9thode est async\r\n    await Task.CompletedTask;\r\n    //highlight-end\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"D\xe9marrez le programme pour tester."}),"\n",(0,s.jsx)(n.h2,{id:"injection-de-d\xe9pendances",children:"Injection de d\xe9pendances"}),"\n",(0,s.jsxs)(n.p,{children:["La technique d'injection de d\xe9pendances par interface permet de respecter le principe ",(0,s.jsx)(n.strong,{children:"D"})," de ",(0,s.jsx)(n.strong,{children:"SOLID"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"L'interface permet d'isoler la d\xe9pendance de la classe."}),"\n",(0,s.jsxs)(n.p,{children:["Pour d\xe9montrer l'utilit\xe9, il faut cr\xe9er un ",(0,s.jsx)(n.strong,{children:"Repository"})," pour interroger les donn\xe9es. Pour l'instant, les donn\xe9es seront uniquement en m\xe9moire."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(n.strong,{children:"Data"})," et \xe0 l'int\xe9rieur de celui-ci, cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"Univers"}),". Cette classe est un \xe9l\xe9ment du mod\xe8le du domaine d'affaires. Le dossier ",(0,s.jsx)(n.strong,{children:"Data"})," contiendra les classes du mod\xe8le du domaine."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"namespace GestionPersonnageApp.Data;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'un univers pour les personnages\r\n/// </summary>\r\npublic class Univers\r\n{\r\n    public int UniversId { get; set; }\r\n    public string Nom { get;set; }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Selon la communaut\xe9 ",(0,s.jsx)(n.strong,{children:"csharp"}),", il n'est pas n\xe9cessaire de documenter une propri\xe9t\xe9 lorsque son nom est significatif."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(n.strong,{children:"Repositories"})," et \xe0 l'int\xe9rieur de celui-ci, cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IUniversRepo"}),". Le dossier ",(0,s.jsx)(n.strong,{children:"Repositories"})," accueillera les classes qui s'occupent d'interagir avec les donn\xe9es du syst\xe8me."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"using GestionPersonnageApp.Data;\r\n\r\nnamespace GestionPersonnageApp.Repositories;\r\n\r\npublic interface IUniversRepo\r\n{\r\n    Univers? ObtenirUnivers(int universId);\r\n    \r\n    List<Univers> ObtenirListe();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez \xe9galement que la m\xe9thode retourne le type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Univers?"})}),". Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"?"})})," n'est pas obligatoire, mais si il n'est pas mis, le compilateur retournera un avertissement que l'objet peut \xeatre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})}),". Le point d'interrogation permet d'indiquer au compilateur que la valeur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})})," est possible dans notre logique. Si la m\xe9thode retourne ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"null"})}),", c'est que l'univers n'a pas \xe9t\xe9 trouv\xe9."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"UniversV1Repo"}),". Remarquez que la recherche de donn\xe9es n'est aucunement efficace."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using GestionPersonnageApp.Data;\r\n\r\nnamespace GestionPersonnageApp.Repositories;\r\n\r\npublic class UniversV1Repo : IUniversRepo\r\n{\r\n    private List<Univers> _lstUnivers;\r\n\t\r\n\tpublic UniversV1Repo()\r\n\t{\r\n        //Cr\xe9ation d\'une liste en m\xe9moire\r\n\t\t_lstUnivers= new List<Univers>();\r\n\t\t_lstUnivers.Add(new Univers() { UniversId = 1, Nom = "Marvel"});\r\n        _lstUnivers.Add(new Univers() { UniversId = 2, Nom = "DC Comics" });\r\n        _lstUnivers.Add(new Univers() { UniversId = 3, Nom = "TMNT" });\r\n        _lstUnivers.Add(new Univers() { UniversId = 4, Nom = "Power Rangers" });\r\n    }\r\n\r\n    public Univers? ObtenirUnivers(int universId)\r\n    {\r\n        //Affiche un message dans la console du d\xe9veloppeur\r\n        System.Diagnostics.Debug.WriteLine("Utilisation de UniversV1Repo.");\r\n        Univers? univers = null;\r\n\r\n        //Aucunement efficace. La liste est enti\xe8rement visit\xe9e\r\n       for(int index = 0; index < _lstUnivers.Count; index++)\r\n        {\r\n            if(_lstUnivers[index].UniversId == universId)\r\n            {\r\n                univers = _lstUnivers[index];\r\n            }\r\n        }\r\n\r\n        return univers;\r\n    }\r\n    \r\n    public List<Univers> ObtenirListe()\r\n    {\r\n        return _lstUnivers;\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"UniversV2Repo"}),". Une requ\xeate ",(0,s.jsx)(n.strong,{children:"LINQ"})," en notation ",(0,s.jsx)(n.strong,{children:"Lambda"})," sera utilis\xe9e pour obtenir le bon univers."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using GestionPersonnageApp.Data;\r\n\r\nnamespace GestionPersonnageApp.Repositories;\r\n\r\npublic class UniversV2Repo : IUniversRepo\r\n{\r\n    private List<Univers> _lstUnivers;\r\n\r\n    public UniversV2Repo()\r\n    {\r\n        //Cr\xe9ation d\'une liste en m\xe9moire\r\n        _lstUnivers = new List<Univers>();\r\n        _lstUnivers.Add(new Univers() { UniversId = 1, Nom = "Marvel" });\r\n        _lstUnivers.Add(new Univers() { UniversId = 2, Nom = "DC Comics" });\r\n        _lstUnivers.Add(new Univers() { UniversId = 3, Nom = "TMNT" });\r\n        _lstUnivers.Add(new Univers() { UniversId = 4, Nom = "Power Rangers" });\r\n    }\r\n\r\n    public Univers? ObtenirUnivers(int universId)\r\n    {\r\n        //Affiche un message dans la console du d\xe9veloppeur\r\n        System.Diagnostics.Debug.WriteLine("Utilisation de UniversV2Repo.");\r\n        return _lstUnivers.Where(u => u.UniversId == universId).FirstOrDefault();\r\n    }\r\n    \r\n    public List<Univers> ObtenirListe()\r\n    {\r\n        return _lstUnivers;\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Vous pouvez mettre un ",(0,s.jsx)(n.strong,{children:"break point"})," \xe0 la ligne 22 des 2 classes pour bien visualiser quelle classe est utilis\xe9e. \xc9galement, le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"System.Diagnostics.Debug.WriteLine"})})," permet d'\xe9crire dans la console de d\xe9veloppement. Il y a beaucoup d'information dans cette console, mais le code de cette console est seulement pour le d\xe9veloppeur."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/05_debug_console_1.png"}),"\n",(0,s.jsxs)(n.p,{children:["Les 3 prochaines sections illustrent 3 fa\xe7ons pour utiliser le ",(0,s.jsx)(n.strong,{children:"repository"})," dans ",(0,s.jsx)(n.strong,{children:"UniversManager"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"La derni\xe8re technique (7.3) sera utilis\xe9e pour les travaux pratiques."}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-directe---new-class-\xe0-ne-pas-faire",children:"Cr\xe9ation directe - new class (\xe0 ne pas faire)"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut modifier le ",(0,s.jsx)(n.strong,{children:"Manager"})," Univers pour utiliser le ",(0,s.jsx)(n.strong,{children:"Repository"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Il ne faut pas faire la cr\xe9ation comme aux lignes 14 et 30."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using GestionPersonnageApp.Data;\r\nusing GestionPersonnageApp.Repositories;\r\n\r\nnamespace GestionPersonnageApp.Managers;\r\n\r\n/// <summary>\r\n/// Classe qui s\'occupe de la coordination de mod\xe8le Univers\r\n/// </summary>\r\npublic class UniversManager : IUniversManager\r\n{   \r\n    public void AfficherListe()\r\n    {\r\n        UniversV1Repo universRepo = new UniversV1Repo();\r\n\r\n        List<Univers> lstUnivers = universRepo.ObtenirListe();\r\n\r\n        foreach(Univers univers in lstUnivers)\r\n        {\r\n            Console.WriteLine($"Id : {univers.UniversId}, Nom : {univers.Nom}");\r\n        }\r\n    }\r\n\r\n    public void AfficherParId()\r\n    {\r\n        Console.WriteLine("Entrer la cl\xe9 de l\'univers.");\r\n\r\n        int universId = Int32.Parse(Console.ReadLine());\r\n\r\n        UniversV1Repo universRepo = new UniversV1Repo();\r\n\r\n        Univers? univers = universRepo.ObtenirUnivers(universId);\r\n\r\n        if (univers != null)\r\n        {\r\n            Console.WriteLine($"Id : {univers.UniversId}, Nom : {univers.Nom}");\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine("Univers non trouv\xe9.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Si vous ex\xe9cutez le programme, le code fonctionnera."}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, une cr\xe9ation directe rend la classe enti\xe8rement d\xe9pendante de la classe ",(0,s.jsx)(n.strong,{children:"UniversV1Repo"}),". Si nous d\xe9sirons utiliser ",(0,s.jsx)(n.strong,{children:"UniversV2Repo"}),", il faudra modifier dans tout le programme les emplacements que le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"new UniversV1Repo()"})})," est appel\xe9. Si cette classe est cr\xe9\xe9e dans 1 million de fois, il faut le modifier 1 million de fois. Il existe des outils de refactorisation pour nous aider, mais ce n'est pas l'id\xe9al. Seulement dans ",(0,s.jsx)(n.strong,{children:"UniversManager"}),", elle est cr\xe9\xe9e 2 fois."]}),"\n",(0,s.jsx)(n.h2,{id:"injection-de-la-classe-\xe0-\xe9viter",children:"Injection de la classe (\xe0 \xe9viter)"}),"\n",(0,s.jsx)(n.p,{children:"La 2e technique serait de l'injecter par le constructeur, en utilisant la classe."}),"\n",(0,s.jsxs)(n.p,{children:["Premi\xe8rement, il faut enregistrer le service ",(0,s.jsx)(n.strong,{children:"UniversV1Repo"}),". Remplacez la section de la configuration des services du fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," par le code ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//Configuration des services\r\nbuilder.ConfigureServices((context, services) =>\r\n{\r\n    services.AddTransient<App>(); //Application principale\r\n\r\n    //Manager\r\n    services.AddTransient<IUniversManager, UniversManager>();\r\n\r\n    //Repo\r\n    services.AddTransient<UniversV1Repo>();\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La classe ",(0,s.jsx)(n.strong,{children:"UniversManager"})," sera comme ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using GestionPersonnageApp.Data;\r\nusing GestionPersonnageApp.Repositories;\r\n\r\nnamespace GestionPersonnageApp.Managers;\r\n\r\n/// <summary>\r\n/// Classe qui s\'occupe de la coordination de mod\xe8le Univers\r\n/// </summary>\r\npublic class UniversManager : IUniversManager\r\n{\r\n    private readonly UniversV1Repo _universRepo;\r\n\r\n    public UniversManager(UniversV1Repo universRepo)\r\n    {\r\n        _universRepo = universRepo;\r\n    }\r\n\r\n    public void AfficherListe()\r\n    {\r\n        List<Univers> lstUnivers = _universRepo.ObtenirListe();\r\n\r\n        foreach (Univers univers in lstUnivers)\r\n        {\r\n            Console.WriteLine($"Id : {univers.UniversId}, Nom : {univers.Nom}");\r\n        }\r\n    }\r\n\r\n    public void AfficherParId()\r\n    {\r\n        Console.WriteLine("Entrer la cl\xe9 de l\'univers.");\r\n\r\n        int universId = Int32.Parse(Console.ReadLine());\r\n\r\n        Univers? univers = _universRepo.ObtenirUnivers(universId);\r\n\r\n        if (univers != null)\r\n        {\r\n            Console.WriteLine(univers.Nom);\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine("Univers non trouv\xe9.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Cette approche utilise l'injection de d\xe9pendances, mais utilise la classe impl\xe9ment\xe9e dans le constructeur."}),"\n",(0,s.jsxs)(n.p,{children:["Lorsque l'enregistrement de la d\xe9pendance sera remplac\xe9 par la nouvelle version comme ci-dessous, il faudra modifier \xe9galement tous les constructeurs qui utilisent ",(0,s.jsx)(n.strong,{children:"UniversV1Repo"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Remplacez la section de la configuration des services du fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," par le code ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"//Configuration des services\r\nbuilder.ConfigureServices((context, services) =>\r\n{\r\n    services.AddTransient<App>(); //Application principale\r\n\r\n    //Manager\r\n    services.AddTransient<IUniversManager, UniversManager>();\r\n\r\n    //Repo\r\n    services.AddTransient<UniversV2Repo>();\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["D\xe9marrez le programme. Toutes les classes qui utilisent ",(0,s.jsx)(n.strong,{children:"UniversV1Repo"})," ne seront plus utilisables. Le programme aura cette exception lorsqu'il essayera de l'utiliser : ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"'Unable to resolve service for type 'GestionPersonnageApp.Repositories.UniversV1Repo' while attempting to activate 'GestionPersonnageApp.Managers.UniversManager'.'"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour simuler cette erreur, dans la classe ",(0,s.jsx)(n.strong,{children:"UniversManager"}),", conserver le constructeur ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"public UniversManager(UniversV1Repo universRepo)"})}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ASTUCE :"})," Lorsque vous avez l'exception ",(0,s.jsx)(n.strong,{children:"Unable to resolve service for type"}),", la plupart du temps c'est que la classe n'est pas enregistr\xe9e dans les services disponibles par injection de d\xe9pendances."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"injection-par-linterface-approche-recommand\xe9e",children:"Injection par l'interface (approche recommand\xe9e)"}),"\n",(0,s.jsxs)(n.p,{children:["La meilleure approche est d'injecter l'interface par le constructeur. Le ",(0,s.jsx)(n.strong,{children:"Manager"})," n'est plus d\xe9pendant d'une classe, mais d'une interface. Il sera maintenant plus efficace d'utiliser une 2e version du ",(0,s.jsx)(n.strong,{children:"repo"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Modifiez le code de ",(0,s.jsx)(n.strong,{children:"UniversManager"})," pour celui-ci. Le constructeur re\xe7oit l'interface ",(0,s.jsx)(n.strong,{children:"IUniversRepo"})," comme d\xe9pendance."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:'using GestionPersonnageApp.Data;\r\nusing GestionPersonnageApp.Repositories;\r\n\r\nnamespace GestionPersonnageApp.Managers;\r\n\r\n/// <summary>\r\n/// Classe qui s\'occupe de la coordination de mod\xe8le Univers\r\n/// </summary>\r\npublic class UniversManager : IUniversManager\r\n{\r\n    private readonly IUniversRepo _universRepo;\r\n\r\n    public UniversManager(IUniversRepo universRepo)\r\n    {\r\n        _universRepo = universRepo;\r\n    }\r\n    public void AfficherListe()\r\n    {\r\n        Console.WriteLine("Afficher liste.");\r\n    }\r\n\r\n    public void AfficherParId()\r\n    {\r\n        Console.WriteLine("Entrer la cl\xe9 de l\'univers.");\r\n        \r\n        int universId = Int32.Parse(Console.ReadLine());        \r\n\r\n        Univers? univers = _universRepo.ObtenirUnivers(universId);\r\n\r\n        if(univers != null)\r\n        {\r\n            Console.WriteLine(univers.Nom);\r\n        }\r\n        else\r\n        {\r\n            Console.WriteLine("Univers non trouv\xe9.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Remplacez la section de la configuration des services du fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," par le code ci-dessous. \xc0 la ligne 9, l'enregistrement se fait par l'interface."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//Configuration des services\r\nbuilder.ConfigureServices((context, services) =>\r\n{\r\n    services.AddTransient<App>(); //Application principale\r\n\r\n    //Manager\r\n    services.AddTransient<IUniversManager, UniversManager>();\r\n\r\n    //Repo\r\n    services.AddTransient<IUniversRepo, UniversV1Repo>();\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["D\xe9marrez le programme. Il sera fonctionnel et il utilisera la classe ",(0,s.jsx)(n.strong,{children:"UniversV1Repo"})," lorsque l'interface ",(0,s.jsx)(n.strong,{children:"IUniversRepo"})," sera inject\xe9 dans un constructeur."]}),"\n",(0,s.jsxs)(n.p,{children:["Remplacez la section de la configuration des services du fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," par le code ci-dessous pour que la classe soit maintenant ",(0,s.jsx)(n.strong,{children:"UniversV2Repo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"//Configuration des services\r\nbuilder.ConfigureServices((context, services) =>\r\n{\r\n    services.AddTransient<App>(); //Application principale\r\n\r\n    //Manager\r\n    services.AddTransient<IUniversManager, UniversManager>();\r\n\r\n    //Repo\r\n    services.AddTransient<IUniversRepo, UniversV2Repo>();\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["D\xe9marrez le programme. Il sera fonctionnel et il utilisera la classe ",(0,s.jsx)(n.strong,{children:"UniversV2Repo"})," lorsque l'interface ",(0,s.jsx)(n.strong,{children:"IUniversRepo"})," sera inject\xe9e dans un constructeur. Si 1 million de classes utilisaient ",(0,s.jsx)(n.strong,{children:"IUniversRepo"}),", une seule ligne de code permet d'utiliser la nouvelle version dans tout le programme."]}),"\n",(0,s.jsxs)(n.p,{children:["Un autre avantage d'utiliser les interfaces est lors des tests. Il est possible de remplacer les d\xe9pendances par des ",(0,s.jsx)(n.strong,{children:"simulacres"}),". Les tests seront pr\xe9sent\xe9s plus tard dans la session."]}),"\n",(0,s.jsx)(n.h1,{id:"type-denregistrement-des-d\xe9pendances",children:"Type d'enregistrement des d\xe9pendances"}),"\n",(0,s.jsx)(n.p,{children:"Il existe 3 types d'enregistrement pour les d\xe9pendances. Ces types d'enregistrement consistent \xe0 la dur\xe9e de vie de l'instance de la classe qui sera cr\xe9\xe9e lors de l'injection."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Transient"})}),"\n",(0,s.jsx)(n.p,{children:"Une nouvelle instance est cr\xe9\xe9e \xe0 chaque fois qu'un objet demande une injection de cette d\xe9pendance."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Scoped"})}),"\n",(0,s.jsxs)(n.p,{children:["Une seule instance est cr\xe9\xe9e pour toute la dur\xe9e de vie du ",(0,s.jsx)(n.strong,{children:"scope"}),". Tous les objets qui demandent une injection de ce service \xe0 l'int\xe9rieur du ",(0,s.jsx)(n.strong,{children:"scope"})," auront la m\xeame instance."]}),"\n",(0,s.jsxs)(n.p,{children:["En application console, le ",(0,s.jsx)(n.strong,{children:"scope"})," doit \xeatre cr\xe9\xe9 manuellement."]}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, dans le cas d'une application ",(0,s.jsx)(n.strong,{children:"Blazor Server"}),", un rafraichissement du navigateur ou un nouvel onglet consiste \xe0 un nouveau ",(0,s.jsx)(n.strong,{children:"scope"}),". Le changement de page sans rafraichissement du navigateur n'occasionne pas de changement de ",(0,s.jsx)(n.strong,{children:"scope"}),". Le ",(0,s.jsx)(n.strong,{children:"scope"})," consiste \xe0 la cr\xe9ation de la requ\xeate initiale avec le serveur par le navigateur."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Singleton"})}),"\n",(0,s.jsx)(n.p,{children:"Une seule instance est cr\xe9\xe9e pour toute la dur\xe9e de vie de l'application."}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>t});var s=r(7294);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);