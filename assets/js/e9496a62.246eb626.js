"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[1138],{1018:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=r(5893),s=r(1151);const t={sidebar_position:10},a="Introduction",l={id:"WPF partie 2/wpf2_xaml",title:"Introduction",description:"Dans ce document,  l'application aura ses premi\xe8res interfaces visuelles. Les interfaces seront des listes d'\xe9l\xe9ments.",source:"@site/docs/72-WPF partie 2/wpf2_xaml.md",sourceDirName:"72-WPF partie 2",slug:"/WPF partie 2/wpf2_xaml",permalink:"/4N1_2024/docs/WPF partie 2/wpf2_xaml",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"NotesSidebar",previous:{title:"Bogus",permalink:"/4N1_2024/docs/G\xe9n\xe9ration de donn\xe9es de test/Bogus_intro"},next:{title:"Planification",permalink:"/4N1_2024/docs/Enseignant/a_planning"}},o={},d=[{value:"XAML",id:"xaml",level:2},{value:"Patron MVVM",id:"patron-mvvm",level:2},{value:"Mod\xe8le du domaine ou mod\xe8le de donn\xe9es",id:"mod\xe8le-du-domaine-ou-mod\xe8le-de-donn\xe9es",level:3},{value:"Pr\xe9paration du projet WPF",id:"pr\xe9paration-du-projet-wpf",level:2},{value:"Librairie MVVM Toolkit",id:"librairie-mvvm-toolkit",level:3},{value:"Cr\xe9ation d&#39;une classe de base - BaseVM",id:"cr\xe9ation-dune-classe-de-base---basevm",level:3},{value:"Cr\xe9ation du ViewModel - MainWindowVM",id:"cr\xe9ation-du-viewmodel---mainwindowvm",level:3},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions",level:3},{value:"Modification du design de la vue - MainWindows.xaml",id:"modification-du-design-de-la-vue---mainwindowsxaml",level:3},{value:"Modification du code de la vue - MainWindow.xaml.cs",id:"modification-du-code-de-la-vue---mainwindowxamlcs",level:3},{value:"Th\xe9orie - HelloWorld",id:"th\xe9orie---helloworld",level:2},{value:"Cr\xe9ation du ViewModel - HelloWorldVM",id:"cr\xe9ation-du-viewmodel---helloworldvm",level:3},{value:"Cr\xe9ation de la vue - UcHelloWorld.xaml",id:"cr\xe9ation-de-la-vue---uchelloworldxaml",level:3},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions-1",level:3},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",level:3},{value:"Assignation du ViewModel initial - MainWindowVM",id:"assignation-du-viewmodel-initial---mainwindowvm",level:3},{value:"Formater des donn\xe9es",id:"formater-des-donn\xe9es",level:3},{value:"Grid Layout",id:"grid-layout",level:3},{value:"Taille fixe",id:"taille-fixe",level:4},{value:"Taille dynamique",id:"taille-dynamique",level:3},{value:"Taille fixe et dynamique",id:"taille-fixe-et-dynamique",level:3},{value:"Taille automatique",id:"taille-automatique",level:3},{value:"Commande",id:"commande",level:3},{value:"Asynchrone",id:"asynchrone",level:3},{value:"Asynchrone et constructeur",id:"asynchrone-et-constructeur",level:3},{value:"Champ texte num\xe9rique",id:"champ-texte-num\xe9rique",level:3},{value:"S\xe9lection d&#39;une date",id:"s\xe9lection-dune-date",level:3},{value:"Liste des cat\xe9gories",id:"liste-des-cat\xe9gories",level:2},{value:"Projet SuperCarte.EF",id:"projet-supercarteef",level:3},{value:"Ajout des donn\xe9es par Seed",id:"ajout-des-donn\xe9es-par-seed",level:3},{value:"Projet SuperCarte.Code",id:"projet-supercartecode",level:3},{value:"Cr\xe9ation du mod\xe8le du domaine - EnsembleModel",id:"cr\xe9ation-du-mod\xe8le-du-domaine---ensemblemodel",level:4},{value:"Cr\xe9ation de la classe d&#39;extension - CategorieMapExtensions",id:"cr\xe9ation-de-la-classe-dextension---categoriemapextensions",level:4},{value:"Cr\xe9ation du service - CategorieService",id:"cr\xe9ation-du-service---categorieservice",level:4},{value:"Th\xe9orie sur le <code>async Task</code>",id:"th\xe9orie-sur-le-async-task",level:5},{value:"Projet SuperCarte.WPF",id:"projet-supercartewpf",level:3},{value:"Enregistrement du service - SCServiceExtensions",id:"enregistrement-du-service---scserviceextensions",level:4},{value:"Ajout de r\xe9f\xe9rences dans Usings.cs",id:"ajout-de-r\xe9f\xe9rences-dans-usingscs",level:4},{value:"Cr\xe9ation du ViewModel - ListeCategoriesVM",id:"cr\xe9ation-du-viewmodel---listecategoriesvm",level:4},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions-2",level:4},{value:"Cr\xe9ation de la vue - UcListeCategories.xaml",id:"cr\xe9ation-de-la-vue---uclistecategoriesxaml",level:4},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml-1",level:4},{value:"Test - MainWindowVM",id:"test---mainwindowvm",level:4},{value:"Chargement automatique",id:"chargement-automatique",level:4},{value:"Barre d&#39;activit\xe9",id:"barre-dactivit\xe9",level:4},{value:"Supprimer une cat\xe9gorie",id:"supprimer-une-cat\xe9gorie",level:2},{value:"SuperCarte.Core",id:"supercartecore",level:3},{value:"Cr\xe9ez le mod\xe8le de d\xe9pendance - CategorieDependance",id:"cr\xe9ez-le-mod\xe8le-de-d\xe9pendance---categoriedependance",level:4},{value:"Ajouter la requ\xeate dans le Repository - CategorieRepo",id:"ajouter-la-requ\xeate-dans-le-repository---categorierepo",level:4},{value:"Ajouter dans le service - CategorieService",id:"ajouter-dans-le-service---categorieservice",level:4},{value:"SuperCarte.WPF",id:"supercartewpf",level:3},{value:"Ajouter la commande dans le ViewModel - ListeCartesVM",id:"ajouter-la-commande-dans-le-viewmodel---listecartesvm",level:4},{value:"Lier le bouton avec la commande dans la vue  - UcListeCategories.xaml",id:"lier-le-bouton-avec-la-commande-dans-la-vue----uclistecategoriesxaml",level:4},{value:"R\xe9appliquer le seed",id:"r\xe9appliquer-le-seed",level:4},{value:"Localisation",id:"localisation",level:2},{value:"Installation de la librairie",id:"installation-de-la-librairie",level:3},{value:"Cr\xe9ation du fichier ressource - ResListeCategories",id:"cr\xe9ation-du-fichier-ressource---reslistecategories",level:3},{value:"Cr\xe9ation du fichier ressource - ResGlobalListeBouton",id:"cr\xe9ation-du-fichier-ressource---resgloballistebouton",level:3},{value:"Utilisation dans la vue - UcListeCategories.xaml",id:"utilisation-dans-la-vue---uclistecategoriesxaml",level:3},{value:"Test",id:"test",level:3},{value:"Liste des cartes",id:"liste-des-cartes",level:2},{value:"SuperCarte.Core",id:"supercartecore-1",level:3},{value:"Cr\xe9ation du mod\xe8le - CarteDetailModel",id:"cr\xe9ation-du-mod\xe8le---cartedetailmodel",level:4},{value:"Ajout de la requ\xeate dans Repository - CarteRepo",id:"ajout-de-la-requ\xeate-dans-repository---carterepo",level:4},{value:"Cr\xe9ation du service - CarteService",id:"cr\xe9ation-du-service---carteservice",level:4},{value:"Projet SuperCarte.WPF",id:"projet-supercartewpf-1",level:3},{value:"Enregistrement du service - SCServiceExtensions",id:"enregistrement-du-service---scserviceextensions-1",level:4},{value:"Cr\xe9ation du ViewModel - ListeCartesVM",id:"cr\xe9ation-du-viewmodel---listecartesvm",level:4},{value:"Enregistrer le ViewModel - SCViewModelExtensions",id:"enregistrer-le-viewmodel---scviewmodelextensions-3",level:4},{value:"Cr\xe9ation du fichier ressource - ResUcListeCartes",id:"cr\xe9ation-du-fichier-ressource---resuclistecartes",level:4},{value:"Cr\xe9ation de la vue - UcListeCartes.xaml",id:"cr\xe9ation-de-la-vue---uclistecartesxaml",level:4},{value:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml",id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml-2",level:4},{value:"Test - MainWindowVM",id:"test---mainwindowvm-1",level:4},{value:"Alignement \xe0 droite des nombres",id:"alignement-\xe0-droite-des-nombres",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"Dans ce document,  l'application aura ses premi\xe8res interfaces visuelles. Les interfaces seront des listes d'\xe9l\xe9ments."}),"\n",(0,i.jsx)(n.p,{children:"Il sera possible de faire quelques op\xe9rations avec la base de donn\xe9es, dont la r\xe9cup\xe9ration des donn\xe9es et la suppression."}),"\n",(0,i.jsxs)(n.p,{children:["La coordination de l'interface graphique se fera avec le patron de conception ",(0,i.jsx)(n.strong,{children:"Model-View-ViewModel"})," ou ",(0,i.jsx)(n.strong,{children:"MVVM"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Finalement, l'interface graphique utilisera des fichiers ressources pour la traduction du logiciel."}),"\n",(0,i.jsx)(n.h2,{id:"xaml",children:"XAML"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"XAML"})," est un langage par balise pour cr\xe9er des interfaces graphiques. Ce langage n'est pas utilis\xe9 uniquement par ",(0,i.jsx)(n.strong,{children:"WPF"}),". Par contre, m\xeame si d'autres plateformes comme ",(0,i.jsx)(n.strong,{children:"MAUI"})," utilise ",(0,i.jsx)(n.strong,{children:"XAML"}),", ce ne sont pas n\xe9cessairement les m\xeames composants qui sont disponibles dans la librairie. Il faut s'assurer que le composant est disponible avec la librairie visuelle utilis\xe9e. Heuseureusement, les principaux composants fonctionnent de la m\xeame fa\xe7on."]}),"\n",(0,i.jsxs)(n.p,{children:["Plusieurs concepts sont inspir\xe9s du ",(0,i.jsx)(n.strong,{children:"HTML"}),", mais ce langage est tout de m\xeame tr\xe8s diff\xe9rent du ",(0,i.jsx)(n.strong,{children:"HTML"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Visual Studio"})," permet de cr\xe9er l'interface graphique sans toucher au code ",(0,i.jsx)(n.strong,{children:"XAML"}),". Il est possible de faire du ",(0,i.jsx)(n.strong,{children:"drag and drop"})," des composants dans l'interface visuelle et de modifier les propri\xe9t\xe9s \xe0 partir de la fen\xeatre de propri\xe9t\xe9s."]}),"\n",(0,i.jsxs)(n.p,{children:["Le site ",(0,i.jsx)(n.strong,{children:"WPF Tutorial"})," (",(0,i.jsx)(n.a,{href:"https://wpf-tutorial.com/",children:"https://wpf-tutorial.com/"}),") explique le fonctionnement de plusieurs composants. Le site a une version en fran\xe7ais qui est traduite par la communaut\xe9 (",(0,i.jsx)(n.a,{href:"https://wpf-tutorial.com/Localization/LanguageStatus/fr/",children:"https://wpf-tutorial.com/Localization/LanguageStatus/fr/"}),") . Il y a beaucoup de publicit\xe9, mais c'est une tr\xe8s bonne source d'information."]}),"\n",(0,i.jsx)(n.h2,{id:"patron-mvvm",children:"Patron MVVM"}),"\n",(0,i.jsxs)(n.p,{children:["Le patron ",(0,i.jsx)(n.strong,{children:"Model-View-ViewModel"})," ou ",(0,i.jsx)(n.strong,{children:"MVVM"})," fait partie de la grande famille des patrons de conception pour la s\xe9paration de l'interface graphique et la logique applicative. ",(0,i.jsx)(n.strong,{children:"MVC"})," et ",(0,i.jsx)(n.strong,{children:"MVP"})," sont d'autres patrons de la m\xeame famille."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"MVVM"})," a \xe9t\xe9 invent\xe9 par Microsoft  vers 2005 pour faciliter le d\xe9veloppement des applications ",(0,i.jsx)(n.strong,{children:"WPF"})," et ",(0,i.jsx)(n.strong,{children:"Silverlight"}),". Aujourd'hui, le patron est utilis\xe9 avec d'autres technologies. Par exemple, il est possible de l'utiliser avec ",(0,i.jsx)(n.strong,{children:"Blazor"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"MVVM"})," est s\xe9par\xe9 en 3 concepts."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Model"})," ou mod\xe8le"]}),"\n",(0,i.jsx)(n.p,{children:"Le mod\xe8le est la classe qui contient les donn\xe9es du logiciel qui doivent \xeatre affich\xe9es \xe0 l'utilisateur. Ce sont g\xe9n\xe9ralement les classes du mod\xe8le du domaine qui sont utilis\xe9es."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"View"})," ou vue"]}),"\n",(0,i.jsxs)(n.p,{children:["La vue consiste \xe0 l'interface utilisateur. Dans le concept ",(0,i.jsx)(n.strong,{children:"MVVM"})," pur, il ne devrait avoir aucun code dans la vue. Mais d'un point de vue pratique, il arrive parfois de mettre un peu de logique dans la vue pour faciliter l'interaction de l'interface utilisateur."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ViewModel"})," ou Mod\xe8leVue"]}),"\n",(0,i.jsxs)(n.p,{children:["Le terme ",(0,i.jsx)(n.strong,{children:"ViewModel"})," sera utilis\xe9 dans ce cours. Il ne se traduit pas tr\xe8s bien en fran\xe7ais."]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," contient la logique d'interaction de la vue. Il est dans la famille ",(0,i.jsx)(n.strong,{children:"contr\xf4leur"}),". Son r\xf4le est de coordonner l'interface utilisateur et de fournir les \xe9tats et les valeurs aux composants visuels. Chaque ",(0,i.jsx)(n.strong,{children:"Vue"})," utilise un ",(0,i.jsx)(n.strong,{children:"ViewModel"})]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," publie des propri\xe9t\xe9s que les composants visuels utilisent par liaison."]}),"\n",(0,i.jsx)(n.p,{children:"Lorsqu'une valeur d'un composant est modifi\xe9e dans l'interface visuelle, la liaison met automatiquement \xe0 jour le mod\xe8le."}),"\n",(0,i.jsx)(n.p,{children:"Lorsqu'une valeur du mod\xe8le est modifi\xe9e, la liaison met automatiquement \xe0 jour l'interface visuelle par notification."}),"\n",(0,i.jsxs)(n.p,{children:["Le principe de liaison est \xe9galement utilis\xe9 par ",(0,i.jsx)(n.strong,{children:"Angular"})," et ",(0,i.jsx)(n.strong,{children:"Blazor"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," re\xe7oit une commande, un \xe9v\xe9nement ou un appel de m\xe9thodes pour effectuer des actions qui provient de l'interface utilisateur pour initier une action. Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," utilise les ",(0,i.jsx)(n.strong,{children:"Services"})," de l'application."]}),"\n",(0,i.jsxs)(n.p,{children:["Il y a beaucoup d'exemple sur internet que le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," utilise directement le ",(0,i.jsx)(n.strong,{children:"Repository"})," et qu'il a y un peu plus de logique dans le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". Cette approche n'est pas mauvaise, car le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," est facilement testable. Par contre, il est possible de modifier un m\xeame type d'enregistrement dans plusieurs ",(0,i.jsx)(n.strong,{children:"vues"})," diff\xe9rentes. Il faut s'assurer que la logique de modification est la m\xeame dans tous les ",(0,i.jsx)(n.strong,{children:"ViewModels"}),". En utilisant un ",(0,i.jsx)(n.strong,{children:"Service"}),", la logique est \xe0 un seul endroit."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["En s\xe9parant la ",(0,i.jsx)(n.strong,{children:"Vue"})," et la logique de coordination, il est tr\xe8s facile de modifier l'interface visuelle sans trop de cons\xe9quences. Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," ne connait pas la ",(0,i.jsx)(n.strong,{children:"Vue"}),", donc la logique de coordination reste la m\xeame, peu importe si la ",(0,i.jsx)(n.strong,{children:"Vue"})," utilise un ",(0,i.jsx)(n.strong,{children:"ListView"}),", un ",(0,i.jsx)(n.strong,{children:"DataGrid"})," ou un composant maison."]}),"\n",(0,i.jsxs)(n.p,{children:["De plus, le plus grand avantage est qu'il est possible des faires des tests automatis\xe9s avec le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". Par exemple, si aucun item n\u2019est s\xe9lectionn\xe9 dans la liste, il n'est pas possible de faire la suppression. Il est possible de tester ce cas, car la coordination se fait dans une classe ind\xe9pendante."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour avoir une d\xe9finition th\xe9orique, voici 2 liens Microsoft. Ce n'est pas pour ",(0,i.jsx)(n.strong,{children:"WPF"}),", mais les concepts restent les m\xeames."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour UWP : ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/fr-fr/windows/uwp/data-binding/data-binding-and-mvvm",children:"https://learn.microsoft.com/fr-fr/windows/uwp/data-binding/data-binding-and-mvvm"})]}),"\n",(0,i.jsxs)(n.p,{children:["Pour MAUI : ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/architecture/maui/mvvm",children:"https://learn.microsoft.com/fr-ca/dotnet/architecture/maui/mvvm"})]}),"\n",(0,i.jsxs)(n.p,{children:["Wiki : ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",children:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"})]}),"\n",(0,i.jsx)(n.h3,{id:"mod\xe8le-du-domaine-ou-mod\xe8le-de-donn\xe9es",children:"Mod\xe8le du domaine ou mod\xe8le de donn\xe9es"}),"\n",(0,i.jsxs)(n.p,{children:["Il n'est pas recommand\xe9 d'utiliser un objet du mod\xe8le de donn\xe9es pour l'interaction utilisateur. Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," ne doit pas les utiliser. Il arrive souvent que le mod\xe8le de donn\xe9es soit pratiquement identique au mod\xe8le du domaine dans ses propri\xe9t\xe9s, il est donc tentant d'utiliser directement l'objet du mod\xe8le de donn\xe9es."]}),"\n",(0,i.jsxs)(n.p,{children:["L'objet du mod\xe8le de donn\xe9es est surveill\xe9 par le contexte qui l'a cr\xe9\xe9 tant que le contexte est actif. Si l'objet est modifi\xe9, mais il ne doit pas \xeatre mis \xe0 jour dans la base de donn\xe9es, l'objet sera pris en consid\xe9ration si l'instense de son contexte se met \xe0 jour par la m\xe9thode ",(0,i.jsx)(n.strong,{children:"SaveChanges()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour faciliter la conversion entre les diff\xe9rents types de ",(0,i.jsx)(n.strong,{children:"mod\xe8les"}),", il est possible d'utiliser une librairie ",(0,i.jsx)(n.strong,{children:"Mapper"}),". Pour ce projet, ce sera des ",(0,i.jsx)(n.strong,{children:"extensions"})," qui s'occuperont de faire la transition entre 2 types de mod\xe8les."]}),"\n",(0,i.jsx)(n.h2,{id:"pr\xe9paration-du-projet-wpf",children:"Pr\xe9paration du projet WPF"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut pr\xe9parer le projet ",(0,i.jsx)(n.strong,{children:"WPF"})," pour \xeatre en mesure d'int\xe9grer un ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"})," dans le ",(0,i.jsx)(n.strong,{children:"MainWindow"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"MainWindow"})," \xe9voluera en cours de projet. Pour l'instant, il sera le plus simple possible pour \xeatre en mesure de d\xe9marrer le projet."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez les dossiers ",(0,i.jsx)(n.strong,{children:"ViewModels"})," et ",(0,i.jsx)(n.strong,{children:"Views"})," \xe0 la racine du projet ",(0,i.jsx)(n.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"librairie-mvvm-toolkit",children:"Librairie MVVM Toolkit"}),"\n",(0,i.jsxs)(n.p,{children:["Il existe une librairie qui permet de g\xe9rer plus facilement la gestion du ",(0,i.jsx)(n.strong,{children:"MVVM"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Cette librairie offre \xe9norm\xe9ment de fonctionnalit\xe9s pour acc\xe9l\xe9rer le d\xe9veloppement."}),"\n",(0,i.jsxs)(n.p,{children:["La librairie sera utilis\xe9e pour la classe ",(0,i.jsx)(n.strong,{children:"ObservableObject"})," et pour les classes ",(0,i.jsx)(n.strong,{children:"RelayCommand"}),". Il aurait \xe9t\xe9 possible de cr\xe9er manuellement ces classes, mais elles ont d\xe9j\xe0 \xe9t\xe9 cr\xe9\xe9es. Il n'est pas utile de recr\xe9er ces classes identiques."]}),"\n",(0,i.jsxs)(n.p,{children:["La librairie int\xe8gre \xe9galement un g\xe9n\xe9rateur de code pour rendre certaines actions ",(0,i.jsx)(n.strong,{children:"magiques"}),". En ajoutant des ",(0,i.jsx)(n.strong,{children:"Annotations"})," sp\xe9cifiques sur des propri\xe9t\xe9s, une classe parall\xe8le est cr\xe9\xe9e pour g\xe9n\xe9rer le code. Pour ce projet, ce g\xe9n\xe9rateur de code ne sera pas utilis\xe9, car il faut bien comprendre la m\xe9canique du ",(0,i.jsx)(n.strong,{children:"MVVM"})," avant de l'utiliser."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans la ",(0,i.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,i.jsx)(n.strong,{children:"Projet par d\xe9faut"})," ",(0,i.jsx)(n.strong,{children:"WPF"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,i.jsx)(n.strong,{children:"SuperCarte.WPF"}),". \xc0 ce stade, il y a ",(0,i.jsx)(n.strong,{children:"plusieurs projets"})," et il est important de le modifier dans la liste."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Install-Package CommunityToolkit.Mvvm\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour plus d'information : ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/communitytoolkit/mvvm/",children:"https://learn.microsoft.com/fr-ca/dotnet/communitytoolkit/mvvm/"})]}),"\n",(0,i.jsx)(n.h3,{id:"cr\xe9ation-dune-classe-de-base---basevm",children:"Cr\xe9ation d'une classe de base - BaseVM"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut cr\xe9er la classe parent des ",(0,i.jsx)(n.strong,{children:"ViewModels"}),". Cette classe sera utilis\xe9e pour la navigation et pour les fonctionnalit\xe9s communes aux ",(0,i.jsx)(n.strong,{children:"ViewModels"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,i.jsx)(n.strong,{children:"ViewModels\\Bases"})," \xe0 la racine du projet ",(0,i.jsx)(n.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"BaseVM.cs"}),"  dans le dossier ",(0,i.jsx)(n.strong,{children:"ViewModels\\Bases"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.ComponentModel;\r\n\r\nnamespace SuperCarte.WPF.ViewModels.Bases;\r\n\r\n/// <summary>\r\n/// Classe abstraite pour du View Model\r\n/// </summary>\r\npublic abstract class BaseVM : ObservableObject\r\n{\r\n    \r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La classe h\xe9rite de la classe ",(0,i.jsx)(n.strong,{children:"ObservableObject"})," qui provient du ",(0,i.jsx)(n.strong,{children:"MVVM Toolkit"}),". Elle est actuellement vide, mais avoir le type ",(0,i.jsx)(n.strong,{children:"BaseVM"})," sera utile pour la navigation et \xe9ventuellement, il y aura la validation."]}),"\n",(0,i.jsxs)(n.p,{children:["Voici une partie du code de la classe ",(0,i.jsx)(n.strong,{children:"ObservableObject"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La classe impl\xe9mente l'interface ",(0,i.jsx)(n.strong,{children:"INotifyPropertyChanged"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cette interface contient l'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"PropertyChanged"}),". Lorsqu'un composant est li\xe9 \xe0 une propri\xe9t\xe9 du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),", il s'enregistre \xe0 cet \xe9v\xe9nement s'il est disponible. C'est par cet \xe9v\xe9nement qu'il est possible d'avertir la vue qu'il y a eu un changement de valeur dans la propri\xe9t\xe9 et que la vue doit mettre ce composant \xe0 jour."]}),"\n",(0,i.jsxs)(n.p,{children:["Il y a \xe9galement la m\xe9thode ",(0,i.jsx)(n.strong,{children:"SetProperty()"})," qui permet d'assigner la nouvelle valeur \xe0 la propri\xe9t\xe9. Elle permet \xe9galement de v\xe9rifier s'il y a r\xe9ellement eu un changement de valeur pour \xe9viter de soulever l'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"PropertyChanged"})," inutilement."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="NE PAS COPIER"',children:"/// <summary>\r\n/// A base class for objects of which the properties must be observable.\r\n/// </summary>\r\npublic abstract class ObservableObject : INotifyPropertyChanged, INotifyPropertyChanging\r\n{\r\n   \r\n    public event PropertyChangedEventHandler? PropertyChanged;\r\n    \r\n    protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)\r\n    {\r\n        OnPropertyChanged(new PropertyChangedEventArgs(propertyName));\r\n    }\r\n\r\n    \r\n    protected bool SetProperty<T>([NotNullIfNotNull(nameof(newValue))] ref T field, T newValue, [CallerMemberName] string? propertyName = null)\r\n    {        \r\n        if (EqualityComparer<T>.Default.Equals(field, newValue))\r\n        {\r\n            return false;\r\n        }\r\n\r\n        OnPropertyChanging(propertyName);\r\n\r\n        field = newValue;\r\n\r\n        OnPropertyChanged(propertyName);\r\n\r\n        return true;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cr\xe9ation-du-viewmodel---mainwindowvm",children:"Cr\xe9ation du ViewModel - MainWindowVM"}),"\n",(0,i.jsxs)(n.p,{children:["La fen\xeatre principale de l'application a besoin de son propre ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". Les classes du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," auront comme suffixe ",(0,i.jsx)(n.strong,{children:"VM"})," et elles seront dans le dossier ",(0,i.jsx)(n.strong,{children:"ViewModels"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"MainWindowVM.cs"}),"  dans ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class MainWindowVM : BaseVM\r\n{    \r\n    public MainWindowVM(IServiceProvider serviceProvider)\r\n\t{   \r\n        //S\xe9lectionner le ViewModel de d\xe9marrage\r\n        //VMActif = serviceProvider.GetRequiredService<>();\r\n    }\r\n\r\n    public BaseVM VMActif { get; set; }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La classe a une propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"VMACtif"})," pour indiquer le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," qui doit \xeatre affich\xe9. ",(0,i.jsx)(n.strong,{children:"WPF"})," est en mesure de savoir la ",(0,i.jsx)(n.strong,{children:"Vue"})," \xe0 utiliser en fonction du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," actif."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 9, le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," initial sera assign\xe9 comme celui qui est ",(0,i.jsx)(n.strong,{children:"Actif"}),". Cette approche sera un peu modifi\xe9e lorsque le ",(0,i.jsx)(n.strong,{children:"Navigateur"})," sera ajout\xe9 au projet."]}),"\n",(0,i.jsx)(n.h3,{id:"enregistrer-le-viewmodel---scviewmodelextensions",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n{\r\n    services.AddSingleton<MainWindowVM>();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," n'a pas d'interface. Il sera enregistr\xe9 automatiquement. Il n'est pas n\xe9cessaire pour cette classe d'utiliser une interface, car l'assignation ",(0,i.jsx)(n.strong,{children:"ViewModel"})," et ",(0,i.jsx)(n.strong,{children:"Vue"})," ne peut pas se faire par l'interface. De plus, il n'y a pas de b\xe9n\xe9fice au niveau des tests d'utiliser une interface pour le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.admonition,{title:"Important",type:"warning",children:(0,i.jsxs)(n.p,{children:["Notez que MainWindowVM a \xe9t\xe9 enregistr\xe9 en ",(0,i.jsx)(n.strong,{children:"Singleton"}),". Il faut avoir seulement une fen\xeatre active dans le programme. Les autres ",(0,i.jsx)(n.strong,{children:"ViewModels"})," seront enregistr\xe9s en ",(0,i.jsx)(n.strong,{children:"Transient"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"modification-du-design-de-la-vue---mainwindowsxaml",children:"Modification du design de la vue - MainWindows.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez le code de la fen\xeatre ",(0,i.jsx)(n.strong,{children:"MainWindows.xaml"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n        mc:Ignorable="d"\r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n    </Window.Resources>\r\n    <Grid>\r\n        <ContentControl Content="{Binding VMActif}" />\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Aux lignes 7 et 8, ce sont les d\xe9clarations des ",(0,i.jsx)(n.strong,{children:"namespaces"})," qui seront utiles dans cette vue."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 10, le pr\xe9fixe ",(0,i.jsx)(n.strong,{children:"v:"})," sera utilis\xe9 pour les ",(0,i.jsx)(n.strong,{children:"Vues"})," et le pr\xe9fixe ",(0,i.jsx)(n.strong,{children:"vm:"})," pour les ",(0,i.jsx)(n.strong,{children:"ViewModels"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"DataContext"})," consiste au ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". La ligne 10 sert \xe0 indiquer quel est le type du ",(0,i.jsx)(n.strong,{children:"DataContext"}),". Ce n'est pas une assignation r\xe9elle, mais un indicateur pour permettre les suggestions du code. Il sera donc possible de voir les propri\xe9t\xe9s du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," lors du ",(0,i.jsx)(n.strong,{children:"Binding"}),". Cette \xe9tape n'est pas obligatoire, mais elle est recommand\xe9e pour faciliter la programmation."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 12, la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:'WindowState="Maximized"'})," permet de maximiser la fen\xeatre au maximum."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 13, ce sont les ",(0,i.jsx)(n.strong,{children:"ressources"})," disponibles \xe0 la fen\xeatre. C'est \xe0 cet endroit que le lien entre ",(0,i.jsx)(n.strong,{children:"ViewModel"})," et ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"})," sera fait."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 17, il y a le contr\xf4le qui recevra le ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"})," en fonction du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," actif."]}),"\n",(0,i.jsx)(n.h3,{id:"modification-du-code-de-la-vue---mainwindowxamlcs",children:"Modification du code de la vue - MainWindow.xaml.cs"}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez le code du fichier ",(0,i.jsx)(n.strong,{children:"MainWindow.xaml.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using System.Windows;\r\n\r\nnamespace SuperCarte.WPF;\r\n/// <summary>\r\n/// Interaction logic for MainWindow.xaml\r\n/// </summary>\r\npublic partial class MainWindow : Window\r\n{\r\n    public MainWindow(MainWindowVM mainWindowVM)\r\n    {\r\n        InitializeComponent();\r\n        //Si non sp\xe9cifi\xe9, le format des donn\xe9es utilisera le format en-US\r\n        FrameworkElement.LanguageProperty.OverrideMetadata(typeof(FrameworkElement), \r\n            new FrameworkPropertyMetadata(System.Windows.Markup.XmlLanguage.GetLanguage(CultureInfo.CurrentUICulture.Name)));\r\n        DataContext = mainWindowVM;\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Le constructeur re\xe7oit le ",(0,i.jsx)(n.strong,{children:"MainWindowVM"})," en d\xe9pendance. Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," est assign\xe9 au ",(0,i.jsx)(n.strong,{children:"DataContext"})," de la fen\xeatre \xe0 la ligne 15."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut \xe9galement assigner la langue de la vue. G\xe9n\xe9ralement, lors de l'affichage d'une donn\xe9e, elle utilise le format correspondant dans les param\xe8tres r\xe9gionaux du syst\xe8me d'exploitation. Cette valeur provient de ",(0,i.jsx)(n.strong,{children:"CultureInfo.CurrentUICulture"}),". Par contre, avec WPF, il faut le sp\xe9cifier dans la structure de la vue."]}),"\n",(0,i.jsx)(n.p,{children:"La langue s'applique \xe0 la balise en cours et \xe0 ses enfants."}),"\n",(0,i.jsx)(n.h2,{id:"th\xe9orie---helloworld",children:"Th\xe9orie - HelloWorld"}),"\n",(0,i.jsxs)(n.p,{children:["Cette section permet de tester le ",(0,i.jsx)(n.strong,{children:"MVVM"})," et certains \xe9l\xe9ments du ",(0,i.jsx)(n.strong,{children:"XAML"})," sans se soucier du service."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Ca ne doit pas \xeatre reproduit dans votre ",(0,i.jsx)(n.strong,{children:"TP 3"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"Vous pouvez conserver le code de cette section dans ce projet."}),"\n",(0,i.jsx)(n.h3,{id:"cr\xe9ation-du-viewmodel---helloworldvm",children:"Cr\xe9ation du ViewModel - HelloWorldVM"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez une classe ",(0,i.jsx)(n.strong,{children:"HelloWorldVM.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"ViewModels"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.WPF.ViewModels\r\n{\r\n    public class HelloWorldVM : BaseVM\r\n    {\r\n        public HelloWorldVM()\r\n        {\r\n            DateHeure = DateTime.Now;\r\n            ValeurDecimal = 12_345.30m;\r\n            ValeurBool = true;\r\n        }\r\n\r\n        public DateTime DateHeure { get; set; }\r\n\r\n        public decimal ValeurDecimal { get; set; }\r\n\r\n        public bool ValeurBool { get; set; }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En ",(0,i.jsx)(n.strong,{children:"MVVM"}),", il n'est pas possible d'utiliser une propri\xe9t\xe9 auto-impl\xe9ment\xe9e si elle est li\xe9e \xe0 la vue, car il faut notifier le changement de valeur. Il faut donc de la logique dans le ",(0,i.jsx)(n.strong,{children:"set"}),". Lorsqu'il y a de la logique, il faut utiliser un attribut pour contenir la valeur de la propri\xe9t\xe9."]}),"\n",(0,i.jsxs)(n.p,{children:["Le constructeur permet d'assigner les valeurs initiales de la ",(0,i.jsx)(n.strong,{children:"Vue"}),". Les valeurs initiales peuvent provenir du service. Par contre, il n'est pas possible de faire de l'asynchrone dans le constructeur."]}),"\n",(0,i.jsx)(n.h3,{id:"cr\xe9ation-de-la-vue---uchelloworldxaml",children:"Cr\xe9ation de la vue - UcHelloWorld.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez une nouvelle classe nomm\xe9e ",(0,i.jsx)(n.strong,{children:"UcHelloWorld.xaml"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Views"}),". S\xe9lectionnez le mod\xe8le ",(0,i.jsx)(n.strong,{children:"WPF"})," \xe0 gauche de l'\xe9cran de cr\xe9ation de la classe, et choisissez ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Toutes les ",(0,i.jsx)(n.strong,{children:"Vues"})," seront du type ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World" />\r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n            <TextBlock Text="{Binding ValeurDecimal}" />\r\n            <CheckBox IsChecked="{Binding ValeurBool}" />\r\n        </StackPanel>        \r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["La premi\xe8re \xe9tape consiste \xe0 indiquer le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," qui sera utilis\xe9. Ce n'est pas obligatoire, mais en ajoutant les lignes 7 et 8 ci-dessous, il sera possible d'avoir des suggestions lors du ",(0,i.jsx)(n.strong,{children:"Binding"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 17, il y a le ",(0,i.jsx)(n.strong,{children:"Binding"})," de la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Text"})," avec la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"DateHeure"})," du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". L'autocompl\xe9tion sera fonctionnelle gr\xe2ce aux lignes 7 et 8."]}),"\n",(0,i.jsx)(n.h3,{id:"enregistrer-le-viewmodel---scviewmodelextensions-1",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n{\r\n    services.AddSingleton<MainWindowVM>();\r\n    services.AddTransient<HelloWorldVM>();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\xc9galement, il est enregistr\xe9 en ",(0,i.jsx)(n.strong,{children:"Transient"}),". \xc0 chaque fois que le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," sera n\xe9cessaire, il aura une nouvelle instance afin d'\xe9viter de conserver d\u2019anciens \xe9tats."]}),"\n",(0,i.jsx)(n.h3,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," et la ",(0,i.jsx)(n.strong,{children:"Vue"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",metastring:"showLineNumbers",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n        mc:Ignorable="d"\r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:HelloWorldVM}">\r\n            <v:UcHelloWorld />\r\n        </DataTemplate>\r\n    </Window.Resources>\r\n    <Grid>\r\n        <ContentControl Content="{Binding VMActif}" />\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["La ligne 15 \xe0 17 indique que lorsque le ",(0,i.jsx)(n.strong,{children:"DataContext"})," est de type ",(0,i.jsx)(n.strong,{children:"HelloWorldVM"})," (ligne 15), il faut utiliser le contr\xf4le utilisateur ",(0,i.jsx)(n.strong,{children:"UcHelloWorld"})," (ligne 16)."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 20, lorsque le ",(0,i.jsx)(n.strong,{children:"Content"})," du ",(0,i.jsx)(n.strong,{children:"ContentControl"})," sera un ",(0,i.jsx)(n.strong,{children:"HelloWorldVM"}),", il chargera le contr\xf4le utilisateur correspondant."]}),"\n",(0,i.jsx)(n.h3,{id:"assignation-du-viewmodel-initial---mainwindowvm",children:"Assignation du ViewModel initial - MainWindowVM"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"MainWindowVM.cs"}),", il faut indique que la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"VMActif"})," que c'est une instance de ",(0,i.jsx)(n.strong,{children:"HelloWorldVM"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class MainWindowVM : BaseVM\r\n{    \r\n    public MainWindowVM(IServiceProvider serviceProvider)\r\n\t{   \r\n        //S\xe9lectionner le ViewModel de d\xe9marrage\r\n        VMActif = serviceProvider.GetRequiredService<HelloWorldVM>();\r\n    }\r\n\r\n    public BaseVM VMActif { get; set; }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 10, le ",(0,i.jsx)(n.strong,{children:"ServiceProvider"})," obtiendra une instance de ",(0,i.jsx)(n.strong,{children:"HelloWorldVM"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["D\xe9marrez l'application et vous devriez voir le message ",(0,i.jsx)(n.strong,{children:"HelloWorld"})," avec la date et l'heure."]}),"\n",(0,i.jsx)(n.h3,{id:"formater-des-donn\xe9es",children:"Formater des donn\xe9es"}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de formater la valeur des propri\xe9t\xe9s dans un format sp\xe9cifique."}),"\n",(0,i.jsxs)(n.p,{children:["Lors du ",(0,i.jsx)(n.strong,{children:"Binding"}),", il est possible d'indiquer la transformation avec la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"StringFormat"}),", Le choix de l'affichage appartient \xe0 la ",(0,i.jsx)(n.strong,{children:"Vue"}),", donc il faut faire les transformations d'affichage dans la ",(0,i.jsx)(n.strong,{children:"Vue"})," et non dans le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour la date, il faut afficher en mode ",(0,i.jsxs)(n.strong,{children:["dd MMM yyyy HH:mm",":ss"]}),". Donc pour **2023-03-03 15:23:03.452121 ** se sera ",(0,i.jsx)(n.strong,{children:"3 Mars 2023 15:23:03"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Pour le nombre d\xe9cimal, il faut avoir un s\xe9parateur de milliers et avoir une pr\xe9cision au milli\xe8me (3 d\xe9cimaux). Le format sera **N3` **."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World" />\r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n            <TextBlock Text="{Binding ValeurDecimal, StringFormat=\\{0:N3\\}}" />            \r\n            <CheckBox IsChecked="{Binding ValeurBool}" />\r\n        </StackPanel>        \r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Notez que le format des chaines de caract\xe8res d\xe9pend \xe9galement des param\xe8tres r\xe9gionaux de l'ordinateur. En ",(0,i.jsx)(n.strong,{children:"fr-ca"}),", le s\xe9parateur de milliers est un espace et la d\xe9cimale est une virgule. Donc ",(0,i.jsx)(n.strong,{children:"N3"})," ne s'affichera pas n\xe9cessairement de la m\xeame fa\xe7on."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour plus d'information sur les r\xe8gles : ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/api/system.string.format?view=net-7.0",children:"https://learn.microsoft.com/fr-ca/dotnet/api/system.string.format?view=net-7.0"})]}),"\n",(0,i.jsx)(n.h3,{id:"grid-layout",children:"Grid Layout"}),"\n",(0,i.jsxs)(n.p,{children:["Le composant ",(0,i.jsx)(n.strong,{children:"Grid"})," permet de cr\xe9er une disposition dans un contr\xf4le. Afin de faciliter la visualisation du ",(0,i.jsx)(n.strong,{children:"Grid"}),", le param\xe8tre ",(0,i.jsx)(n.strong,{children:'ShowGridLines="true"'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Afin de d\xe9finir la grille, il faut d\xe9clarer des rang\xe9es et des colonnes."}),"\n",(0,i.jsx)(n.p,{children:"Dans l'exemple ci-dessous, la disposition sera de 3 rang\xe9es et de 2 colonnes. La premi\xe8re colonne est 0 et la premi\xe8re rang\xe9e est 0."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition />\r\n            <RowDefinition />            \r\n            <RowDefinition />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition />\r\n            <ColumnDefinition />\r\n        </Grid.ColumnDefinitions>\r\n </Grid>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Si aucun \xe9l\xe9ment n'est sp\xe9cifi\xe9 dans ",(0,i.jsx)(n.strong,{children:"Grid.ColumnDefinitions"}),", il y aura une seule colonne qui prendra tout l'espace."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition />\r\n            <RowDefinition />            \r\n            <RowDefinition />\r\n        </Grid.RowDefinitions>\r\n </Grid>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Si aucun \xe9l\xe9ment n'est sp\xe9cifi\xe9 dans ",(0,i.jsx)(n.strong,{children:"Grid.RowDefinitions"}),", il y aura une seule rang\xe9e qui prendra tout l'espace."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Grid ShowGridLines="true">\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition />\r\n            <ColumnDefinition />\r\n        </Grid.ColumnDefinitions>\r\n </Grid>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Afin d'indiquer l'emplacement d'un composant dans la grille, il faut l'indiquer dans les propri\xe9t\xe9s de positionnement ",(0,i.jsx)(n.strong,{children:"Grid.Row"})," et ",(0,i.jsx)(n.strong,{children:"Grid.Column"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc9galement, s'il la largeur et la hauteur n'est pas sp\xe9cifi\xe9, la disposition de la grille sera uniforme en fonction de la taille de la fen\xeatre. Elle sera ",(0,i.jsx)(n.strong,{children:"responsive"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Si ce n'est pas sp\xe9cifi\xe9, ce sera la valeur ",(0,i.jsx)(n.strong,{children:"0"}),". Il est recommand\xe9 de toujours indiquer l'emplacement de la rang\xe9e \xe0 moins qu'il y ait seulement 1 rang\xe9e et la m\xeame chose pour les colonnes."]}),"\n",(0,i.jsxs)(n.p,{children:["Il n'est pas n\xe9cessaire de les d\xe9clarer dans un ordre sp\xe9cifique. Le ",(0,i.jsx)(n.strong,{children:"TextBloc"})," (2,1) est d\xe9clar\xe9 avant le (1,0). Ce n'est pas recommand\xe9 de faire ceci, mais c'est possible."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition />\r\n            <RowDefinition />\r\n            <RowDefinition />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition />\r\n            <ColumnDefinition />\r\n        </Grid.ColumnDefinitions>\r\n\r\n        \x3c!--Row 0, Column 0--\x3e\r\n        <TextBlock  Grid.Row="0" Grid.Column="0"  Text="Hello World 0,0" />\r\n        \x3c!--<TextBlock Text="Hello World 0,0" />--\x3e\r\n        \r\n        \x3c!--Row 0, Col 1--\x3e\r\n        <TextBlock Grid.Row="0" Grid.Column="1" Text="Hello World 0,1" />\r\n        \x3c!--<TextBlock Grid.Column="1"  Text="Hello World 0,1" />--\x3e\r\n\r\n        \x3c!--Row 2, Col 1--\x3e\r\n        <TextBlock Grid.Row="2" Grid.Column="1" Text="Hello World 2,1" />\r\n        \r\n        \x3c!--Row 1, Col 0--\x3e\r\n        <TextBlock Grid.Row="1" Grid.Column="0" Text="Hello World 1,0" />\r\n</Grid>\n'})}),"\n",(0,i.jsx)(n.p,{children:"\xc9galement, il n'est pas n\xe9cessaire de sp\xe9cifier l'emplacement pour les composants enfants, si le parent poss\xe8de les propri\xe9t\xe9s de positionnement."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition />\r\n            <RowDefinition />\r\n            <RowDefinition />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition />\r\n            <ColumnDefinition />\r\n        </Grid.ColumnDefinitions>\r\n        \r\n        \x3c!-- Rang\xe9e 0 Colonne 0 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0,0)" />            \r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 0 Colonne 1 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0,1)" />            \r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 0 --\x3e\r\n\r\n        <StackPanel Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1,0)" />            \r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 1 --\x3e\r\n        <StackPanel Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1,1)" />  \r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.h4,{id:"taille-fixe",children:"Taille fixe"}),"\n",(0,i.jsxs)(n.p,{children:["Dans l'exemple ci-dessous, il y a 4 rang\xe9es. Il y a un \xe9l\xe9ment par rang\xe9es. La hauteur des rang\xe9es est fixe, donc la fen\xeatre n'est pas ",(0,i.jsx)(n.strong,{children:"responsive"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Le nombre correspond au nombre de pixels."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="100" />\r\n            <RowDefinition Height="200" />\r\n            <RowDefinition Height="300" />\r\n            <RowDefinition Height="400" />\r\n        </Grid.RowDefinitions>\r\n        \r\n        \x3c!-- Rang\xe9e 0 --\x3e\r\n        <StackPanel Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World" />            \r\n        </StackPanel>\r\n                 \r\n        \x3c!-- Rang\xe9e 1 --\x3e\r\n        <StackPanel Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 2 --\x3e\r\n        <StackPanel Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="{Binding ValeurDecimal, StringFormat=\\{0:N3\\}}" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 3 --\x3e\r\n        <StackPanel Grid.Row="3" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <CheckBox IsChecked="{Binding ValeurBool}" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Dans l'exemple ci-dessous, il y a \xe9galement des colonnes \xe0 taille fixe."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="100" />\r\n            <RowDefinition Height="500" />\r\n            <RowDefinition Height="200" />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width="200" />\r\n            <ColumnDefinition Width="600" />\r\n        </Grid.ColumnDefinitions>\r\n\r\n        \x3c!-- Rang\xe9e 0 Colonne 0 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 0  Colonne 1--\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 1--\x3e\r\n        <StackPanel Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="{Binding ValeurDecimal, StringFormat=\\{0:N3\\}}" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 2 Colonne 2 --\x3e\r\n        <StackPanel Grid.Row="2" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <CheckBox IsChecked="{Binding ValeurBool}" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"taille-dynamique",children:"Taille dynamique"}),"\n",(0,i.jsxs)(n.p,{children:["La valeur \xe9toile ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"*"})})," consiste \xe0 prendre toute l'espace disponible sur la hauteur ou la largeur. Si la valeur n'est pas sp\xe9cifi\xe9e, la valeur par d\xe9faut est ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"*"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="*" />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width="*" />\r\n            <ColumnDefinition Width="*"/>\r\n        </Grid.ColumnDefinitions>\r\n\r\n        \x3c!-- Rang\xe9e 0 Colonne 0 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0,0)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 0 Colonne 1 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0,1)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 0 --\x3e\r\n\r\n        <StackPanel Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1,0)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 1 --\x3e\r\n        <StackPanel Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1,1)" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de d\xe9finir des proportions relatives dans la taille."}),"\n",(0,i.jsx)(n.p,{children:"L'exemple ci-dessous c'est fixe, mais il y a une proportion,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:' <Grid.RowDefinitions>\r\n    <RowDefinition Height="100" /> \x3c!-- 1/7 --\x3e\r\n    <RowDefinition Height="500" /> \x3c!-- 5/7 --\x3e\r\n    <RowDefinition Height="200" /> \x3c!-- 2/7 --\x3e\r\n</Grid.RowDefinitions>\r\n<Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width="200" /> \x3c!-- 2/8 ou 1/4 --\x3e\r\n    <ColumnDefinition Width="600" /> \x3c!-- 6/8 ou 3/4--\x3e\r\n</Grid.ColumnDefinitions>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Il est possible d'utiliser l'\xe9toile ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"*"})})," avec un nombre pour repr\xe9senter une proportion. La fen\xeatre sera alors ",(0,i.jsx)(n.strong,{children:"responsive"})," et la proportion sera respect\xe9e."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="1*" />\r\n            <RowDefinition Height="5*" />\r\n            <RowDefinition Height="2*" />\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width="1*" />\r\n            <ColumnDefinition Width="4*"/>\r\n        </Grid.ColumnDefinitions>\r\n\r\n        \x3c!-- Rang\xe9e 0 Colonne 0 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0,0)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 0 Colonne 1 --\x3e\r\n        <StackPanel Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0,1)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 0 --\x3e\r\n\r\n        <StackPanel Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1,0)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Colonne 1 --\x3e\r\n        <StackPanel Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1,1)" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"taille-fixe-et-dynamique",children:"Taille fixe et dynamique"}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de faire une combinaison des 2. Il peut avoir une section fixe pour repr\xe9senter une barre d'outils, mais le reste de la page doit prendre l'espace disponible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="50" />\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="100" />\r\n        </Grid.RowDefinitions>        \r\n\r\n        \x3c!-- Rang\xe9e 0 Fixe \xe0 50 pixels --\x3e\r\n        <StackPanel Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (0)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Dynamique --\x3e\r\n        <StackPanel Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 2 Fixe \xe0 100 pixels --\x3e\r\n\r\n        <StackPanel Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (2)" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"taille-automatique",children:"Taille automatique"}),"\n",(0,i.jsxs)(n.p,{children:["Il est possible d'avoir une taille automatique. C'est pratique pour avoir une hauteur d'une rang\xe9e qui s'adapte \xe0 la taille de la fen\xeatre. Elle devient donc ",(0,i.jsx)(n.strong,{children:"responsive"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La valeur ",(0,i.jsx)(n.strong,{children:"auto"})," permet de g\xe9rer ce comportement."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans la vue ci-dessous, la premi\xe8re rang\xe9e est automatique. Elle contient une liste de bouton \xe0 l'int\xe9rieur d'un ",(0,i.jsx)(n.strong,{children:"<WrapPanel>"}),". Ce composant d\xe9place son contenu en fonction de l'espace disponible. Lorsqu'il a l'int\xe9rieur d'une rang\xe9e automatique, il est en mesure de prendre plus de hauteur si la largeur est insuffisante. Les boutons vont se d\xe9placer sur plusieurs lignes."]}),"\n",(0,i.jsx)(n.p,{children:"La 2e rang\xe9e est dynamique. Elle va prendre l'espace disponible et la 3e rang\xe9e est fixe \xe0 10 pixels."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid ShowGridLines="true">\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto" />\r\n            <RowDefinition Height="*" />\r\n            <RowDefinition Height="50" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!-- Rang\xe9e 0 automatique --\x3e\r\n        <WrapPanel Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <Button Content="0" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="1" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="2" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="3" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="4" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="5" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="6" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="7" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="8" Width="30" Height="30" Margin="5"/>\r\n            <Button Content="9" Width="30" Height="30" Margin="5"/>            \r\n        </WrapPanel>\r\n\r\n        \x3c!-- Rang\xe9e 1 Dynamique --\x3e\r\n        <StackPanel Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (1)" />\r\n        </StackPanel>\r\n\r\n        \x3c!-- Rang\xe9e 2 Fixe \xe0 50 pixels --\x3e\r\n\r\n        <StackPanel Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Center">\r\n            <TextBlock Text="Hello World (2)" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"commande",children:"Commande"}),"\n",(0,i.jsx)(n.p,{children:"Une commande est une action faite par l'utilisateur. G\xe9n\xe9ralement, un bouton est li\xe9 \xe0 une commande."}),"\n",(0,i.jsx)(n.p,{children:"Lors de la cr\xe9ation de la commande, il faut indiquer la m\xe9thode qui effectuera le travail."}),"\n",(0,i.jsxs)(n.p,{children:["La librairie ",(0,i.jsx)(n.strong,{children:"MVVM ToolKit"})," fournit l'objet ",(0,i.jsx)(n.strong,{children:"RelayCommand"})," qui permet de cr\xe9er des commandes dynamiquement."]}),"\n",(0,i.jsxs)(n.p,{children:["L'assignation ",(0,i.jsx)(n.strong,{children:"set"})," est priv\xe9, car c'est pr\xe9f\xe9rable que ce soit le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," qui s'occupe de la cr\xe9ation de la commande et non une classe externe. Le ",(0,i.jsx)(n.strong,{children:"get"})," doit \xeatre public pour qu'il soit visible par la ",(0,i.jsx)(n.strong,{children:"Vue"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Dans l'exemple ci-dessous, il faut cr\xe9er un bouton pour mettre \xe0 jour l'heure."}),"\n",(0,i.jsx)(n.p,{children:"Il est recommand\xe9 d'utiliser un verbe d'action pour nommer la commande, mais ce n'est pas toujours possible."}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"HelloWorldVM.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    public class HelloWorldVM : BaseVM\r\n    {\r\n        public HelloWorldVM()\r\n        {\r\n            DateHeure = DateTime.Now;           \r\n\r\n            RafraichirDateHeureCommande = new RelayCommand(RafraichirDateHeure);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Rafraichir la date et l'heure\r\n        /// </summary>\r\n        private void RafraichirDateHeure()\r\n        {\r\n            DateHeure = DateTime.Now;\r\n        }\r\n\r\n        public IRelayCommand RafraichirDateHeureCommande { get; private set; }\r\n\r\n        public DateTime DateHeure { get; set; }       \r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 22, il y a la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"RafraichirDateHeureCommande"})," qui sera li\xe9e \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Command"})," du bouton."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 11, la commande est cr\xe9\xe9e avec un ",(0,i.jsx)(n.strong,{children:"RelayCommand"}),". La m\xe9thode associ\xe9e \xe0 cette commande est ",(0,i.jsx)(n.strong,{children:"RafraichirDateHeure()"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez le fichier ",(0,i.jsx)(n.strong,{children:"UcHelloWorld.xaml"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">            \r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n            <Button Content="Rafraichir" Command="{Binding RafraichirDateHeureCommande}"/>\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Le bouton est associ\xe9 \xe0 la commande du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," par la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Command"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<Button Content="Rafraichir" Command="{Binding RafraichirDateHeureCommande}"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez le programme. Est-ce que c'est fonctionnel ?"}),"\n",(0,i.jsxs)(n.p,{children:["La raison que \xe7a ne fonctionne pas est qu'il faut notifier la ",(0,i.jsx)(n.strong,{children:"Vue"})," que la propri\xe9t\xe9 a \xe9t\xe9 modifi\xe9e."]}),"\n",(0,i.jsxs)(n.p,{children:["En ",(0,i.jsx)(n.strong,{children:"MVVM"}),", il n'est pas possible d'utiliser une propri\xe9t\xe9 auto-impl\xe9ment\xe9e si elle est li\xe9e \xe0 la vue, car il faut de notifier le changement de valeur. Il faut donc de la logique dans le ",(0,i.jsx)(n.strong,{children:"set"}),". Lorsqu'il y a de la logique, il faut utiliser un attribut pour contenir la valeur de la propri\xe9t\xe9."]}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"HelloWorldVM.cs"})," par le code ci-dessous."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    public class HelloWorldVM : BaseVM\r\n    {\r\n        private DateTime _dateTime;\r\n\r\n        public HelloWorldVM()\r\n        {\r\n            DateHeure = DateTime.Now;\r\n\r\n            RafraichirDateHeureCommande = new RelayCommand(RafraichirDateHeure);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Rafraichir la date et l'heure\r\n        /// </summary>\r\n        private void RafraichirDateHeure()\r\n        {\r\n            DateHeure = DateTime.Now;\r\n        }\r\n\r\n        public IRelayCommand RafraichirDateHeureCommande { get; private set; }\r\n\r\n        public DateTime DateHeure \r\n        {\r\n            get\r\n            {\r\n                return _dateTime;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _dateTime, value);\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"DateHeure"})," utilise maintenant un attribut pour conserver la valeur. Lors de l'assignation ",(0,i.jsx)(n.strong,{children:"set"}),", la m\xe9thode ",(0,i.jsx)(n.strong,{children:"SetProperty"})," est utilis\xe9e. Cette m\xe9thode v\xe9rifie s'il y a un changement dans la valeur et si c'est le cas, l'\xe9v\xe9nement  ",(0,i.jsx)(n.strong,{children:"PropertyChanged"})," est soulev\xe9."]}),"\n",(0,i.jsxs)(n.p,{children:["L'\xe9v\xe9nement provint de l'interface ",(0,i.jsx)(n.strong,{children:"INotifyPropertyChanged"})," qui est incluse dans ",(0,i.jsx)(n.strong,{children:".NET"}),". Par contre, la m\xe9thode ",(0,i.jsx)(n.strong,{children:"SetProperty"})," provient de la librairie ",(0,i.jsx)(n.strong,{children:"MVVM Toolkit"}),". Elle est disponible par h\xe9ritage de la classe ",(0,i.jsx)(n.strong,{children:"BaseVM"})," qui h\xe9rite de ",(0,i.jsx)(n.strong,{children:"ObservableObject"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Il est important de ne jamais utiliser l'attribut pour l'assignation d'une valeur, car la m\xe9canique de notification ne fonctionnera pas."}),"\n",(0,i.jsx)(n.h3,{id:"asynchrone",children:"Asynchrone"}),"\n",(0,i.jsxs)(n.p,{children:["Il est important que les commandes soient ex\xe9cut\xe9es en ",(0,i.jsx)(n.strong,{children:"asynchrone"}),", car l'interface visuelle sera bloqu\xe9e. Pour les op\xe9rations qui sont longues, l'interface visuelle ne r\xe9pondra plus. Il faut un indicateur de progression et que la fen\xeatre ne soit pas bloqu\xe9e."]}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"HelloWorldVM.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    public class HelloWorldVM : BaseVM\r\n    {\r\n        private DateTime _dateTime;\r\n\r\n        public HelloWorldVM()\r\n        {\r\n            RafraichirDateHeureCommande = new RelayCommand(RafraichirDateHeure);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Rafraichir la date et l'heure\r\n        /// </summary>\r\n        private void RafraichirDateHeure()\r\n        {\r\n            Task.Delay(5000).Wait();\r\n            DateHeure = DateTime.Now;\r\n        }\r\n\r\n        public IRelayCommand RafraichirDateHeureCommande { get; private set; }\r\n\r\n        public DateTime DateHeure \r\n        {\r\n            get\r\n            {\r\n                return _dateTime;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _dateTime, value);\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"\xc0 la ligne 21, il y a un d\xe9lai artificiel de 5 secondes pour simuler une commande qui a une longue dur\xe9e d'ex\xe9cution."}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez l'application et appuyez sur le bouton. Il ne sera pas possible de bouger la fen\xeatre."}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez de nouveau la classe ",(0,i.jsx)(n.strong,{children:"HelloWorldVM.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    public class HelloWorldVM : BaseVM\r\n    {\r\n        private DateTime _dateTime;\r\n\r\n        public HelloWorldVM()\r\n        {\r\n            RafraichirDateHeureCommande = new AsyncRelayCommand(RafraichirDateHeureAsync);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Rafraichir la date et l'heure\r\n        /// </summary>\r\n        private async Task RafraichirDateHeureAsync()\r\n        {\r\n            await Task.Delay(5000);\r\n            DateHeure = DateTime.Now;\r\n        }\r\n\r\n        public IAsyncRelayCommand RafraichirDateHeureCommande { get; set; }\r\n\r\n        public DateTime DateHeure \r\n        {\r\n            get\r\n            {\r\n                return _dateTime;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _dateTime, value);\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:"RafraichirDateHeureAsync()"})," (ligne 19) se termine avec le suffixe ",(0,i.jsx)(n.strong,{children:"Async"}),". Ce n'est pas obligatoire, mais par convention ",(0,i.jsx)(n.strong,{children:"C#"}),", une m\xe9thode asynchrone devrait avoir le suffixe ",(0,i.jsx)(n.strong,{children:"Async"}),". Son type de retour est ",(0,i.jsx)(n.strong,{children:"async Task"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La commande ",(0,i.jsx)(n.strong,{children:"RafraichirDateHeureCommande"})," (ligne 25) est maintenant du type ",(0,i.jsx)(n.strong,{children:"IAsyncRelayCommand"})," pour qu'elle soit asynchrone."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans le constructeur, la commande est de type ",(0,i.jsx)(n.strong,{children:"AsyncRelayCommand"})," (ligne13)."]}),"\n",(0,i.jsx)(n.p,{children:"Ex\xe9cutez de nouveau le programme. Il sera possible de bouger la fen\xeatre pendant l'ex\xe9cution et le bouton ne sera plus accessible \xe9galement."}),"\n",(0,i.jsx)(n.p,{children:"Il pourrait \xeatre int\xe9ressant de mettre un indicateur de travail."}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"HelloWorldVM.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    public class HelloWorldVM : BaseVM\r\n    {\r\n        private DateTime _dateTime;\r\n        private bool _estEnTravail;\r\n\r\n        public HelloWorldVM()\r\n        {\r\n            RafraichirDateHeureCommande = new AsyncRelayCommand(RafraichirDateHeureAsync);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Rafraichir la date et l'heure\r\n        /// </summary>\r\n        private async Task RafraichirDateHeureAsync()\r\n        {\r\n            EstEnTravail = true;\r\n            await Task.Delay(5000);\r\n            DateHeure = DateTime.Now;\r\n            EstEnTravail = false;\r\n        }\r\n\r\n        public IAsyncRelayCommand RafraichirDateHeureCommande { get; set; }\r\n\r\n        public DateTime DateHeure \r\n        {\r\n            get\r\n            {\r\n                return _dateTime;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _dateTime, value);\r\n            }\r\n        }\r\n\r\n        public bool EstEnTravail \r\n        {\r\n            get\r\n            {\r\n                return _estEnTravail;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _estEnTravail, value);\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," a maintenant une propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"EstEnTravail"})," pour indiquer s'il y a une t\xe2che en cours d'ex\xe9cution."]}),"\n",(0,i.jsx)(n.p,{children:"Au d\xe9but de la m\xe9thode, elle indique qu'elle est en travail et \xe0 la fin que c'est termin\xe9."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"private async Task RafraichirDateHeureAsync()\r\n{\r\n    EstEnTravail = true;\r\n    await Task.Delay(5000);\r\n    DateHeure = DateTime.Now;\r\n    EstEnTravail = false;\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez le fichier ",(0,i.jsx)(n.strong,{children:"UcHelloWorld.xaml"})," ."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">            \r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n            <Button Content="Rafraichir" Command="{Binding RafraichirDateHeureCommande}"/>\r\n            <ProgressBar Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 16, il y a une barre de progression. Sa propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"IsIndeterminate"})," est li\xe9e \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"EstEnTravail"})," du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"IsIndeterminate"})," permet de faire une barre de progression pour signaler une activit\xe9 et non par une progression de pourcentage."]}),"\n",(0,i.jsx)(n.h3,{id:"asynchrone-et-constructeur",children:"Asynchrone et constructeur"}),"\n",(0,i.jsxs)(n.p,{children:["La ",(0,i.jsx)(n.strong,{children:"Vue"})," doit g\xe9n\xe9rer une date et une heure automatiquement lors de son initialisation."]}),"\n",(0,i.jsxs)(n.p,{children:["Le principe sugg\xe9r\xe9 est d'inclure la m\xe9thode dans le constructeur. Par contre, il n'est pas possible d'appeler une m\xe9thode asynchrone et rester asynchrone \xe0 partir du constructeur. Il serait possible de faire une version ",(0,i.jsx)(n.strong,{children:"synchrone"})," de la m\xe9thode, mais le contr\xf4le ne s'affichera pas tant que le constructeur n'a pas termin\xe9."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public HelloWorldVM()\r\n{\r\n    RafraichirDateHeureAsync();\r\n\r\n    RafraichirDateHeureCommande = new AsyncRelayCommand(RafraichirDateHeureAsync);\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode sera ex\xe9cut\xe9e, mais il n'est pas possible d'avoir un ",(0,i.jsx)(n.strong,{children:"await"}),", car le constructeur ne peut pas \xeatre ",(0,i.jsx)(n.strong,{children:"async"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc9galement, lors de la construction du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),", il est pr\xe9f\xe9rable qu'il soit enti\xe8rement construit avec la ",(0,i.jsx)(n.strong,{children:"Vue"})," pour \xe9viter des conflits. Il est pr\xe9f\xe9rable que la ",(0,i.jsx)(n.strong,{children:"Vue"})," soit pr\xeate avant d'ex\xe9cuter des t\xe2ches en ",(0,i.jsx)(n.strong,{children:"asynchrone"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc9galement, le choix d'afficher une date automatiquement lors de l'ouverture peut \xeatre un choix de design de la ",(0,i.jsx)(n.strong,{children:"Vue"})," et non faire partie de la logique du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans le ",(0,i.jsx)(n.strong,{children:"UserControl"}),", il y a un \xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"Loaded"})," qui est appel\xe9 lorsque la ",(0,i.jsx)(n.strong,{children:"Vue"})," est compl\xe8tement charg\xe9e."]}),"\n",(0,i.jsx)(n.p,{children:"Cet \xe9v\xe9nement va appeler la commande qu'il faut ex\xe9cuter."}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcHelloWorld.xaml"}),", il faut ajouter la ligne 12 pour assigner l'\xe9v\xe9nement."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcHelloWorld"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n             mc:Ignorable="d"\r\n             d:DataContext="{d:DesignInstance Type=vm:HelloWorldVM}" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">            \r\n            <TextBlock Text="{Binding DateHeure , StringFormat=\\{0:d MMMM yyyy HH:mm:ss\\}}"/>\r\n            <Button Content="Rafraichir" Command="{Binding RafraichirDateHeureCommande}"/>\r\n            <ProgressBar Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n        </StackPanel>\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcHelloWorld.xaml.cs"}),", il faut ajouter le code de l'\xe9v\xe9nement. Si l'\xe9v\xe9nement est autog\xe9n\xe9r\xe9, il faut ajouter le ",(0,i.jsx)(n.strong,{children:"async"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Il y a les v\xe9rifications d'usage pour s'assurer que le type du contexte est le bon."}),"\n",(0,i.jsx)(n.p,{children:"Ensuite, il faut appeler la commande qu'il faut automatiser."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"private async void UserControl_Loaded(object sender, RoutedEventArgs e)\r\n{\r\n    if(DataContext != null)\r\n    {\r\n        if(DataContext is HelloWorldVM)\r\n        {\r\n            await ((HelloWorldVM)DataContext).RafraichirDateHeureCommande.ExecuteAsync(null);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"champ-texte-num\xe9rique",children:"Champ texte num\xe9rique"}),"\n",(0,i.jsxs)(n.p,{children:["Il n'existe pas de contr\xf4le qui accepte seulement les nombres avec ",(0,i.jsx)(n.strong,{children:"WPF"}),". Les d\xe9veloppeurs peuvent acheter des librairies de composants comme ",(0,i.jsx)(n.strong,{children:"DevExpress"})," et ",(0,i.jsx)(n.strong,{children:"Telerik"})," pour avoir des composants avanc\xe9s. Il est possible de faire une version simple soi-m\xeame, mais elle est limit\xe9e."]}),"\n",(0,i.jsxs)(n.p,{children:["Ajoutez la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"int Nombre"})," dans le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Liez la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Nombre"})," \xe0 un ",(0,i.jsx)(n.strong,{children:"<Textbox>"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<TextBox Text="{Binding Nombre}" />\n'})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez le programme. Si vous essayez d'inscrire une lettre, elle s'affichera, mais le contr\xf4le sera en rouge pour indiquer que la valeur n'est pas compatible avec le type de la propri\xe9t\xe9 de liaison."}),"\n",(0,i.jsxs)(n.p,{children:["Pour permettre seulement les chiffres, il faut modifier des \xe9v\xe9nements sur le  ",(0,i.jsx)(n.strong,{children:"<Textbox>"})," pour \xeatre en mesure de le faire. L'exemple provient d'une suggestion de ",(0,i.jsx)(n.strong,{children:"StackOverflow"}),". ",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/questions/1268552/how-do-i-get-a-textbox-to-only-accept-numeric-input-in-wpf",children:"https://stackoverflow.com/questions/1268552/how-do-i-get-a-textbox-to-only-accept-numeric-input-in-wpf"})]}),"\n",(0,i.jsxs)(n.p,{children:["L'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"PreviewTextInput"})," permet d'analyser la valeur des caract\xe8res qui sont inscrits dans le composant. G\xe9n\xe9ralement, c'est un seul caract\xe8re, mais il est possible d'en recevoir plusieurs d'un coup."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut \xe9galement intercepter l'action ",(0,i.jsx)(n.strong,{children:"coller"}),". L'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"DataObject.Pasting"})," permet d'intercepter l'action ",(0,i.jsx)(n.strong,{children:"coller"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans le ",(0,i.jsx)(n.strong,{children:"xaml"}),", il faut cr\xe9er les 2 \xe9v\xe9nements."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<TextBox Text="{Binding Nombre}" PreviewTextInput="TextBox_PreviewTextInput" DataObject.Pasting="TextBox_Pasting"  />\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le ",(0,i.jsx)(n.strong,{children:"xaml.cs"}),", il faut faire l'impl\xe9mentation de l'\xe9v\xe9nement. L'impl\xe9mentation ne se fait pas dans le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),", car c'est un comportement directement li\xe9 \xe0 la vue. Le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," veut recevoir un nombre, il ne s'int\xe9resse pas comment la vue s'en occupe."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour l'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"PreviewTextInput"}),", il est possible d'utiliser une r\xe8gle ",(0,i.jsx)(n.strong,{children:"Regex"})," pour d\xe9terminer si la chaine contient uniquement des chiffres."]}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"e.Handled == false"}),"  indique que l'\xe9v\xe9nement peut continuer son ex\xe9cution. Si ",(0,i.jsx)(n.strong,{children:"e.Handled == true"}),", l'\xe9v\xe9nement est annul\xe9."]}),"\n",(0,i.jsx)(n.p,{children:"Donc si la chaine n'a pas de chiffre, elle fait annuler l'\xe9v\xe9nement."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'private void TextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)\r\n{\r\n    e.Handled = !Regex.IsMatch(e.Text, "^[0-9]");\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Pour l'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"DataObject.Pasting"}),", il y a un peu plus d'\xe9tapes."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut valider si le contenu du ",(0,i.jsx)(n.strong,{children:"coller"})," est du texte. Si c'est le cas, il faut valider \xe0 l'aide d'une r\xe8gle ",(0,i.jsx)(n.strong,{children:"Regex"})," si ce sont que des chiffres. Si ce n'est pas le cas, il faut annuler le ",(0,i.jsx)(n.strong,{children:"coller"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'private void TextBox_Pasting(object sender, DataObjectPastingEventArgs e)\r\n{\r\n    if (e.DataObject.GetDataPresent(typeof(String)))\r\n    {\r\n        String text = (String)e.DataObject.GetData(typeof(String));\r\n        if (!Regex.IsMatch(text, "^[0-9]"))\r\n        {\r\n            e.CancelCommand();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        e.CancelCommand();\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Si la propri\xe9t\xe9 li\xe9e est de type ",(0,i.jsx)(n.strong,{children:"int?"}),", donc elle est ",(0,i.jsx)(n.strong,{children:"nullable"}),". Le ",(0,i.jsx)(n.strong,{children:"<textbox>"})," n'acceptera pas le champ vide comme valeur ",(0,i.jsx)(n.strong,{children:"null"}),". Il faut ajouter la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"TargetNullValue=''"})," dans le ",(0,i.jsx)(n.strong,{children:"Binding"}),". Donc la valeur ",(0,i.jsx)(n.strong,{children:"null"}),"  de la liaison \xe9quivaut \xe0 une chaine vide du ",(0,i.jsx)(n.strong,{children:"<Textbox>"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<TextBox Text="{Binding Nombre, TargetNullValue=\'\'}" PreviewTextInput="TextBox_PreviewTextInput" DataObject.Pasting="TextBox_Pasting"  />\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Si le nombre est un ",(0,i.jsx)(n.strong,{children:"decimal"}),", il faut utiliser la ",(0,i.jsx)(n.strong,{children:"Regex"})," ci-dessous. L'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"PreviewTextInput"})," valide uniquement le caract\xe8re inscrit et non l'enti\xe8ret\xe9 du nombre. Il est donc possible d'inscrire ",(0,i.jsx)(n.strong,{children:"12,,,,564,10"}),". Les composants payants n'ont pas ce genre de probl\xe8me."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'"^[0-9.]+" //Anglais, car le s\xe9parateur est un point\r\n"^[0-9,]+" //Fran\xe7ais, car le s\xe9parateur est une virgule\n'})}),"\n",(0,i.jsx)(n.p,{children:"Pour le rendre ind\xe9pendant de la culture, il faut d\xe9terminer quel est le s\xe9parateur de la culture en cours d'ex\xe9cution."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'string separateur = NumberFormatInfo.CurrentInfo.NumberDecimalSeparator;\r\nstring regex = $"^[0-9{separateur}]+");\n'})}),"\n",(0,i.jsx)(n.p,{children:"S'il faut avoir un nombre n\xe9gatif."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'string separateur = NumberFormatInfo.CurrentInfo.NumberDecimalSeparator;\r\nstring decregex = $"^[0-9{separateur}-]+"); //decimal n\xe9gatif\r\nstring intregex = "^[0-9-]"; //int n\xe9gatif\n'})}),"\n",(0,i.jsx)(n.h3,{id:"s\xe9lection-dune-date",children:"S\xe9lection d'une date"}),"\n",(0,i.jsxs)(n.p,{children:["Le composant ",(0,i.jsx)(n.strong,{children:"<DatePicker>"})," permet d'avoir un contr\xf4le de s\xe9lection d'une date."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<DatePicker SelectedDate="{Binding MaDate}" />\n'})}),"\n",(0,i.jsx)(n.h2,{id:"liste-des-cat\xe9gories",children:"Liste des cat\xe9gories"}),"\n",(0,i.jsxs)(n.p,{children:["La premi\xe8re interface utilisateur \xe0 effectuer sera de lister les enregistrements de la table ",(0,i.jsx)(n.strong,{children:"Cat\xe9gorie"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["L'approche des couches ",(0,i.jsx)(n.strong,{children:"bas vers le haut"})," sera utilis\xe9e pour r\xe9aliser cette fen\xeatre."]}),"\n",(0,i.jsxs)(n.p,{children:["La liste sera un ",(0,i.jsx)(n.strong,{children:"DataGrid"}),". Il faut afficher \xe0 l'utilisateur la cl\xe9, le nom et la description dans la grille."]}),"\n",(0,i.jsx)(n.h3,{id:"projet-supercarteef",children:"Projet SuperCarte.EF"}),"\n",(0,i.jsx)(n.h3,{id:"ajout-des-donn\xe9es-par-seed",children:"Ajout des donn\xe9es par Seed"}),"\n",(0,i.jsxs)(n.p,{children:["Les tables ",(0,i.jsx)(n.strong,{children:"Categorie"}),", ",(0,i.jsx)(n.strong,{children:"Ensemble"})," et ",(0,i.jsx)(n.strong,{children:"Cartes"})," ne contiennent pas de donn\xe9es. Il faut donc cr\xe9er une nouvelle migration qui contient ce nouveau ",(0,i.jsx)(n.strong,{children:"Seed"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans la m\xe9thode ",(0,i.jsx)(n.strong,{children:"Seed()"})," de la classe ",(0,i.jsx)(n.strong,{children:"SuperCarteContext"}),", il faut ajouter les donn\xe9es. Il est important de ne pas supprimer les donn\xe9es existantes, car la migration va voir qu'ils ne sont plus l\xe0, donc qu'il faut les supprimer."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour ajouter des donn\xe9es, il faut cr\xe9er un tableau qui contient les objets et l'ajouter \xe0 l'entit\xe9 avec la m\xe9thode ",(0,i.jsx)(n.strong,{children:"HasData"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Pour les cat\xe9gories."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'Categorie[] categories =\r\n{\r\n    new Categorie()\r\n    {\r\n        CategorieId = 1,\r\n        Nom = "Animaux magiques",\r\n        Description = null\r\n    },\r\n    new Categorie()\r\n    {\r\n        CategorieId = 2,\r\n        Nom = "Orcs",\r\n        Description = "Les orcs sont une race de guerrier."\r\n    },\r\n    new Categorie()\r\n    {\r\n        CategorieId = 3,\r\n        Nom = "Mages",\r\n        Description = "Les mages ont des pouvoirs magiques."\r\n    }\r\n};\r\n\r\nmodelBuilder.Entity<Categorie>().HasData(categories);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Pour l'ensemble."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'Ensemble[] ensembles =\r\n{\r\n    new Ensemble()\r\n    {\r\n        EnsembleId = 1,\r\n        Nom = "Ensemble de d\xe9part",\r\n        Disponibilite = new DateTime(2020,5,12)\r\n    }\r\n};\r\n\r\nmodelBuilder.Entity<Ensemble>().HasData(ensembles);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Pour les cartes. Il est voulu de ne pas avoir de cartes pour la cat\xe9gorie 3."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'Carte[] cartes =\r\n{\r\n    new Carte()\r\n    {\r\n        CarteId = 1,\r\n        Nom = "Lion des marais",\r\n        Armure = 0,\r\n        Vie = 12,\r\n        Attaque = 2,\r\n        EstRare = false,\r\n        PrixRevente = 0.02m,\r\n        CategorieId = 1,\r\n        EnsembleId = 1\r\n    },\r\n    new Carte()\r\n    {\r\n        CarteId = 2,\r\n        Nom = "Corbeau vampire",\r\n        Armure = 0,\r\n        Vie = 2,\r\n        Attaque = 12,\r\n        EstRare = true,\r\n        PrixRevente = 1.20m,\r\n        CategorieId = 1,\r\n        EnsembleId = 1\r\n    },\r\n    new Carte()\r\n    {\r\n        CarteId = 3,\r\n        Nom = "Grunty",\r\n        Armure = 5,\r\n        Vie = 25,\r\n        Attaque = 5,\r\n        EstRare = false,\r\n        PrixRevente = 0.20m,\r\n        CategorieId = 2,\r\n        EnsembleId = 1\r\n    }\r\n};\r\n        \r\nmodelBuilder.Entity<Carte>().HasData(cartes);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Voici la m\xe9thode au complet."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'private void Seed(ModelBuilder modelBuilder)\r\n{\r\n    //Les donn\xe9es \xe0 ajouter\r\n    Role[] roles = \r\n    {\r\n        new Role() \r\n        { \r\n            RoleId = 1,\r\n            Nom = "Administrateur"                \r\n        },\r\n        new Role()\r\n        {\r\n            RoleId = 2,\r\n            Nom = "Utilisateur"\r\n        },\r\n    };\r\n\r\n    Utilisateur[] utilisateurs =\r\n    {\r\n        new Utilisateur()\r\n        {\r\n            UtilisateurId = 1,\r\n            Prenom = "Fran\xe7ois",\r\n            Nom = "St-Hilaire",\r\n            NomUtilisateur = "fsthilaire",\r\n            MotPasseHash = "$2y$11$IY6NG9FkTSI1dnjLfSbuOuNkuyI7IZHxHSOD5Td6AlwvroUz/vzLK", //Native3! avec Bcrypt\r\n            RoleId = 1 //Admin\r\n        },\r\n        new Utilisateur()\r\n        {\r\n            UtilisateurId = 2,\r\n            Prenom = "Benoit",\r\n            Nom = "Tremblay",\r\n            NomUtilisateur = "btremblay",\r\n            MotPasseHash = "$2y$11$ewK3YsMGQ1IMKEzJUAjyVe0P19I0gEbTO998mwfVbSSA8nZ6MG/ha", //Web4MVC! avec Bcrypt\r\n            RoleId = 2 //Utilisateur\r\n        },\r\n        new Utilisateur() \r\n        {\r\n            UtilisateurId = 3,\r\n            Prenom = "Tony",\r\n            Nom = "Stark",\r\n            NomUtilisateur = "tstark",\r\n            MotPasseHash = "$2y$11$VfcNowkWResPQKl0AA3MJ.w1LXBqmMM77YKlyf32Glr9TWG4xxyD2", //#NotAdmin! avec Bcrypt\r\n            RoleId = 2 //Utilisateur\r\n        }\r\n    };\r\n\r\n    Categorie[] categories =\r\n    {\r\n        new Categorie()\r\n        {\r\n            CategorieId = 1,\r\n            Nom = "Animaux magiques",\r\n            Description = null\r\n        },\r\n        new Categorie()\r\n        {\r\n            CategorieId = 2,\r\n            Nom = "Orcs",\r\n            Description = "Les orcs sont une race de guerrier."\r\n        },\r\n        new Categorie()\r\n        {\r\n            CategorieId = 3,\r\n            Nom = "Mages",\r\n            Description = "Les mages ont des pouvoirs magiques."\r\n        }\r\n    };\r\n\r\n    Ensemble[] ensembles =\r\n    {\r\n        new Ensemble()\r\n        {\r\n            EnsembleId = 1,\r\n            Nom = "Ensemble de d\xe9part",\r\n            Disponibilite = new DateTime(2020,5,12)\r\n        }\r\n    };\r\n\r\n    Carte[] cartes =\r\n    {\r\n        new Carte()\r\n        {\r\n            CarteId = 1,\r\n            Nom = "Lion des marais",\r\n            Armure = 0,\r\n            Vie = 12,\r\n            Attaque = 2,\r\n            EstRare = false,\r\n            PrixRevente = 0.02m,\r\n            CategorieId = 1,\r\n            EnsembleId = 1\r\n        },\r\n        new Carte()\r\n        {\r\n            CarteId = 2,\r\n            Nom = "Corbeau vampire",\r\n            Armure = 0,\r\n            Vie = 2,\r\n            Attaque = 12,\r\n            EstRare = true,\r\n            PrixRevente = 1.20m,\r\n            CategorieId = 1,\r\n            EnsembleId = 1\r\n        },\r\n        new Carte()\r\n        {\r\n            CarteId = 3,\r\n            Nom = "Grunty",\r\n            Armure = 5,\r\n            Vie = 25,\r\n            Attaque = 5,\r\n            EstRare = false,\r\n            PrixRevente = 0.20m,\r\n            CategorieId = 2,\r\n            EnsembleId = 1\r\n        }\r\n    };\r\n\r\n    //Ajout dans les tables\r\n    modelBuilder.Entity<Role>().HasData(roles);\r\n    modelBuilder.Entity<Utilisateur>().HasData(utilisateurs);\r\n    modelBuilder.Entity<Categorie>().HasData(categories);\r\n    modelBuilder.Entity<Ensemble>().HasData(ensembles);\r\n    modelBuilder.Entity<Carte>().HasData(cartes);\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans la ",(0,i.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,i.jsx)(n.strong,{children:"Projet par d\xe9faut"})," de ",(0,i.jsx)(n.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,i.jsx)(n.strong,{children:"SuperCarte.EF"}),". \xc0 ce stade, il y a ",(0,i.jsx)(n.strong,{children:"plusieurs projets"})," et celui s\xe9lectionn\xe9 par d\xe9faut sera ",(0,i.jsx)(n.strong,{children:"WPF"}),". Il est important de le modifier dans la liste."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour ce projet, utilisez cette chaine de connexion. Le nom de la base de donn\xe9es est ",(0,i.jsx)(n.strong,{children:"eDA_4N1_SuperCarte"}),". Modifiez le ",(0,i.jsx)(n.strong,{children:"DA"})," par votre num\xe9ro d'admission."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Voici la commande avec le ",(0,i.jsx)(n.strong,{children:"Trusted_Connection=True;"})," , si vous avez l'erreur ",(0,i.jsx)(n.strong,{children:"SSL"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;Trust Server Certificate=True;"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ensuite, il faut cr\xe9er la migration ",(0,i.jsx)(n.strong,{children:"Seed_Carte"})," avec ",(0,i.jsx)(n.strong,{children:"Add-Migration"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Add-Migration Seed_Carte -StartupProject SuperCarte.EF\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,i.jsx)(n.strong,{children:"Seed_Carte"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration Seed_Carte\n"})}),"\n",(0,i.jsx)(n.h3,{id:"projet-supercartecode",children:"Projet SuperCarte.Code"}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-mod\xe8le-du-domaine---ensemblemodel",children:"Cr\xe9ation du mod\xe8le du domaine - EnsembleModel"}),"\n",(0,i.jsxs)(n.p,{children:["Dans le projet ",(0,i.jsx)(n.strong,{children:"SuperCarte.Core"}),", il faut cr\xe9er la classe ",(0,i.jsx)(n.strong,{children:"CategorieModel.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Models"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une cat\xe9gorie\r\n/// </summary>\r\npublic class CategorieModel\r\n{\r\n    public int CategorieId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string? Description { get; set; }\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"La classe contient les 3 propri\xe9t\xe9s n\xe9cessaires pour effectuer des actions dans le logiciel."}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-de-la-classe-dextension---categoriemapextensions",children:"Cr\xe9ation de la classe d'extension - CategorieMapExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Les extensions seront associ\xe9es au mod\xe8le de donn\xe9es. Que la conversion s'effectue de ",(0,i.jsx)(n.strong,{children:"Mod\xe8le de donn\xe9es -> Mod\xe8le du domaine"})," ou \xe0 l'inverse ",(0,i.jsx)(n.strong,{children:"Mod\xe8le du domaine -> Mod\xe8le de donn\xe9es"}),", elles seront dans la classe d'extension du ",(0,i.jsx)(n.strong,{children:"Mod\xe8le de donn\xe9es"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut faire la m\xe9thode qui r\xe9cup\xe8rera la liste de ",(0,i.jsx)(n.strong,{children:"Categorie"})," et la convertir en ",(0,i.jsx)(n.strong,{children:"CategorieModel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Il y a \xe9galement la version pour les ",(0,i.jsx)(n.strong,{children:"List<>"}),". ",(0,i.jsx)(n.strong,{children:"Linq"})," est utilis\xe9 pour transformer la liste au lieu d'utiliser une boucle."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"CategorieMapExtensions.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Extensions;\r\n\r\n/// <summary>\r\n/// Classe statique qui regroupe les m\xe9thodes d'extension pour la conversion (mapping) du mod\xe8le Categorie\r\n/// </summary>\r\npublic static class CategorieMapExtension\r\n{\r\n    /// <summary>\r\n    /// Convertir un objet Categorie vers un objet CategotieModel\r\n    /// </summary>\r\n    /// <param name=\"item\">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static CategorieModel VersCategorieModel(this Categorie item)\r\n    {\r\n        return new CategorieModel()\r\n        {\r\n            CategorieId = item.CategorieId,\r\n            Nom = item.Nom,\r\n            Description = item.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir une liste d'objet Categorie vers une liste d'objet CategorieModel\r\n    /// </summary>\r\n    /// <param name=\"lstItem\">Liste d'objet \xe0 convertir</param>\r\n    /// <returns>Liste d'objet converti</returns>\r\n    public static List<CategorieModel> VersCategorieModel(this List<Categorie> lstItem)\r\n    {\r\n        return lstItem.Select(i => i.VersCategorieModel()).ToList();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir un objet CategorieModel vers un objet Categorie\r\n    /// </summary>\r\n    /// <param name=\"item\">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static Categorie VersCategorie(this CategorieModel item) \r\n    {\r\n        return new Categorie()\r\n        {\r\n            CategorieId = item.CategorieId,\r\n            Nom = item.Nom,\r\n            Description = item.Description\r\n        };\r\n    }\r\n\r\n    /// <summary>\r\n    /// Convertir une liste d'objet CategorieModel vers une liste d'objet Categorie\r\n    /// </summary>\r\n    /// <param name=\"lstItem\">Liste d'objet \xe0 convertir</param>\r\n    /// <returns>Liste d'objet converti</returns>\r\n    public static List<Categorie> VersCategorieModel(this List<CategorieModel> lstItem)\r\n    {\r\n        return lstItem.Select(i => i.VersCategorie()).ToList();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-service---categorieservice",children:"Cr\xe9ation du service - CategorieService"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut cr\xe9er la classe qui s'occupera de la logique du mod\xe8le ",(0,i.jsx)(n.strong,{children:"Cat\xe9gorie"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"ICategorieService.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic interface ICategorieService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste de cat\xe9gories</returns>\r\n    Task<List<CategorieModel>> ObtenirListeAsync();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Remarquez que la m\xe9thode a le suffixe ",(0,i.jsx)(n.strong,{children:"Async"})," et le type de retour un ",(0,i.jsx)(n.strong,{children:"Task<CategorieModel>"}),", car elle sera impl\xe9ment\xe9e en asynchrone."]}),"\n",(0,i.jsxs)(n.p,{children:["Est-ce n\xe9cessaire de faire \xe9galement la version ",(0,i.jsx)(n.strong,{children:"synchrone"})," ? C'est un choix de conception. Il y en a qui pr\xe9f\xe8re de couvrir les 2 cas en m\xeame temps et d'autres de seulement cr\xe9er la version qui sera n\xe9cessaire. Pour ce travail et le ",(0,i.jsx)(n.strong,{children:"TP 3"}),", il faudra cr\xe9er uniquement celles qui sont n\xe9cessaires. Lorsqu'une m\xe9thode est cr\xe9\xe9e, elle doit g\xe9n\xe9ralement \xeatre test\xe9e. Si elle n'est pas utilis\xe9e dans le programme, il faudra tout de m\xeame la tester. Il y a un co\xfbt pour  la r\xe9alisation des tests, donc si une m\xe9thode n'est pas n\xe9cessaire, il est pr\xe9f\xe9rable de ne pas l'\xe9crire. C'est l'approche ",(0,i.jsx)(n.strong,{children:"YAGNI (You ain't gonna need it)"})," ou en fran\xe7ais ",(0,i.jsx)(n.strong,{children:"(Vous n'en aurez pas besoin"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"BaseRepo"}),", les 2 versions ont \xe9t\xe9 pr\xe9vues, car c'est une classe de base, tous les cas seront utilis\xe9s rapidement lors de la r\xe9alisation de l'application."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"CategorieService.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic class CategorieService : ICategorieService\r\n{\r\n    private readonly ICategorieRepo _categorieRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieRepo">Repository Categorie</param>\r\n    public CategorieService(ICategorieRepo categorieRepo)\r\n    {\r\n        _categorieRepo = categorieRepo;\r\n    }\r\n    \r\n    public async Task<List<CategorieModel>> ObtenirListeAsync()\r\n    {\r\n        return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Remarquez la m\xe9thode ",(0,i.jsx)(n.strong,{children:"ObtenirListeAsync()"}),". Elle a le mot-cl\xe9 ",(0,i.jsx)(n.strong,{children:"async"})," pour indiquer qu'elle fonctionne en asynchrone."]}),"\n",(0,i.jsxs)(n.h5,{id:"th\xe9orie-sur-le-async-task",children:["Th\xe9orie sur le ",(0,i.jsx)(n.code,{children:"async Task"})]}),"\n",(0,i.jsxs)(n.p,{children:["Pour comprendre un peu le fonctionnement de la combinaison ",(0,i.jsx)(n.strong,{children:"async Task"})," , voici des exemples de code. ",(0,i.jsx)(n.strong,{children:"Veuillez ne pas les reproduire."})]}),"\n",(0,i.jsxs)(n.p,{children:["Pour \xeatre en mesure d'utiliser une m\xe9thode ",(0,i.jsx)(n.strong,{children:"asynchrone"}),", il faut que la chaine soit compl\xe8tement en ",(0,i.jsx)(n.strong,{children:"asynchrone"}),". Il est important qu'une m\xe9thode qui est ",(0,i.jsx)(n.strong,{children:"async"})," appelle des m\xe9thodes ",(0,i.jsx)(n.strong,{children:"async"}),", sinon le lien sera bris\xe9 et il aura un avertissement du compilateur."]}),"\n",(0,i.jsxs)(n.p,{children:["Lorsqu'on appelle une m\xe9thode ",(0,i.jsx)(n.strong,{children:"async"}),", elle doit retourner une ",(0,i.jsx)(n.strong,{children:"t\xe2che"})," de type ",(0,i.jsx)(n.strong,{children:"Task"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"En r\xe9alit\xe9, la m\xe9thode cr\xe9e une t\xe2che dans un nouveau processus. La t\xe2che ex\xe9cute la m\xe9thode sous-jacente pour faire le travail."}),"\n",(0,i.jsxs)(n.p,{children:["Dans l'exemple ci-dessous, la t\xe2che s'ex\xe9cute dans un nouveau processus et le processus courant continue \xe0 effectuer les op\xe9rations 1, 2.... Les 2 processus s'ex\xe9cutent en parall\xe8le. Lorsqu'il arrive au ",(0,i.jsx)(n.strong,{children:"return"}),", \xe7a ne veut pas dire que la sous-t\xe2che est termin\xe9e. ",(0,i.jsx)(n.strong,{children:"Il va donc avoir une exception."})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Task<List<Categorie>> task = _categorieRepo.ObtenirListeAsync();\r\n\r\n//Operation 1\r\n\r\n//Operation 2\r\n\r\n//Operation 3\r\n\r\nreturn task.Result.VersCategorieModel();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Il faut \xeatre en mesure de r\xe9cup\xe9rer la valeur de la sous-m\xe9thode. Pour pouvoir le faire, il faut attendre le processus avant de r\xe9cup\xe9rer sa valeur."}),"\n",(0,i.jsx)(n.p,{children:"II est possible de travailler en parall\xe8le. La sous-t\xe2che s'ex\xe9cute et les autres op\xe9rations se poursuivent."}),"\n",(0,i.jsx)(n.p,{children:"\xc0 un certain moment dans le processus parent, il faut attendre la sous-t\xe2che pour s'assurer qu'elle soit termin\xe9e."}),"\n",(0,i.jsx)(n.p,{children:"Dans l'exemple ci-dessous, l'op\xe9ration 1 et 2 s'ex\xe9cute en parall\xe8le et avant d'ex\xe9cuter l'op\xe9ration 3, il faut que la sous-t\xe2che soit termin\xe9e."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Task<List<Categorie>> task = _categorieRepo.ObtenirListeAsync();\r\n\r\n//Operation 1\r\n\r\n//Operation 2\r\n\r\ntask.Wait(); //On attend que la sous-t\xe2che soit termin\xe9e.\r\n\r\n//Operation 3\r\n\r\nreturn task.Result.VersCategorieModel();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Par contre, il faut s'assurer que les autres op\xe9rations n'entrent pas en conflit et sont ",(0,i.jsx)(n.strong,{children:"Thread Safe"}),". Une instance de contexte n'est pas ",(0,i.jsx)(n.strong,{children:"Thread Safe"}),". Un seul processus peut utiliser une instance de contexte \xe0 la fois."]}),"\n",(0,i.jsxs)(n.p,{children:["Le code ci-dessous va g\xe9n\xe9rer une exception. C'est l'instance du contexte qui n'est pas ",(0,i.jsx)(n.strong,{children:"Thread Safe"})," et non la base de donn\xe9es. Si 2 utilisateurs utilisent le programme, ils seront dans leur propre processus et ils auront leur propre instance de contexte."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Task<List<Categorie>> task1 = _categorieRepo.ObtenirListeAsync();\r\n\r\nTask<List<Categorie>> task2 = _categorieRepo.ObtenirListeAsync();\r\n//Operation 1\r\n\r\n//Operation 2\r\n\r\ntask1.Wait();\r\ntask2.Wait();\r\n\r\n//Operation 3\r\n\r\nreturn task1.Result.VersCategorieModel();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Pour revenir avec le mot-cl\xe9 ",(0,i.jsx)(n.strong,{children:"await"}),". Les 2 exemples sont \xe9quivalents. Le ",(0,i.jsx)(n.strong,{children:"await"})," permet de le faire en une seule ligne."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"Task<List<Categorie>> task = _categorieRepo.ObtenirListeAsync();\r\n        \r\ntask.Wait();       \r\n\r\nreturn task.Result.VersCategorieModel();\r\n\r\n//\xc9quivalent\r\nreturn (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Remarquez \xe9galement que le ",(0,i.jsx)(n.strong,{children:"await"})," est entre parenth\xe8ses avant d'utiliser l'extension."]}),"\n",(0,i.jsxs)(n.p,{children:["Il n'est pas possible de faire ceci, car ",(0,i.jsx)(n.strong,{children:"_categorieRepo.ObtenirListeAsync()"})," retourne un objet ",(0,i.jsx)(n.strong,{children:"Task<List<Categorie><"})," et non un objet ",(0,i.jsx)(n.strong,{children:"List<Categorie>"}),". La m\xe9thode d'extension est disponible sur le type ",(0,i.jsx)(n.strong,{children:"List<Categorie>"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"return await _categorieRepo.ObtenirListeAsync().VersCategorieModel();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["C'est le ",(0,i.jsx)(n.strong,{children:"await _categorieRepo.ObtenirListeAsync()"})," qui retourne un objet ",(0,i.jsx)(n.strong,{children:"List<Categorie>"}),". S'il faut utiliser une m\xe9thode sur ",(0,i.jsx)(n.strong,{children:"List<Categorie>"}),", il faut regrouper ",(0,i.jsx)(n.strong,{children:"await"})," et la t\xe2che avec des parenth\xe8ses."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Pour le rendre plus visuel, il serait possible de faire ceci."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"List<Categorie> lstCategorie = await _categorieRepo.ObtenirListeAsync(); //\xc9quivalent \xe0 (await _categorieRepo.ObtenirListeAsync())\r\n\r\nreturn lstCategorie.VersCategorieModel(); //\xc9quivalent \xe0 (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"projet-supercartewpf",children:"Projet SuperCarte.WPF"}),"\n",(0,i.jsx)(n.h4,{id:"enregistrement-du-service---scserviceextensions",children:"Enregistrement du service - SCServiceExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut enregistrer le ",(0,i.jsx)(n.strong,{children:"Service"})," dans la classe ",(0,i.jsx)(n.strong,{children:"SCServiceExtensions"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerServices(this IServiceCollection services)\r\n{\r\n    services.AddScoped<ICategorieService, CategorieService>();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Le service est \xe9galement enregistr\xe9 en ",(0,i.jsx)(n.strong,{children:"Scoped"})," pour permettre d'utiliser la m\xeame instance dans le programme dans le m\xeame ",(0,i.jsx)(n.strong,{children:"scope"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"ajout-de-r\xe9f\xe9rences-dans-usingscs",children:"Ajout de r\xe9f\xe9rences dans Usings.cs"}),"\n",(0,i.jsxs)(n.p,{children:["Ajoutez les 5 r\xe9f\xe9rences ci-dessous dans le fichier ",(0,i.jsx)(n.strong,{children:"Usings.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"global using SuperCarte.Core.Services;\r\nglobal using SuperCarte.Core.Models;\r\nglobal using SuperCarte.WPF.ViewModels;\r\nglobal using SuperCarte.WPF.ViewModels.Bases;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-viewmodel---listecategoriesvm",children:"Cr\xe9ation du ViewModel - ListeCategoriesVM"}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"CategorieService"})," est maintenant cr\xe9\xe9, il faut maintenant cr\xe9er le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"ViewModels"}),". La classe au complet est \xe0 la fin de la section."]}),"\n",(0,i.jsxs)(n.p,{children:["Premi\xe8rement, il faut d\xe9finir les \xe9l\xe9ments que la ",(0,i.jsx)(n.strong,{children:"Vue"})," a besoin de connaitre pour fonctionner."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour la liste des cat\xe9gories, il faut une ",(0,i.jsx)(n.strong,{children:"List<CategorieModel>"}),". Cette liste sera affich\xe9e \xe0 l'utilisateur. Le choix de comment l'afficher sera dans la vue."]}),"\n",(0,i.jsx)(n.p,{children:"Il faut \xe9galement la propri\xe9t\xe9 pour connaitre la cat\xe9gorie qui est s\xe9lectionn\xe9e dans la liste."}),"\n",(0,i.jsxs)(n.p,{children:["En ",(0,i.jsx)(n.strong,{children:"MVVM"}),", il n'est pas possible d'utiliser une propri\xe9t\xe9 auto-impl\xe9ment\xe9e si elle est li\xe9e \xe0 la vue, car il faut de notifier le changement de valeur. Il faut donc de la logique dans le ",(0,i.jsx)(n.strong,{children:"set"}),". Lorsqu'il y a de la logique, il faut utiliser un attribut pour contenir la valeur de la propri\xe9t\xe9."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class ListeCategoriesVM : BaseVM\r\n{\r\n\t//Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;\r\n    private CategorieModel? _categorieSelection;\r\n    \r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        { \r\n            return _lstCategories; \r\n        }\r\n        set\r\n        {\r\n            //Assigne la propri\xe9t\xe9\r\n            //S'il y a un changement, l'\xe9v\xe9nement OnPropertyChanged sera soulev\xe9 automatiquement\r\n            SetProperty(ref _lstCategories, value);\r\n        }            \r\n    }\r\n    \r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n\t\t\tSetProperty(ref _categorieSelection, value);\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Ensuite, il faut injecter les d\xe9pendances, car les cat\xe9gories seront obtenues par le service."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'namespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;\r\n    private CategorieModel? _categorieSelection;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieService">Service du mod\xe8le Categorie</param>\r\n\tpublic ListeCategoriesVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n    }\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        { \r\n            return _lstCategories; \r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }            \r\n    }\r\n    \r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n\t\t\tSetProperty(ref _categorieSelection, value);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ensuite, il faut penser aux commandes. La liste doit se rafraichir. Cette commande doit \xeatre ",(0,i.jsx)(n.strong,{children:"asynchrone"}),". Cette commande se nomme ",(0,i.jsx)(n.strong,{children:"ObtenirListeCommande"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 de la commande est \xe0 la ligne 36. Les commandes doivent avoir le suffixe ",(0,i.jsx)(n.strong,{children:"Commande"}),". La commande doit utiliser un verbe d'action dans la mesure du possible."]}),"\n",(0,i.jsx)(n.p,{children:"La m\xe9thode que la commande utilise est \xe0 la ligne 30. Par convention, la m\xe9thode doit avoir le m\xeame nom que la commande dans le suffixe."}),"\n",(0,i.jsx)(n.p,{children:"\xc0 la ligne 24, la commande est cr\xe9\xe9e dans le constructeur."}),"\n",(0,i.jsx)(n.p,{children:"Il est important d'assigner la liste par la propri\xe9t\xe9 et jamais par l'attribut. Car la propri\xe9t\xe9 contient la m\xe9canique de notification."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;\r\n    private CategorieModel? _categorieSelection;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieService">Service du mod\xe8le Categorie</param>\r\n\tpublic ListeCategoriesVM(ICategorieService categorieService)\r\n\t{\r\n        _categorieService = categorieService;\r\n\r\n        ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        ListeCategories = await _categorieService.ObtenirListeAsync();\r\n    }\r\n\r\n    //Commandes\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        { \r\n            return _lstCategories; \r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }            \r\n    }\r\n    \r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n\t\t\tSetProperty(ref _categorieSelection, value);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"enregistrer-le-viewmodel---scviewmodelextensions-2",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n{\r\n    services.AddTransient<MainWindowVM>();\r\n    services.AddTransient<ListeCategoriesVM>();\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-de-la-vue---uclistecategoriesxaml",children:"Cr\xe9ation de la vue - UcListeCategories.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez un ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"})," nomm\xe9 ",(0,i.jsx)(n.strong,{children:"UcListeCategories.xaml"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Views"}),". Le mod\xe8le se retrouve dans la section ",(0,i.jsx)(n.strong,{children:"WPF"})," \xe0 gauche."]}),"\n",(0,i.jsxs)(n.p,{children:["Toutes les ",(0,i.jsx)(n.strong,{children:"Vues"})," seront du type  ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La premi\xe8re \xe9tape consiste \xe0 indiquer le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," qui sera utilis\xe9. Ce n'est pas obligatoire, mais en ajoutant les lignes 7 et 8 ci-dessous, il sera possible d'avoir des suggestions lors du ",(0,i.jsx)(n.strong,{children:"Binding"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n\r\n    </Grid>\r\n</UserControl>\r\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"La deuxi\xe8me \xe9tape consiste \xe0 cr\xe9er une disposition. La vue aura 4 rang\xe9es."}),"\n",(0,i.jsx)(n.p,{children:"La premi\xe8re rang\xe9e (0) contiendra le titre de la vue. L'hauteur est automatique."}),"\n",(0,i.jsxs)(n.p,{children:["La deuxi\xe8me rang\xe9e (1) contiendra la liste des boutons ",(0,i.jsx)(n.strong,{children:"Nouveau"}),", ",(0,i.jsx)(n.strong,{children:"\xc9dition"}),", ",(0,i.jsx)(n.strong,{children:"Supprimer"})," et ",(0,i.jsx)(n.strong,{children:"Rafraichir"}),". La hauteur est automatique."]}),"\n",(0,i.jsxs)(n.p,{children:["La troisi\xe8me rang\xe9e (2) contiendra le ",(0,i.jsx)(n.strong,{children:"DataGrid"}),". La hauteur est ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"*"})}),". Elle va prendre tout l'espace restant de la vue."]}),"\n",(0,i.jsx)(n.p,{children:"La quatri\xe8me rang\xe9e (3) contiendra la barre de chargement."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height="auto" /> \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="*" />  \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="20" /> \x3c!--Rang\xe9e 3--\x3e   \r\n        </Grid.RowDefinitions>                   \r\n        \r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ensuite, il faut cr\xe9er le titre. Le composant ",(0,i.jsx)(n.strong,{children:"<TextBloc>"})," sera utilis\xe9. Se composant permet d'afficher du texte facilement."]}),"\n",(0,i.jsx)(n.p,{children:"Il prend tout l'espace disponible, donc en le centrant verticalement et horizontalement, il restera toujours en centre en fonction de la grosseur de la fen\xeatre."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>           \r\n        \r\n         \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Liste des cat\xe9gories"/>\r\n        \r\n        \x3c!--Rang\xe9e 1--\x3e        \r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        \r\n    </Grid>\r\n</UserControl>\r\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ensuite, il faut ajouter les boutons dans un ",(0,i.jsx)(n.strong,{children:"StackPanel"}),". Il est important de sp\xe9cifier la rang\xe9e de la grille o\xf9 elle doit se positionner."]}),"\n",(0,i.jsxs)(n.p,{children:["Contrairement au ",(0,i.jsx)(n.strong,{children:"<div>"})," en ",(0,i.jsx)(n.strong,{children:"HTML"}),", le syst\xe8me de ",(0,i.jsx)(n.strong,{children:"Grid"})," n'a pas de balise encapsul\xe9e. Il faut sp\xe9cifier l'emplacement avec la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Grid.Row"}),". L'ajout de commentaires permet de mieux voir la s\xe9paration des composants dans le ",(0,i.jsx)(n.strong,{children:"Grid"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Le contenu \xe0 l'int\xe9rieur du ",(0,i.jsx)(n.strong,{children:"StackPanel"})," se positionne un \xe0 la suite de l'autre. Il n'est pas n\xe9cessaire de sp\xe9cifier des coordonn\xe9es sp\xe9cifiques. Il est important de sp\xe9cifier une taille et une marge, sinon les boutons prendront tous l'espace disponible et ils seront coll\xe9s."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 36, le bouton ",(0,i.jsx)(n.strong,{children:"Rafraichir"})," est li\xe9 \xe0 la commande ",(0,i.jsx)(n.strong,{children:"ObtenirListeCommande"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Si les lignes 7 et 8 ne sont pas inscrites, il n'y aura pas d'autosuggestion apr\xe8s ",(0,i.jsx)(n.strong,{children:"{Binding"})," Le risque de se tromper est plus grand."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n             \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" /> \r\n        </Grid.RowDefinitions>           \r\n        \r\n         \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Liste des cat\xe9gories"/>\r\n        \r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n            \r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="\xc9diter"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        \r\n    </Grid>\r\n</UserControl>\r\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Ensuite, il faut ajouter le ",(0,i.jsx)(n.strong,{children:"DataGrid"}),". Le ",(0,i.jsx)(n.strong,{children:"DataGrid"})," peut autog\xe9n\xe9r\xe9 les colonnes en fonction des propri\xe9t\xe9s."]}),"\n",(0,i.jsxs)(n.p,{children:["Par contre, il ne sera pas possible de faire des ajustements si ce mode est activ\xe9. \xc0 la ligne 44 du code ci-dessous, la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"AutoGenerateColumns=false"})," d\xe9sactive ce mode."]}),"\n",(0,i.jsx)(n.p,{children:'La propri\xe9t\xe9 **SelectionMode="Single" ** permet de s\xe9lectionner une seule ligne \xe0 la fois.'}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:'IsReadOnly="True"'})," rend la grille non \xe9ditable. Il est possible d'avoir des designs qui permettent de modifier des valeurs directement dans une grille et de sauvegarder l'ensemble."]}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:'ItemsSource="{Binding ListeCategories}"'})," indique la propri\xe9t\xe9 du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," qui contient la source des donn\xe9es. Si les lignes 7 et 8 ne sont pas inscrites, il n'y aura pas d'autosuggestion apr\xe8s **{Binding ** Le risque de se tromper est plus grand."]}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:'SelectedItem="{Binding CategorieSelection}"'})," permet d'indiquer la propri\xe9t\xe9 qui aura la r\xe9f\xe9rence de la propri\xe9t\xe9 s\xe9lectionn\xe9e."]}),"\n",(0,i.jsx)(n.p,{children:"Il faut ensuite d\xe9clarer les colonnes."}),"\n",(0,i.jsxs)(n.p,{children:["Toutes les colonnes sont du texte, car m\xeame le ",(0,i.jsx)(n.strong,{children:"Id"})," sera transform\xe9 en texte. Elles sont toutes du type ",(0,i.jsx)(n.strong,{children:"<DataGridTextColumn>"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Header"})," est pour le nom de la colonne. La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Binding"})," est pour indiquer la propri\xe9t\xe9 \xe0 utiliser dans la classe ",(0,i.jsx)(n.strong,{children:"CategorieModel"}),". Il n'est pas obligatoire de cr\xe9er syst\xe9matiquement une colonne par propri\xe9t\xe9. La cl\xe9 pourrait \xeatre masqu\xe9e \xe0 l'utilisateur. L'autosuggestion provient du type du ",(0,i.jsx)(n.strong,{children:"binding"})," du ",(0,i.jsx)(n.strong,{children:"DataGrid"}),"  ",(0,i.jsx)(n.strong,{children:'ItemsSource="{Binding ListeCategories}"'}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 61, la largeur de la colonne est ** Width=\"*\"**, ce qui indique qu'elle prendra l'espace restant. Si l'espace restant est plus petit que 300, la colonne restera \xe0 300, car la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:'MinWidth="300"'})," (ligne 60)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n             \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>           \r\n        \r\n         \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Liste des cat\xe9gories"/>\r\n        \r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n            \r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="\xc9diter"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}" />\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" \r\n                  IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCategories}"\r\n                  SelectedItem="{Binding CategorieSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="Id"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CategorieId}"/>\r\n                \r\n                <DataGridTextColumn Header="Nom"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="Description"                                    \r\n                                    Binding="{Binding Description}"\r\n                                    MinWidth="300"\r\n                                    Width="*"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \r\n        \x3c!--Rang\xe9e 3--\x3e\r\n\r\n    </Grid>\r\n</UserControl>\r\n\n'})}),"\n",(0,i.jsx)(n.h4,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml-1",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," et la ",(0,i.jsx)(n.strong,{children:"Vue"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"        \r\n        mc:Ignorable="d"\r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:HelloWorldVM}">\r\n            \x3c!--\xc0 retirer \xe9ventuellement--\x3e\r\n            <v:UcHelloWorld />\r\n        </DataTemplate> \r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCategoriesVM}">\r\n            <v:UcListeCategories />\r\n        </DataTemplate>\r\n    </Window.Resources>\r\n    <Grid>\r\n        <ContentControl Content="{Binding VMActif}" />\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["La ligne 19 \xe0 21 indique que lorsque le ",(0,i.jsx)(n.strong,{children:"DataContext"})," est de type ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"})," (ligne 19), il faut utiliser le contr\xf4le utilisateur ",(0,i.jsx)(n.strong,{children:"UcListeCategories"})," (ligne 20)."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 24, lorsque le ",(0,i.jsx)(n.strong,{children:"Content"})," du ",(0,i.jsx)(n.strong,{children:"ContentControl"})," sera un ",(0,i.jsx)(n.strong,{children:"ViewModel"})," de la liste des ressources, il chargera le contr\xf4le utilisateur correspondant."]}),"\n",(0,i.jsx)(n.h4,{id:"test---mainwindowvm",children:"Test - MainWindowVM"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"MainWindowVM.cs"}),", il faut assigner ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"})," \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"VMActif"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class MainWindowVM : BaseVM\r\n{    \r\n    public MainWindowVM(IServiceProvider serviceProvider)\r\n\t{   \r\n        //S\xe9lectionner le ViewModel de d\xe9marrage\r\n        VMActif = serviceProvider.GetRequiredService<ListeCategoriesVM>();\r\n    }\r\n\r\n    public BaseVM VMActif { get; set; }    \r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["D\xe9marrez l'application. Appuyez sur le bouton ",(0,i.jsx)(n.strong,{children:"R"})," et la liste s'affichera dans le ",(0,i.jsx)(n.strong,{children:"DataGrid"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"chargement-automatique",children:"Chargement automatique"}),"\n",(0,i.jsx)(n.p,{children:"Il est plus int\xe9ressant pour l'utilisateur d'avoir un chargement automatique pour ce type de vue."}),"\n",(0,i.jsxs)(n.p,{children:["Il faut impl\xe9menter l'\xe9v\xe9nement ",(0,i.jsx)(n.strong,{children:"Loaded"})," de la vue et appeler la commande ",(0,i.jsx)(n.strong,{children:"ObtenirListeCommande"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcListeCategories.xaml"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"\xc0 la ligne 11, il y a la d\xe9claration de l'\xe9v\xe9nement."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n             \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>           \r\n        \r\n         \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Liste des cat\xe9gories"/>\r\n        \r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n            \r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="\xc9diter"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}" />\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" \r\n                  IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCategories}"\r\n                  SelectedItem="{Binding CategorieSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="Id"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CategorieId}"/>\r\n                \r\n                <DataGridTextColumn Header="Nom"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="Description"                                    \r\n                                    Binding="{Binding Description}"\r\n                                    MinWidth="300"\r\n                                    Width="*"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcListeCategories.xaml.cs"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 27, il y a l'impl\xe9mentation de la m\xe9thode associ\xe9e \xe0 l'\xe9v\xe9nement. Elle doit \xeatre ",(0,i.jsx)(n.strong,{children:"async"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Ensuite, il y a les v\xe9rifications que le ",(0,i.jsx)(n.strong,{children:"DataContext"})," existe et qu'il est un ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La commande est ex\xe9cut\xe9e an ",(0,i.jsx)(n.strong,{children:"asynchrone"}),". Le ",(0,i.jsx)(n.strong,{children:"await"})," est tr\xe8s important pour indiquer \xe0 la fen\xeatre qu'elle est en cours de travail."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Data;\r\nusing System.Windows.Documents;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\nusing System.Windows.Media.Imaging;\r\nusing System.Windows.Navigation;\r\nusing System.Windows.Shapes;\r\n\r\nnamespace SuperCarte.WPF.Views;\r\n/// <summary>\r\n/// Logique d'interaction pour UcListeCategories.xaml\r\n/// </summary>\r\npublic partial class UcListeCategories : UserControl\r\n{\r\n    public UcListeCategories()\r\n    {\r\n        InitializeComponent();\r\n    }\r\n\r\n    private async void UserControl_Loaded(object sender, RoutedEventArgs e)\r\n    {\r\n        if(this.DataContext != null)\r\n        {\r\n            if(this.DataContext is ListeCategoriesVM)\r\n            {\r\n                await ((ListeCategoriesVM)this.DataContext).ObtenirListeCommande.ExecuteAsync(null);\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Ajoutez un ",(0,i.jsx)(n.strong,{children:"d\xe9lai artificiel"})," dans la m\xe9thode ",(0,i.jsx)(n.strong,{children:"ObtenirListeAsync()"})," du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),". Remarquez le comportement du bouton ",(0,i.jsx)(n.strong,{children:"Rafraichir"}),". Lorsque la commande est en cours d'ex\xe9cution, elle indique aux composants qui sont li\xe9s \xe0 la commande d'\xeatre indisponible. Le bouton est donc d\xe9sactiv\xe9 pour \xe9viter la double ex\xe9cution."]}),"\n",(0,i.jsxs)(n.p,{children:["Voici la m\xe9thode avec le ",(0,i.jsx)(n.strong,{children:"d\xe9lai artificiel"})," de la classe ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Obtenir la liste de cat\xe9gories du service\r\n/// </summary>    \r\nprivate async Task ObtenirListeAsync()\r\n{\r\n    await Task.Delay(5000);\r\n    ListeCategories = await _categorieService.ObtenirListeAsync();\r\n    \r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Mettez le d\xe9lai apr\xe8s l'appel du service. La commande sera toujours en ex\xe9cution, mais la liste va apparaitre instantan\xe9ment. Un autre avantage de l'asynchrone, il est possible de mettre \xe0 jour la vue graduellement pour une commande qui effectue plusieurs op\xe9rations."}),"\n",(0,i.jsx)(n.h4,{id:"barre-dactivit\xe9",children:"Barre d'activit\xe9"}),"\n",(0,i.jsx)(n.p,{children:"Il serait int\xe9ressant d'ajouter une barre d'activit\xe9 pour indiquer \xe0 l'utilisateur qu'il y a du travail en cours d'ex\xe9cution."}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut ajouter une propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"EstEnTravail"}),"(ligne 45) et son attribut ",(0,i.jsx)(n.strong,{children:"_estEnTravail"})," (ligne 15)."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans la m\xe9thode ",(0,i.jsx)(n.strong,{children:"ObtenirListeAsync()"}),", la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"EstEnTravail"})," est mise \xe0 jour au d\xe9but (ligne 33) et \xe0 la fin (ligne 38)."]}),"\n",(0,i.jsx)(n.p,{children:"Le d\xe9lai artificiel est toujours dans la m\xe9thode \xe0 la ligne 36."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;\r\n    private bool _estEnTravail = false;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieService">Service du mod\xe8le Categorie</param>\r\n\tpublic ListeCategoriesVM(ICategorieService categorieService)\r\n    {\r\n        _categorieService = categorieService;\r\n\r\n        ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        ListeCategories = await _categorieService.ObtenirListeAsync();\r\n        await Task.Delay(5000);\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    //Commandes\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        {\r\n            return _lstCategories;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcListeCategories.xaml"}),", ajoutez le composant ",(0,i.jsx)(n.strong,{children:"<ProgressBar>"})," dans la 4e rang\xe9e de la grille (ligne 68)."]}),"\n",(0,i.jsxs)(n.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"IsIndeterminate"})," du composant ",(0,i.jsx)(n.strong,{children:"<ProgressBar>"}),"  est li\xe9e \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"EstEnTravail"})," du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n             \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>           \r\n        \r\n         \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="Liste des cat\xe9gories"/>\r\n        \r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n            \r\n            <Button Content="N" ToolTip="Nouveau"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="E" ToolTip="\xc9diter"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="R" ToolTip="Rafraichir"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}" />\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" \r\n                  IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCategories}"\r\n                  SelectedItem="{Binding CategorieSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="Id"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CategorieId}"/>\r\n                \r\n                <DataGridTextColumn Header="Nom"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="Description"                                    \r\n                                    Binding="{Binding Description}"\r\n                                    MinWidth="300"\r\n                                    Width="*"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez le programme et la barre sera en activit\xe9 en pendant un peu plus de 5 secondes ."}),"\n",(0,i.jsx)(n.p,{children:"Vous pouvez retirer le d\xe9lai artificiel."}),"\n",(0,i.jsx)(n.h2,{id:"supprimer-une-cat\xe9gorie",children:"Supprimer une cat\xe9gorie"}),"\n",(0,i.jsx)(n.p,{children:"Pour \xeatre en mesure de supprimer un \xe9l\xe9ment d'une liste, il faut au pr\xe9alable v\xe9rifier les d\xe9pendances."}),"\n",(0,i.jsx)(n.p,{children:"Car, si une carte utilise la cat\xe9gorie, il ne faut pas qu'il soit possible de supprimer la cat\xe9gorie."}),"\n",(0,i.jsxs)(n.p,{children:["Il faut ajouter de nouvelles fonctionnalit\xe9s dans le ",(0,i.jsx)(n.strong,{children:"Repository"})," et dans le ",(0,i.jsx)(n.strong,{children:"Service"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Ce sera la m\xeame technique utilis\xe9e pour le ",(0,i.jsx)(n.strong,{children:"TP 2"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ez-le-mod\xe8le-de-d\xe9pendance---categoriedependance",children:"Cr\xe9ez le mod\xe8le de d\xe9pendance - CategorieDependance"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"CategorieDependance.cs"}),", dans le dossier ",(0,i.jsx)(n.strong,{children:"Models"})," du projet ",(0,i.jsx)(n.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient le nombre de d\xe9pendances pour une cat\xe9gorie\r\n/// </summary>\r\npublic class CategorieDependance\r\n{\r\n    public int CategorieId { get; init; }\r\n    public int NbCartes { get; init; }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["S'il avait d'autres tables qui utiliseraient ",(0,i.jsx)(n.strong,{children:"Categorie"})," comme cl\xe9 \xe9trang\xe8re, il faudrait ajouter les autres ",(0,i.jsx)(n.strong,{children:"Nb[Table]"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"La classe a \xe9galement la cl\xe9 primaire correspondant."}),"\n",(0,i.jsxs)(n.p,{children:["Le mot cl\xe9 ",(0,i.jsx)(n.strong,{children:"init"})," sert \xe0 indiquer qu'il n'est pas possible de modifier la valeur apr\xe8s la construction de l'objet."]}),"\n",(0,i.jsx)(n.h4,{id:"ajouter-la-requ\xeate-dans-le-repository---categorierepo",children:"Ajouter la requ\xeate dans le Repository - CategorieRepo"}),"\n",(0,i.jsx)(n.p,{children:"Il s'agit d'une requ\xeate sp\xe9cifique. Elle pourrait \xeatre g\xe9n\xe9ralis\xe9e en utilisant de la r\xe9flexion, mais pour conserver le projet plus facile \xe0 comprendre, ce sera une requ\xeate explicite."}),"\n",(0,i.jsxs)(n.p,{children:["Dans l'interface ",(0,i.jsx)(n.strong,{children:"ICategorieRepo"}),", il faut ajouter la m\xe9thode ",(0,i.jsx)(n.strong,{children:"ObtenirDependanceAsync"})," et ",(0,i.jsx)(n.strong,{children:"ObtenirDependance"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Les deux versions (asynchrone et synchrone) sont ajout\xe9es, car les 2 seront n\xe9cessaires. Si seulement une version \xe9tait n\xe9cessaire, il ne serait pas n\xe9cessaire d'ajouter les 2."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic interface ICategorieRepo : IBasePKUniqueRepo<Categorie, int>\r\n{\r\n    /// <summary>\r\n    /// Obtenir les d\xe9pendances d'une cat\xe9gorie en asynchrone.\r\n    /// </summary>\r\n    /// <param name=\"categorieId\">Cl\xe9 primaire de la cat\xe9gorie/param>\r\n    /// <returns>Les d\xe9pendances ou null si la cat\xe9gorie n'est pas trouv\xe9e</returns>\r\n    Task<CategorieDependance?> ObtenirDependanceAsync(int categorieId);\r\n    \r\n    /// <summary>\r\n    /// Obtenir les d\xe9pendances d'une cat\xe9gorie.\r\n    /// </summary>\r\n    /// <param name=\"categorieId\">Cl\xe9 primaire de la cat\xe9gorie/param>\r\n    /// <returns>Les d\xe9pendances ou null si la cat\xe9gorie n'est pas trouv\xe9e</returns>\r\n    CategorieDependance? ObtenirDependance(int categorieId);\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Ajoutez l'impl\xe9mentation de la m\xe9thode dans la classe ",(0,i.jsx)(n.strong,{children:"CategorieRepo"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic class CategorieRepo : BasePKUniqueRepo<Categorie, int>, ICategorieRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CategorieRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n    public async Task<CategorieDependance?> ObtenirDependanceAsync(int categorieId)\r\n    {\r\n        return await (from lqCategorie in _bd.CategorieTb\r\n                      where\r\n                          lqCategorie.CategorieId == categorieId\r\n                      select\r\n                          new CategorieDependance()\r\n                          {\r\n                              CategorieId = lqCategorie.CategorieId,\r\n                              NbCartes = lqCategorie.CarteListe.Count()\r\n                          }).FirstOrDefaultAsync();\r\n    }\r\n\r\n    public CategorieDependance? ObtenirDependance(int categorieId)\r\n    {\r\n        return (from lqCategorie in _bd.CategorieTb\r\n                where\r\n                    lqCategorie.CategorieId == categorieId\r\n                select\r\n                    new CategorieDependance()\r\n                    {\r\n                        CategorieId = lqCategorie.CategorieId,\r\n                        NbCartes = lqCategorie.CarteListe.Count()\r\n                    }).FirstOrDefault();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"ajouter-dans-le-service---categorieservice",children:"Ajouter dans le service - CategorieService"}),"\n",(0,i.jsx)(n.p,{children:"Il faut ajouter la m\xe9thode de suppression et d'obtention des d\xe9pendances dans le service."}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez l'interface ",(0,i.jsx)(n.strong,{children:"ICategorieService.cs"}),". Il y a seulement la version ",(0,i.jsx)(n.strong,{children:"synchrone"})," de ",(0,i.jsx)(n.strong,{children:"ObtenirDependance"})," et la version ",(0,i.jsx)(n.strong,{children:"asynchrone"})," de ",(0,i.jsx)(n.strong,{children:"SupprimerAsync"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic interface ICategorieService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste de cat\xe9gories</returns>\r\n    Task<List<CategorieModel>> ObtenirListeAsync();    \r\n\r\n    /// <summary>\r\n    /// Obtenir les d\xe9pendances d\'une cat\xe9gorie.\r\n    /// </summary>\r\n    /// <param name="categorieId">Cl\xe9 primaire de la cat\xe9gorie</param>\r\n    /// <returns>Les d\xe9pendances ou null si la cat\xe9gorie n\'est pas trouv\xe9e</returns>\r\n    CategorieDependance? ObtenirDependance(int categorieId);\r\n\r\n    /// <summary>\r\n    /// Supprimer une cat\xe9gorie en asynchrone.\r\n    /// </summary>    \r\n    /// <param name="categorieId">Cl\xe9 primaire de la cat\xe9gorie</param>    \r\n    Task SupprimerAsync(int categorieId);\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"CategorieService.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic class CategorieService : ICategorieService\r\n{\r\n    private readonly ICategorieRepo _categorieRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieRepo">Repository Categorie</param>\r\n    public CategorieService(ICategorieRepo categorieRepo)\r\n    {\r\n        _categorieRepo = categorieRepo;\r\n    }\r\n\r\n    public async Task<List<CategorieModel>> ObtenirListeAsync()\r\n    {\r\n        return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\r\n    }\r\n\r\n    public CategorieDependance? ObtenirDependance(int categorieId)\r\n    {\r\n        return _categorieRepo.ObtenirDependance(categorieId);\r\n    }\r\n\r\n    public async Task SupprimerAsync(int categorieId)\r\n    {\r\n        CategorieDependance? categorieDependance = await _categorieRepo.ObtenirDependanceAsync(categorieId);\r\n\r\n        if(categorieDependance != null)\r\n        {\r\n            if(categorieDependance.NbCartes == 0)\r\n            {\r\n                await _categorieRepo.SupprimerParCleAsync(categorieId, true);\r\n            }\r\n            else\r\n            {\r\n                throw new Exception("La cat\xe9gorie a des d\xe9pendances. Impossible \xe0 supprimer.");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            throw new Exception("La cat\xe9gorie n\'existe pas dans la base de donn\xe9es.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode ",(0,i.jsx)(n.strong,{children:"SupprimerAsync"})," s'assure qu'il est possible d'effectuer la suppression, sinon elle g\xe9n\xe8re des exceptions."]}),"\n",(0,i.jsx)(n.h3,{id:"supercartewpf",children:"SuperCarte.WPF"}),"\n",(0,i.jsx)(n.h4,{id:"ajouter-la-commande-dans-le-viewmodel---listecartesvm",children:"Ajouter la commande dans le ViewModel - ListeCartesVM"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut ajouter une nouvelle commande ",(0,i.jsx)(n.strong,{children:"SupprimerCommande"})," dans le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Dans une commande, il est possible d'ajouter une logique pour indiquer s'il est possible ou non de l'ex\xe9cuter. Dans ce cas-ci, il y a 2 conditions."}),"\n",(0,i.jsxs)(n.p,{children:["Premi\xe8rement, il doit avoir une cat\xe9gorie s\xe9lectionn\xe9e dans le ",(0,i.jsx)(n.strong,{children:"DataGrid"}),". Deuxi\xe8mement, la cat\xe9gorie ne doit pas avoir de d\xe9pendance."]}),"\n",(0,i.jsx)(n.p,{children:"\xc0 chaque fois que la s\xe9lection sera modifi\xe9e, il faudra appliquer la logique si la commande supprim\xe9e peut s'appliquer."}),"\n",(0,i.jsxs)(n.p,{children:["Modifiez la classe ",(0,i.jsx)(n.strong,{children:"ListeCartesVM"})," par le code ci-dessous."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\n/// <summary>\r\n/// ViewModel de la vue ListeCategories\r\n/// </summary>\r\npublic class ListeCategoriesVM : BaseVM\r\n{\r\n    //D\xe9pendances\r\n    private readonly ICategorieService _categorieService;\r\n\r\n    //Attributs des propri\xe9t\xe9s\r\n    private List<CategorieModel> _lstCategories;\r\n    private bool _estEnTravail = false;\r\n    private CategorieModel? _categorieSelection;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"categorieService\">Service du mod\xe8le Categorie</param>\r\n\tpublic ListeCategoriesVM(ICategorieService categorieService)\r\n    {\r\n        _categorieService = categorieService;\r\n\r\n        ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n        SupprimerCommande = new AsyncRelayCommand(SupprimerAsync, PeutSupprimer);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de cat\xe9gories du service\r\n    /// </summary>    \r\n    private async Task ObtenirListeAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        ListeCategories = await _categorieService.ObtenirListeAsync();        \r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Supprimer la cat\xe9gorie s\xe9lectionn\xe9e\r\n    /// </summary>    \r\n    private async Task SupprimerAsync()\r\n    {\r\n        EstEnTravail = true;\r\n\r\n        await _categorieService.SupprimerAsync(CategorieSelection!.CategorieId);\r\n\r\n        await ObtenirListeAsync();\r\n\r\n        EstEnTravail = false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// V\xe9rifier si la commande supprimer peut s'ex\xe9cuter\r\n    /// </summary>\r\n    /// <returns>Vrai si elle peut s'ex\xe9cuter, faux si elle ne peut pas</returns>\r\n    private bool PeutSupprimer()\r\n    {        \r\n        //V\xe9rifie si une cat\xe9gorie peut \xeatre supprim\xe9e\r\n        if (CategorieSelection != null)\r\n        {\r\n            //Il y a une cat\xe9gorie est s\xe9lectionn\xe9e\r\n\r\n            //Il faut emp\xeacher la v\xe9rification si l'op\xe9ration est en cours d'ex\xe9cution\r\n            //L'appel se fait en parall\xe8le avec l'ex\xe9cution et il y a une v\xe9rification dans la BD\r\n            //Entity Framework ne peut pas fonctionner en parall\xe8le avec la m\xeame instance du contexte.\r\n            //Cette v\xe9rification est seulement n\xe9cessaire dans le cas d'un appel avec la base de donn\xe9es.\r\n            if (SupprimerCommande.IsRunning == false)\r\n            {\r\n                //V\xe9rifie si elle a des d\xe9pendances\r\n                CategorieDependance? categorieDependance =\r\n                    _categorieService.ObtenirDependance(CategorieSelection.CategorieId);\r\n\r\n                //Si aucune cartes, elle peut \xeatre supprim\xe9e\r\n                return categorieDependance?.NbCartes == 0;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //Aucune cat\xe9gorie n\u2019est s\xe9lectionn\xe9e\r\n            return false;\r\n        }\r\n    }    \r\n\r\n    //Commandes\r\n    public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n    public IAsyncRelayCommand SupprimerCommande { get; set; }\r\n\r\n    //Propri\xe9t\xe9s li\xe9es\r\n    public bool EstEnTravail\r\n    {\r\n        get\r\n        {\r\n            return _estEnTravail;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _estEnTravail, value);\r\n        }\r\n    }\r\n\r\n    public List<CategorieModel> ListeCategories\r\n    {\r\n        get\r\n        {\r\n            return _lstCategories;\r\n        }\r\n        set\r\n        {\r\n            SetProperty(ref _lstCategories, value);\r\n        }\r\n    }\r\n\r\n    public CategorieModel? CategorieSelection\r\n    {\r\n        get\r\n        {\r\n            return _categorieSelection;\r\n        }\r\n        set\r\n        {\r\n            if(SetProperty(ref _categorieSelection, value))\r\n            {\r\n                SupprimerCommande.NotifyCanExecuteChanged();\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Voici les \xe9l\xe9ments n\xe9cessaires pour la commande ",(0,i.jsx)(n.strong,{children:"Supprimer"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"La commande doit \xeatre asynchrone."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public IAsyncRelayCommand SupprimerCommande { get; set; }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["La m\xe9thode pour ex\xe9cuter la commande est ",(0,i.jsx)(n.strong,{children:"SupprimerAsync"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"\xc0 l'int\xe9rieur, elle appelle le service pour supprimer la cat\xe9gorie s\xe9lectionn\xe9e."}),"\n",(0,i.jsx)(n.p,{children:"\xc9galement, apr\xe8s la suppression, il faut mettre la liste \xe0 jour."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Supprimer la cat\xe9gorie s\xe9lectionn\xe9e\r\n/// </summary>    \r\nprivate async Task SupprimerAsync()\r\n{\r\n    EstEnTravail = true;\r\n\r\n    await _categorieService.SupprimerAsync(CategorieSelection!.CategorieId);\r\n\r\n    await ObtenirListeAsync();\r\n\r\n    EstEnTravail = false;\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Avant d'ex\xe9cuter une m\xe9thode, il faut v\xe9rifier si elle peut \xeatre ex\xe9cut\xe9e."}),"\n",(0,i.jsx)(n.p,{children:"La premi\xe8re \xe9tape consiste \xe0 v\xe9rifier si une cat\xe9gorie est s\xe9lectionn\xe9e."}),"\n",(0,i.jsx)(n.p,{children:"Ensuite, il faut obtenir les d\xe9pendances dans la base de donn\xe9es."}),"\n",(0,i.jsx)(n.p,{children:"Cette m\xe9thode ne peut pas \xeatre asynchrone. Il faut donc que sa logique soit assez rapide. Si l'appel \xe0 la base de donn\xe9es est long, il faudrait revoir la logique. Il serait possible d'afficher un message d'erreur lors de la suppression s'il y a des d\xe9pendances. La v\xe9rification avec la base de donn\xe9es se ferait uniquement si l'action est r\xe9ellement demand\xe9e."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// V\xe9rifier si la commande supprimer peut s'ex\xe9cuter\r\n/// </summary>\r\n/// <returns>Vrai si elle peut s'ex\xe9cuter, faux si elle ne peut pas</returns>\r\nprivate bool PeutSupprimer()\r\n{        \r\n    //V\xe9rifie si une cat\xe9gorie peut \xeatre supprim\xe9e\r\n    if (CategorieSelection != null)\r\n    {\r\n        //Il y a une cat\xe9gorie est s\xe9lectionn\xe9e\r\n\r\n        //Il faut emp\xeacher la v\xe9rification si l'op\xe9ration est en cours d'ex\xe9cution\r\n        //L'appel se fait en parall\xe8le avec l'ex\xe9cution et il y a une v\xe9rification dans la BD\r\n        //Entity Framework ne peut pas fonctionner en parall\xe8le avec la m\xeame instance du contexte.\r\n        if (SupprimerCommande.IsRunning == false)\r\n        {\r\n            //V\xe9rifie si elle a des d\xe9pendances\r\n            CategorieDependance? categorieDependance =\r\n                _categorieService.ObtenirDependance(CategorieSelection.CategorieId);\r\n\r\n            //Si aucune cartes, elle peut \xeatre supprim\xe9e\r\n            return categorieDependance?.NbCartes == 0;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        //Aucune cat\xe9gorie est s\xe9lectionn\xe9e\r\n        return false;\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Il faut \xe9galement modifier la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"CategorieSelection"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Si la propri\xe9t\xe9 est modifi\xe9e, il faut indiquer \xe0 la commande ",(0,i.jsx)(n.strong,{children:"Supprimer"})," de v\xe9rifier de nouveau si elle peut \xeatre ex\xe9cut\xe9e. Cette propri\xe9t\xe9 a un lien avec la logique de v\xe9rification, il faut donc appeler ",(0,i.jsx)(n.strong,{children:"NotifyCanExecuteChanged"})," pour que l'\xe9tat du bouton change dans la vue."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public CategorieModel? CategorieSelection\r\n{\r\n    get\r\n    {\r\n        return _categorieSelection;\r\n    }\r\n    set\r\n    {\r\n        if(SetProperty(ref _categorieSelection, value))\r\n        {\r\n            SupprimerCommande.NotifyCanExecuteChanged();\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Finalement, il faut cr\xe9er la commande avec les 2 m\xe9thodes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"SupprimerCommande = new AsyncRelayCommand(SupprimerAsync, PeutSupprimer);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"lier-le-bouton-avec-la-commande-dans-la-vue----uclistecategoriesxaml",children:"Lier le bouton avec la commande dans la vue  - UcListeCategories.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcListeCategories.xaml"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Voici la nouvelle d\xe9finition du bouton. La commande est li\xe9e \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"SupprimerCommande"})," du ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Button Content="S" ToolTip="Supprimer"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez le programme."}),"\n",(0,i.jsxs)(n.p,{children:["Changez la s\xe9lection dans la liste. Seulement la cat\xe9gorie ",(0,i.jsx)(n.strong,{children:"Mages"})," aura le bouton ",(0,i.jsx)(n.strong,{children:"S"})," activ\xe9."]}),"\n",(0,i.jsxs)(n.p,{children:["Appuyez sur le bouton et la cat\xe9gorie ",(0,i.jsx)(n.strong,{children:"Mages"})," ne sera plus l\xe0."]}),"\n",(0,i.jsx)(n.p,{children:"G\xe9n\xe9ralement, il est recommand\xe9 d'avoir une demande de confirmation avant de supprimer un \xe9l\xe9ment. Cette technique sera pr\xe9sent\xe9e dans un autre document."}),"\n",(0,i.jsx)(n.h4,{id:"r\xe9appliquer-le-seed",children:"R\xe9appliquer le seed"}),"\n",(0,i.jsxs)(n.p,{children:["Pour appliquer de nouveau le ",(0,i.jsx)(n.strong,{children:"Seed_Carte"}),", il faut synchroniser la base de donn\xe9es avec la migration pr\xe9c\xe9dente de ce seed et ensuite l'appliquer de nouveau."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Update-Database -StartupProject SuperCarte.EF -Migration Seed_RoleEtUtilisateur\r\nUpdate-Database -StartupProject SuperCarte.EF -Migration Seed_Carte\n"})}),"\n",(0,i.jsx)(n.h2,{id:"localisation",children:"Localisation"}),"\n",(0,i.jsx)(n.p,{children:"Pour rendre l'application multilingue, il faut utiliser des fichiers ressources. Les fichiers ressources sont en fonction de la localisation."}),"\n",(0,i.jsx)(n.p,{children:"Le terme localisation est utilis\xe9, car il peut avoir une version pour le fran\xe7ais de France et le fran\xe7ais du Qu\xe9bec."}),"\n",(0,i.jsxs)(n.p,{children:["Pour faciliter la localisation des vues, il existe la librairie ",(0,i.jsx)(n.strong,{children:"WPFLocalizeExention"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"installation-de-la-librairie",children:"Installation de la librairie"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la ",(0,i.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,i.jsx)(n.strong,{children:"Projet par d\xe9faut"})," ",(0,i.jsx)(n.strong,{children:"WPF"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,i.jsx)(n.strong,{children:"SuperCarte.WPF"}),". \xc0 ce stade, il y a ",(0,i.jsx)(n.strong,{children:"plusieurs projets"})," et il est important de le modifier dans la liste."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Install-Package WPFLocalizeExtension\n"})}),"\n",(0,i.jsx)(n.h3,{id:"cr\xe9ation-du-fichier-ressource---reslistecategories",children:"Cr\xe9ation du fichier ressource - ResListeCategories"}),"\n",(0,i.jsxs)(n.p,{children:["La librairie utilise les fichiers ",(0,i.jsx)(n.strong,{children:".resx"})," pour la localisation. C'est le format de fichier principal pour ",(0,i.jsx)(n.strong,{children:".NET"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,i.jsx)(n.strong,{children:"Resx"}),", dans le projet ",(0,i.jsx)(n.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Il existe plusieurs strat\xe9gies pour g\xe9rer les fichiers ressources. Pour ce projet, ce sera un fichier ressource par vue."}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(n.strong,{children:"ResListeCategories.resx"})," avec le mod\xe8le ",(0,i.jsx)(n.strong,{children:"Fichier de ressources"}),". Il est important que le nom du fichier ressource ne soit pas r\xe9utilis\xe9 pour d'autres ressources."]}),"\n",(0,i.jsx)(n.p,{children:"Ce fichier sera le fichier ressource principal. Si aucun fichier ressource n\u2019existe pour la culture du programme, ce sera celui-ci."}),"\n",(0,i.jsx)(n.p,{children:"Pour ce projet, ce sera le fichier en fran\xe7ais."}),"\n",(0,i.jsxs)(n.p,{children:["La colonne ",(0,i.jsx)(n.strong,{children:"Nom"})," consiste \xe0 la cl\xe9 de la ressource et la colonne ",(0,i.jsx)(n.strong,{children:"Valeur"})," consiste est le texte."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour la vue ",(0,i.jsx)(n.strong,{children:"UcListeCategories"}),", il faut traduire le titre de la page, les ent\xeates des colonnes du ",(0,i.jsx)(n.strong,{children:"DataDrid"}),", le texte et les ",(0,i.jsx)(n.strong,{children:"Tooltip"})," des boutons."]}),"\n",(0,i.jsxs)(n.p,{children:["Les boutons seront par contre r\xe9utilis\xe9s par d'autres ",(0,i.jsx)(n.strong,{children:"Vues"})," . Il serait pr\xe9f\xe9rable de les sp\xe9cifier dans un fichier propre."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Nom"}),(0,i.jsx)(n.th,{children:"Valeur"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Titre"}),(0,i.jsx)(n.td,{children:"Liste des cat\xe9gories"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_CategorieId"}),(0,i.jsx)(n.td,{children:"Id"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Nom"}),(0,i.jsx)(n.td,{children:"Nom"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Description"}),(0,i.jsx)(n.td,{children:"Description"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(n.strong,{children:"ResListeCategories.en.resx"}),". Ce fichier sera pour l'anglais. Ce sera autant pour ",(0,i.jsx)(n.strong,{children:"en-US"})," (Anglais \xc9tats-Unis) que pour ",(0,i.jsx)(n.strong,{children:"en-CA"})," (Anglais Canada). Il est important de mettre le code de la culture dans entre le nom du fichier et l'extension."]}),"\n",(0,i.jsxs)(n.p,{children:["Il faut que les \xe9l\xe9ments de la colonne ",(0,i.jsx)(n.strong,{children:"Nom"})," soient identiques dans tous les fichiers."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Nom"}),(0,i.jsx)(n.th,{children:"Valeur"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Titre"}),(0,i.jsx)(n.td,{children:"Categories list"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_CategorieId"}),(0,i.jsx)(n.td,{children:"Id"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Nom"}),(0,i.jsx)(n.td,{children:"Name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Description"}),(0,i.jsx)(n.td,{children:"Description"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["S'il avait une version italienne, il faudrait que le fichier se nomme ",(0,i.jsx)(n.strong,{children:"ResListeCategories.it.resx"}),". S'il avait une version fran\xe7aise de France, il faudrait que le fichier se nomme ",(0,i.jsx)(n.strong,{children:"ResListeCategories.fr-Fr.resx"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"cr\xe9ation-du-fichier-ressource---resgloballistebouton",children:"Cr\xe9ation du fichier ressource - ResGlobalListeBouton"}),"\n",(0,i.jsxs)(n.p,{children:["Ce fichier ressource contiendra l'information des boutons. Les boutons d'une liste seront toujours les m\xeames. Imaginez qu'il faut modifier le bouton ",(0,i.jsx)(n.strong,{children:"Rafraichissement"})," par ",(0,i.jsx)(n.strong,{children:"Chargement"}),". Si le logiciel \xe0 150 listes, il faut le modifier dans 150 fichiers."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(n.strong,{children:"ResGlobalListeBouton.resx"})," avec le mod\xe8le ",(0,i.jsx)(n.strong,{children:"Fichier de ressources"}),". Il est important que le nom du fichier ressource ne soit pas r\xe9utilis\xe9 pour d'autres ressources."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Nom"}),(0,i.jsx)(n.th,{children:"Valeur"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Nouveau_Content"}),(0,i.jsx)(n.td,{children:"N"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Editer_Content"}),(0,i.jsx)(n.td,{children:"\xc9"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Supprimer_Content"}),(0,i.jsx)(n.td,{children:"S"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Rafraichir_Content"}),(0,i.jsx)(n.td,{children:"R"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Nouveau_Tooltip"}),(0,i.jsx)(n.td,{children:"Nouveau"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Editer_Tooltip"}),(0,i.jsx)(n.td,{children:"\xc9diter"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Supprimer_Tooltip"}),(0,i.jsx)(n.td,{children:"Supprimer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Rafraichir_Tooltip"}),(0,i.jsx)(n.td,{children:"Rafraichir"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(n.strong,{children:"ResGlobalListeBouton.en.resx"}),"."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Nom"}),(0,i.jsx)(n.th,{children:"Valeur"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Nouveau_Content"}),(0,i.jsx)(n.td,{children:"N"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Editer_Content"}),(0,i.jsx)(n.td,{children:"E"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Supprimer_Content"}),(0,i.jsx)(n.td,{children:"D"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Rafraichir_Content"}),(0,i.jsx)(n.td,{children:"R"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Nouveau_Tooltip"}),(0,i.jsx)(n.td,{children:"New"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Editer_Tooltip"}),(0,i.jsx)(n.td,{children:"Edit"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Supprimer_Tooltip"}),(0,i.jsx)(n.td,{children:"Delete"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Bouton_Rafraichir_Tooltip"}),(0,i.jsx)(n.td,{children:"Refresh"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"utilisation-dans-la-vue---uclistecategoriesxaml",children:"Utilisation dans la vue - UcListeCategories.xaml"}),"\n",(0,i.jsx)(n.p,{children:"Le fichier au complet sera \xe0 la fin de la section"}),"\n",(0,i.jsxs)(n.p,{children:["Pour \xeatre en mesure de l'utiliser dans une ",(0,i.jsx)(n.strong,{children:"Vue"}),", il faut ajouter des d\xe9clarations dans la balise initiale ",(0,i.jsx)(n.strong,{children:"<UserControl>"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La ligne 8 indique qu'il faut inclure le **namespace ** de la librairie ",(0,i.jsx)(n.strong,{children:"WPFLocalizeExtension"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"La ligne 9 indique qu'elle est la langue \xe0 utiliser pour l'aper\xe7u du design."}),"\n",(0,i.jsx)(n.p,{children:"La ligne 10 indique le projet dans lequel le fichier ressource se trouve."}),"\n",(0,i.jsxs)(n.p,{children:["La ligne 11 est le nom du fichier ressource par d\xe9faut de la ",(0,i.jsx)(n.strong,{children:"Vue"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCategories"             \r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\n'})}),"\n",(0,i.jsx)(n.p,{children:"Pour s\xe9lectionner un \xe9l\xe9ment du fichier ressource de la vue, il faut utiliser cette syntaxe. La cl\xe9 est le nom de la colonne."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{lex:Loc Cl\xe9}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Par exemple pour le titre de la ",(0,i.jsx)(n.strong,{children:"Vue"}),". Il faut prendre la valeur de l'\xe9l\xe9ment ",(0,i.jsx)(n.strong,{children:"Titre"})," du fichier ",(0,i.jsx)(n.strong,{children:"ResListeCategories"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<TextBlock \r\n\tGrid.Row="0" \r\n\tVerticalAlignment="Center" HorizontalAlignment="Center"\r\n\tFontSize="16" FontWeight="Bold"\r\n\tText="{lex:Loc Titre}"/>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Pour s\xe9lectionner un \xe9l\xe9ment d'un autre fichier ressource, il faut utiliser cette syntaxe. Le fichier est le fichier ",(0,i.jsx)(n.strong,{children:"Resx"}),". La cl\xe9 est le nom de la colonne."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{lex:Loc Fichier:Cl\xe9}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Voici pour le bouton ",(0,i.jsx)(n.strong,{children:"Nouveau"}),". Il prend l'\xe9l\xe9ment  ",(0,i.jsx)(n.strong,{children:"Bouton_Nouveau_Content"})," du fichier ",(0,i.jsx)(n.strong,{children:"ResGlobalListeBouton"})," pour la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Content"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n        Margin="5" Width="32" Height="32" />\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Voici pour l'ent\xeate de colonne ",(0,i.jsx)(n.strong,{children:"Id"}),". L'ent\xeate est dans le fichier ressource de la vue."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<DataGridTextColumn Header="{lex:Loc Col_CategorieId}"\r\n                    MinWidth="50"\r\n                    Binding="{Binding CategorieId}"/>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Tout ce qui est du texte doit \xeatre dans un fichier ressource, m\xeame si le texte est identique dans les 2 langues."}),"\n",(0,i.jsx)(n.p,{children:"Il devient difficile \xe0 faire \xe9voluer le programme si certains libell\xe9s ne sont pas dans le fichier ressource."}),"\n",(0,i.jsx)(n.p,{children:"\xc9galement, il est pr\xe9f\xe9rable de cr\xe9er un \xe9l\xe9ment par composant, m\xeame s'il y a une r\xe9p\xe9tition dans la valeur."}),"\n",(0,i.jsx)(n.p,{children:"Voici le fichier au complet."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCategories"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCategories"             \r\n             d:DataContext="{d:DesignInstance vm:ListeCategoriesVM}"\r\n             mc:Ignorable="d" \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" /> \r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="{lex:Loc Titre}"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCategories}"\r\n                  SelectedItem="{Binding CategorieSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="{lex:Loc Col_CategorieId}"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CategorieId}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Nom}"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Description}" \r\n                                    MinWidth="300"\r\n                                    Width="*"\r\n                                    Binding="{Binding Description}"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test",children:"Test"}),"\n",(0,i.jsx)(n.p,{children:"Par d\xe9faut, la culture sera celle sp\xe9cifi\xe9e dans le syst\xe8me d'exploitation."}),"\n",(0,i.jsx)(n.p,{children:"Il est possible de la modifier \xe0 partir du code."}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"App.xaml.cs"}),", modifiez  le constructeur de la classe ",(0,i.jsx)(n.strong,{children:"App"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public App()\r\n{\r\n    //Modification de la langue dans l\'extension et du thread principal\r\n\tCultureInfo.DefaultThreadCurrentCulture = new CultureInfo("en-CA");\r\n    WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.SetCurrentThreadCulture = true;\r\n    WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.Culture = CultureInfo.DefaultThreadCurrentCulture;\r\n\r\n    var builder = Host.CreateDefaultBuilder();\r\n\r\n    //Enregistrement des services\r\n    builder.ConfigureServices((context, services) =>\r\n    {            \r\n        services.AddSingleton<MainWindow>(); //Fen\xeatre principale\r\n\r\n        //Enregistrement du contexte    \r\n        services.AddDbContext<SuperCarteContext>(options => options.UseSqlServer(context.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n        //Appel des m\xe9thodes d\'extension                        \r\n        services.EnregistrerRepositories();\r\n        services.EnregistrerServices();            \r\n        services.EnregistrerValidateurs();\r\n        services.EnregistrerViewModels();\r\n    });\r\n\r\n    _host = builder.Build();\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez l'application et la page sera en anglais."}),"\n",(0,i.jsxs)(n.p,{children:["Il est important de modifier la langue dans le ",(0,i.jsx)(n.strong,{children:"Thread principal"})," de l'application et non dans le ",(0,i.jsx)(n.strong,{children:"Thread d'affichage"}),", car l'application fonctionne en asynchrone. Une sous-t\xe2che cr\xe9e une copie de la culture du ",(0,i.jsx)(n.strong,{children:"Thread parent"}),". L'instance du ",(0,i.jsx)(n.strong,{children:"ViewModel"})," est cr\xe9\xe9e par le ",(0,i.jsx)(n.strong,{children:"ServiceProvider"}),", donc il provient du ",(0,i.jsx)(n.strong,{children:"Thread principal"}),". Ce n'est pas la ",(0,i.jsx)(n.strong,{children:"Vue"})," qui cr\xe9e la ",(0,i.jsx)(n.strong,{children:"VM"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["La ligne ",(0,i.jsx)(n.strong,{children:"CultureInfo.DefaultThreadCurrentCulture"})," permet d'indiquer la culture par d\xe9faut de l'application. En cas qu'il faille modifier la culture dans l'application en cours d'ex\xe9cution, il faudrait se baser sur cette valeur pour appliquer la culture sur le ",(0,i.jsx)(n.strong,{children:"Thread"})," en cours d'ex\xe9cution si c'est n\xe9cessaire."]}),"\n",(0,i.jsx)(n.p,{children:"Remettez l'application en fran\xe7ais par d\xe9faut."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public App()\r\n{\r\n    //Modification de la langue dans l\'extension et du thread principal\r\n\t\tCultureInfo.DefaultThreadCurrentCulture = new CultureInfo("fr-CA");\r\n        WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.SetCurrentThreadCulture = true;\r\n        WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.Culture = CultureInfo.DefaultThreadCurrentCulture;\r\n\r\n    var builder = Host.CreateDefaultBuilder();\r\n\r\n    //Enregistrement des services\r\n    builder.ConfigureServices((context, services) =>\r\n    {            \r\n        services.AddSingleton<MainWindow>(); //Fen\xeatre principale\r\n\r\n        //Enregistrement du contexte    \r\n        services.AddDbContext<SuperCarteContext>(options => options.UseSqlServer(context.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n        //Appel des m\xe9thodes d\'extension                        \r\n        services.EnregistrerRepositories();\r\n        services.EnregistrerServices();            \r\n        services.EnregistrerValidateurs();\r\n        services.EnregistrerViewModels();\r\n    });\r\n\r\n    _host = builder.Build();\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"liste-des-cartes",children:"Liste des cartes"}),"\n",(0,i.jsx)(n.p,{children:"Pour faire la liste des cartes, il faut reproduire la m\xeame technique que la liste des cat\xe9gories."}),"\n",(0,i.jsxs)(n.p,{children:["Par contre, la liste des cartes \xe0 2 cl\xe9s \xe9trang\xe8res. Dans une ",(0,i.jsx)(n.strong,{children:"Vue"}),", l'utilisateur veut rarement voir les cl\xe9s \xe9trang\xe8res, mais un \xe9l\xe9ment significatif \xe0 celle-ci."]}),"\n",(0,i.jsx)(n.p,{children:"Dans le cas des cartes, il faut afficher le nom de la cat\xe9gorie et le nom de l'ensemble. Il faut cr\xe9er un mod\xe8le qui contient ces deux nouveaux champs."}),"\n",(0,i.jsxs)(n.p,{children:["Dans cette section, ce sera uniquement la m\xe9canique pour ",(0,i.jsx)(n.strong,{children:"Obtenir la liste"}),". Il faudrait tout de m\xeame ajouter la m\xe9canique de suppression."]}),"\n",(0,i.jsx)(n.h3,{id:"supercartecore-1",children:"SuperCarte.Core"}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-mod\xe8le---cartedetailmodel",children:"Cr\xe9ation du mod\xe8le - CarteDetailModel"}),"\n",(0,i.jsxs)(n.p,{children:["Les mod\xe8les qui seront utilis\xe9s pour les listes de donn\xe9es auront le suffixe ",(0,i.jsx)(n.strong,{children:"Detail"}),", car elles contiennent le d\xe9tail des cl\xe9s \xe9trang\xe8res."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"CarteDetailModel.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Models"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l'information d'une carte avec le d\xe9tail de ses cl\xe9s \xe9trang\xe8res\r\n/// </summary>\r\npublic class CarteDetailModel\r\n{\r\n    public int CarteId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public short Vie { get; set; }\r\n\r\n    public short Armure { get; set; }\r\n\r\n    public short Attaque { get; set; }\r\n\r\n    public bool EstRare { get; set; }\r\n\r\n    public decimal PrixRevente { get; set; }\r\n\r\n    public int CategorieId { get; set; }\r\n\r\n    public string CategorieNom { get; set; } = null!;\r\n\r\n    public int EnsembleId { get; set; }\r\n\r\n    public string EnsembleNom { get; set; } = null!;\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ajout-de-la-requ\xeate-dans-repository---carterepo",children:"Ajout de la requ\xeate dans Repository - CarteRepo"}),"\n",(0,i.jsx)(n.p,{children:"Pour \xeatre en mesure de r\xe9cup\xe9rer l'information des cl\xe9s \xe9trang\xe8res, il faut adapter la requ\xeate."}),"\n",(0,i.jsxs)(n.p,{children:["Il y a 2 options. La premi\xe8re serait d'utiliser le ",(0,i.jsx)(n.strong,{children:"EagerLoading"}),". Le ",(0,i.jsx)(n.strong,{children:"Service"})," aurait la responsabilit\xe9 de prendre les champs n\xe9cessaires pour construire l'objet ",(0,i.jsx)(n.strong,{children:"CarteModelDetail"}),". Il serait possible de g\xe9n\xe9raliser le ",(0,i.jsx)(n.strong,{children:"EagerLoading"})," avec la r\xe9flexion."]}),"\n",(0,i.jsxs)(n.p,{children:["La 2e option est de cr\xe9er l'objet directement dans la requ\xeate du ",(0,i.jsx)(n.strong,{children:"Repository"}),". Pour ce projet, ce sera cette option qui sera utilis\xe9e."]}),"\n",(0,i.jsxs)(n.p,{children:["Dans l'interface ",(0,i.jsx)(n.strong,{children:"ICarteRepo.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic interface ICarteRepo : IBasePKUniqueRepo<Carte, int>\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste des cartes avec le mod\xe8le CarteDetailModel en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste des cartes</returns>\r\n    Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"CarteRepo.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using Microsoft.EntityFrameworkCore;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic class CarteRepo : BasePKUniqueRepo<Carte, int>, ICarteRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n    public async Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync()\r\n    {\r\n        return await(from lqCarte in _bd.CarteTb\r\n                     select\r\n                         new CarteDetailModel()\r\n                         {\r\n                             CarteId = lqCarte.CarteId,\r\n                             Nom = lqCarte.Nom,\r\n                             Vie = lqCarte.Vie,\r\n                             Armure = lqCarte.Armure,\r\n                             Attaque = lqCarte.Attaque,\r\n                             EstRare = lqCarte.EstRare,\r\n                             PrixRevente = lqCarte.PrixRevente,\r\n                             CategorieId = lqCarte.CategorieId,\r\n                             CategorieNom = lqCarte.Categorie.Nom,\r\n                             EnsembleId = lqCarte.EnsembleId,\r\n                             EnsembleNom = lqCarte.Ensemble.Nom\r\n                         }).ToListAsync();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Les jointures sont effectu\xe9es par la propri\xe9t\xe9 de navigation dans la cr\xe9ation de l'objet."}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-service---carteservice",children:"Cr\xe9ation du service - CarteService"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,i.jsx)(n.strong,{children:"ICarteService.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Interface qui contient les services du mod\xe8le Carte\r\n/// </summary>\r\npublic interface ICarteService\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste des cartes avec le mod\xe8le CarteDetailModel en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste des cartes</returns>\r\n    Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"CarteService.cs"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Services"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'using SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Carte\r\n/// </summary>\r\npublic class CarteService : ICarteService\r\n{\r\n    private readonly ICarteRepo _carteRepo;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="carteRepo">Repository Carte</param>\r\n    public CarteService(ICarteRepo carteRepo)\r\n    {\r\n        _carteRepo = carteRepo;\r\n    }\r\n\r\n    public async Task<List<CarteDetailModel>> ObtenirListeCarteDetailAsync()\r\n    {\r\n        return await _carteRepo.ObtenirListeCarteDetailAsync();\r\n    }\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Pour cette m\xe9thode, le ",(0,i.jsx)(n.strong,{children:"Service"})," appelle directement le ",(0,i.jsx)(n.strong,{children:"Repository"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"projet-supercartewpf-1",children:"Projet SuperCarte.WPF"}),"\n",(0,i.jsx)(n.h4,{id:"enregistrement-du-service---scserviceextensions-1",children:"Enregistrement du service - SCServiceExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut enregistrer le ",(0,i.jsx)(n.strong,{children:"Service"})," dans la classe ",(0,i.jsx)(n.strong,{children:"SCServiceExtensions"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerServices(this IServiceCollection services)\r\n{\r\n    services.AddScoped<ICategorieService, CategorieService>();\r\n    services.AddScoped<ICarteService, CarteService>();\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Le service est \xe9galement enregistr\xe9 en ",(0,i.jsx)(n.strong,{children:"Scoped"})," pour permettre d'utiliser la m\xeame instance dans le programme dans le m\xeame ",(0,i.jsx)(n.strong,{children:"scope"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-viewmodel---listecartesvm",children:"Cr\xe9ation du ViewModel - ListeCartesVM"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(n.strong,{children:"ListeCartesVM.cs"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using CommunityToolkit.Mvvm.Input;\r\n\r\nnamespace SuperCarte.WPF.ViewModels\r\n{\r\n    /// <summary>\r\n    /// ViewModel de la vue ListeCartes\r\n    /// </summary>\r\n    public class ListeCartesVM : BaseVM\r\n    {\r\n        #region D\xe9pendances\r\n        private readonly ICarteService _carteService;\r\n        #endregion\r\n\r\n        #region Attributs des propri\xe9t\xe9s\r\n        private List<CarteDetailModel> _lstCartes;\r\n        private CarteDetailModel? _carteSelection;\r\n        private bool _estEnTravail = false;\r\n        #endregion\r\n\r\n        public ListeCartesVM(ICarteService carteService)\r\n        {\r\n            _carteService = carteService;\r\n            \r\n            ObtenirListeCommande = new AsyncRelayCommand(ObtenirListeAsync);\r\n        }\r\n\r\n        #region M\xe9thodes des commandes\r\n        /// <summary>\r\n        /// Obtenir la liste de cat\xe9gories du service\r\n        /// </summary>    \r\n        private async Task ObtenirListeAsync()\r\n        {\r\n            EstEnTravail = true;\r\n\r\n            ListeCartes = await _carteService.ObtenirListeCarteDetailAsync();\r\n\r\n            EstEnTravail = false;\r\n        }\r\n        #endregion\r\n\r\n        #region Commandes\r\n        public IAsyncRelayCommand ObtenirListeCommande { get; set; }\r\n        #endregion\r\n\r\n        #region Propri\xe9t\xe9s li\xe9es\r\n        public bool EstEnTravail\r\n        {\r\n            get\r\n            {\r\n                return _estEnTravail;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _estEnTravail, value);\r\n            }\r\n        }\r\n\r\n        public List<CarteDetailModel> ListeCartes\r\n        {\r\n            get\r\n            {\r\n                return _lstCartes;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _lstCartes, value);\r\n            }\r\n        }\r\n\r\n        public CarteDetailModel? CarteSelection\r\n        {\r\n            get\r\n            {\r\n                return _carteSelection;\r\n            }\r\n            set\r\n            {\r\n                SetProperty(ref _carteSelection, value);\r\n            }\r\n        }\r\n        #endregion\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Il y a beaucoup de similitudes entre ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"})," et ",(0,i.jsx)(n.strong,{children:"ListeCartesVM"}),". Il serait possible de g\xe9n\xe9raliser une bonne partie de la logique avec une classe parent g\xe9n\xe9rique du type ",(0,i.jsx)(n.strong,{children:"BaseListeVM"}),". Par contre, ce concept ne sera pas pr\xe9sent\xe9."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc9galement, dans ce ",(0,i.jsx)(n.strong,{children:"ViewModel"}),", il y a des ",(0,i.jsx)(n.strong,{children:"#region"})," utilis\xe9es pour classer les diff\xe9rentes sections. Les ",(0,i.jsx)(n.strong,{children:"ViewModel"})," peuvent devenir assez gros selon la complexit\xe9 de la vue. Le classement des diff\xe9rentes sections peut aider."]}),"\n",(0,i.jsx)(n.h4,{id:"enregistrer-le-viewmodel---scviewmodelextensions-3",children:"Enregistrer le ViewModel - SCViewModelExtensions"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"SCViewModelExtensions"}),", il faut enregistrer le ",(0,i.jsx)(n.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public static void EnregistrerViewModels(this IServiceCollection services)\r\n{\r\n    services.AddTransient<MainWindowVM>();\r\n    services.AddTransient<ListeCategoriesVM>();\r\n    services.AddTransient<ListeCartesVM>();\r\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-du-fichier-ressource---resuclistecartes",children:"Cr\xe9ation du fichier ressource - ResUcListeCartes"}),"\n",(0,i.jsxs)(n.p,{children:["G\xe9n\xe9ralement, la conception de la ",(0,i.jsx)(n.strong,{children:"Vue"})," et du fichier ressource se fait en parall\xe8le. \xc0 chaque \xe9l\xe9ment qu'il faut faire un libell\xe9, il faut cr\xe9er un \xe9l\xe9ment dans le fichier ressource."]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(n.strong,{children:"ResListeCartes.resx"}),"."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Nom"}),(0,i.jsx)(n.th,{children:"Valeur"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Titre"}),(0,i.jsx)(n.td,{children:"Liste des cartes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_CarteId"}),(0,i.jsx)(n.td,{children:"Id"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Nom"}),(0,i.jsx)(n.td,{children:"Nom"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Vie"}),(0,i.jsx)(n.td,{children:"Vie"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Armure"}),(0,i.jsx)(n.td,{children:"Armure"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Attaque"}),(0,i.jsx)(n.td,{children:"Attaque"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_EstRare"}),(0,i.jsx)(n.td,{children:"Rare"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_PrixRevente"}),(0,i.jsx)(n.td,{children:"Prix de revente"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_CategorieNom"}),(0,i.jsx)(n.td,{children:"Cat\xe9gorie"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_EnsembleNom"}),(0,i.jsx)(n.td,{children:"Ensemble"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,i.jsx)(n.strong,{children:"ResListeCartes.en.resx"}),"."]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Nom"}),(0,i.jsx)(n.th,{children:"Valeur"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Titre"}),(0,i.jsx)(n.td,{children:"Card List"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_CarteId"}),(0,i.jsx)(n.td,{children:"Id"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Nom"}),(0,i.jsx)(n.td,{children:"Name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Vie"}),(0,i.jsx)(n.td,{children:"Health"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Armure"}),(0,i.jsx)(n.td,{children:"Armor"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_Attaque"}),(0,i.jsx)(n.td,{children:"Attack"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_EstRare"}),(0,i.jsx)(n.td,{children:"Rare"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_PrixRevente"}),(0,i.jsx)(n.td,{children:"Resale price"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_CategorieNom"}),(0,i.jsx)(n.td,{children:"Category"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Col_EnsembleNom"}),(0,i.jsx)(n.td,{children:"Set"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"cr\xe9ation-de-la-vue---uclistecartesxaml",children:"Cr\xe9ation de la vue - UcListeCartes.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Cr\xe9ez un ",(0,i.jsx)(n.strong,{children:"Contr\xf4le utilisateur (WPF)"})," nomm\xe9 ",(0,i.jsx)(n.strong,{children:"UcListeCartes.xaml"})," dans le dossier ",(0,i.jsx)(n.strong,{children:"Views"}),". Le mod\xe8le se retrouve dans la section ",(0,i.jsx)(n.strong,{children:"WPF"})," \xe0 gauche."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCartes"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCartes"             \r\n             d:DataContext="{d:DesignInstance vm:ListeCartesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="{lex:Loc Titre}"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCartes}"\r\n                  SelectedItem="{Binding CarteSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="{lex:Loc Col_CarteId}"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CarteId}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Nom}"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Vie}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Vie}"/>\r\n                \r\n                <DataGridTextColumn Header="{lex:Loc Col_Armure}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Armure}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Attaque}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Attaque}"/>\r\n\r\n                <DataGridCheckBoxColumn Header="{lex:Loc Col_EstRare}" \r\n                                        MinWidth="50"                                    \r\n                                        Binding="{Binding EstRare}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_PrixRevente}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_CategorieNom}" \r\n                                    MinWidth="250"                                    \r\n                                    Binding="{Binding CategorieNom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_EnsembleNom}" \r\n                                    MinWidth="250"       \r\n                                    Width="*"\r\n                                    Binding="{Binding EnsembleNom}"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"DataGrid"})," n'a pas besoin d'afficher le ",(0,i.jsx)(n.strong,{children:"Id"})," des cl\xe9s \xe9trang\xe8res, donc il n'y a pas de colonne pour ceci."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc9galement, la convention pour un bool\xe9en est d'utiliser un ",(0,i.jsx)(n.strong,{children:"DataGridCheckBoxColumn"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Pour la colonne ",(0,i.jsx)(n.strong,{children:"PrixRevente"}),", il y a un format d'appliquer dans la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"Binding"}),". Il faut s'assurer que le prix a toujours 2 d\xe9cimales."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Dans le fichier ",(0,i.jsx)(n.strong,{children:"UcListeCartes.xaml.cs"}),", il faut ajouter l'\xe9v\xe9nement pour le chargement automatique."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"private async void UserControl_Loaded(object sender, RoutedEventArgs e)\r\n {\r\n     if (this.DataContext != null)\r\n     {\r\n         if (this.DataContext is ListeCartesVM)\r\n         {\r\n             await ((ListeCartesVM)this.DataContext).ObtenirListeCommande.ExecuteAsync(null);\r\n         }\r\n     }\r\n }\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ajout-de-la-ressource-pour-cr\xe9er-le-lien-entre-viewmodel-et-vue---mainwindowxaml-2",children:"Ajout de la ressource pour cr\xe9er le lien entre ViewModel et Vue - MainWindow.xaml"}),"\n",(0,i.jsxs)(n.p,{children:["Il faut ajouter dans les ressources le lien entre le ",(0,i.jsx)(n.strong,{children:"ViewModel"})," et la ",(0,i.jsx)(n.strong,{children:"Vue"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"  \r\n        xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n        xmlns:v="clr-namespace:SuperCarte.WPF.Views"                \r\n        mc:Ignorable="d"         \r\n        d:DataContext="{d:DesignInstance Type=vm:MainWindowVM}"\r\n        Title="Super Carte App" \r\n        Height="450" Width="800" WindowState="Maximized">\r\n    <Window.Resources>\r\n        \x3c!--Assignation du ViewModel \xe0 Vue--\x3e\r\n        <DataTemplate DataType="{x:Type TypeName=vm:HelloWorldVM}">\r\n            \x3c!--\xc0 retirer \xe9ventuellement--\x3e\r\n            <v:UcHelloWorld />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCategoriesVM}">\r\n            <v:UcListeCategories />\r\n        </DataTemplate>\r\n        <DataTemplate DataType="{x:Type TypeName=vm:ListeCartesVM}">\r\n            <v:UcListeCartes />\r\n        </DataTemplate>\r\n    </Window.Resources>\r\n    <Grid>\r\n        <ContentControl  Content="{Binding VMActif}" />\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["La ligne 19 \xe0 21 indique que lorsque le ",(0,i.jsx)(n.strong,{children:"DataContext"})," est de type ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"})," (ligne 19), il faut utiliser le contr\xf4le utilisateur ",(0,i.jsx)(n.strong,{children:"UcListeCategories"})," (ligne 20)."]}),"\n",(0,i.jsxs)(n.p,{children:["La ligne 22  \xe0 24 indique que lorsque le ",(0,i.jsx)(n.strong,{children:"DataContext"})," est de type ",(0,i.jsx)(n.strong,{children:"ListeCartesVM"})," (ligne 19), il faut utiliser le contr\xf4le utilisateur ",(0,i.jsx)(n.strong,{children:"UcListeCartes"})," (ligne 23)."]}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 la ligne 27, lorsque le ",(0,i.jsx)(n.strong,{children:"Content"})," du ",(0,i.jsx)(n.strong,{children:"ContentControl"})," sera un ",(0,i.jsx)(n.strong,{children:"ViewModel"})," de la liste des ressources, il chargera le contr\xf4le utilisateur correspondant."]}),"\n",(0,i.jsx)(n.h4,{id:"test---mainwindowvm-1",children:"Test - MainWindowVM"}),"\n",(0,i.jsxs)(n.p,{children:["Dans la classe ",(0,i.jsx)(n.strong,{children:"MainWindowVM.cs"}),", il faut assigner ",(0,i.jsx)(n.strong,{children:"ListeCategoriesVM"})," \xe0 la propri\xe9t\xe9 ",(0,i.jsx)(n.strong,{children:"VMActif"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.ViewModels;\r\n\r\npublic class MainWindowVM : BaseVM\r\n{    \r\n    public MainWindowVM(IServiceProvider serviceProvider)\r\n\t{   \r\n        //S\xe9lectionner le ViewModel de d\xe9marrage\r\n        VMActif = serviceProvider.GetRequiredService<ListeCartesVM>();\r\n    }\r\n\r\n    public BaseVM VMActif { get; set; }    \r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"D\xe9marrez l'application."}),"\n",(0,i.jsx)(n.h4,{id:"alignement-\xe0-droite-des-nombres",children:"Alignement \xe0 droite des nombres"}),"\n",(0,i.jsx)(n.p,{children:"Dans une grille, les nombres sont g\xe9n\xe9ralement align\xe9s \xe0 droite pour faciliter la lecture."}),"\n",(0,i.jsx)(n.p,{children:"Pour \xeatre en mesure de le faire, il faut ajouter un style dans la d\xe9finition de la colonne."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<DataGridTextColumn Header="{lex:Loc Col_Vie}" \r\n                    MinWidth="50"                                    \r\n                    Binding="{Binding Vie}">\r\n    <DataGridTextColumn.ElementStyle>\r\n        <Style>\r\n            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n        </Style>\r\n    </DataGridTextColumn.ElementStyle>\r\n</DataGridTextColumn>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["La balise ",(0,i.jsx)(n.strong,{children:"<DataGridTextColumn.ElementStyle>"})," permet de sp\xe9cifier le style pour le contenu de la colonne."]}),"\n",(0,i.jsxs)(n.p,{children:["Il est important de mettre ",(0,i.jsx)(n.strong,{children:"Control."})," dans la propri\xe9t\xe9 pour indiquer que la valeur s'applique au contenu de la cellule au complet. Il est possible de faire des cellules avanc\xe9es avec plusieurs sous-contr\xf4les dans son contenu. Il serait possible d'appliquer un style \xe0 seulement un des \xe9l\xe9ments de la cellule."]}),"\n",(0,i.jsx)(n.p,{children:"Voici le fichier au complet."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xaml",children:'<UserControl x:Class="SuperCarte.WPF.Views.UcListeCartes"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" \r\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" \r\n             xmlns:local="clr-namespace:SuperCarte.WPF.Views"\r\n             xmlns:vm="clr-namespace:SuperCarte.WPF.ViewModels"\r\n             xmlns:lex="http://wpflocalizeextension.codeplex.com"\r\n             lex:LocalizeDictionary.DesignCulture="fr"\r\n             lex:ResxLocalizationProvider.DefaultAssembly="SuperCarte.WPF"\r\n             lex:ResxLocalizationProvider.DefaultDictionary="ResListeCartes"             \r\n             d:DataContext="{d:DesignInstance vm:ListeCartesVM}"\r\n             mc:Ignorable="d"              \r\n             d:DesignHeight="450" d:DesignWidth="800"\r\n             Loaded="UserControl_Loaded">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            \x3c!--Rang\xe9e 0 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 1 --\x3e\r\n            <RowDefinition Height="auto" />\r\n            \x3c!--Rang\xe9e 2 --\x3e\r\n            <RowDefinition Height="*" />\r\n            \x3c!--Rang\xe9e 3 --\x3e\r\n            <RowDefinition Height="20" />\r\n        </Grid.RowDefinitions>\r\n\r\n        \x3c!--Rang\xe9e 0--\x3e\r\n        <TextBlock \r\n            Grid.Row="0" \r\n            VerticalAlignment="Center" HorizontalAlignment="Center"\r\n            FontSize="16" FontWeight="Bold"\r\n            Text="{lex:Loc Titre}"/>\r\n\r\n        \x3c!--Rang\xe9e 1--\x3e\r\n        <WrapPanel Grid.Row="1" \r\n                    Orientation="Horizontal" VerticalAlignment="Center">\r\n\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Nouveau_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Editer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32" />\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Supprimer_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding SupprimerCommande}"/>\r\n            <Button Content="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Content}" ToolTip="{lex:Loc ResGlobalListeBouton:Bouton_Rafraichir_Tooltip}"\r\n                    Margin="5" Width="32" Height="32"\r\n                    Command="{Binding ObtenirListeCommande}"/>\r\n        </WrapPanel>\r\n\r\n        \x3c!--Rang\xe9e 2--\x3e\r\n        <DataGrid Grid.Row="2" \r\n                  AutoGenerateColumns="False"\r\n                  SelectionMode="Single" IsReadOnly="True"\r\n                  ItemsSource="{Binding ListeCartes}"\r\n                  SelectedItem="{Binding CarteSelection}">\r\n            <DataGrid.Columns>\r\n                <DataGridTextColumn Header="{lex:Loc Col_CarteId}"\r\n                                    MinWidth="50"\r\n                                    Binding="{Binding CarteId}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Nom}"\r\n                                    MinWidth="300"\r\n                                    Binding="{Binding Nom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Vie}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Vie}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Armure}" \r\n                                    MinWidth="50"                                    \r\n                                    Binding="{Binding Armure}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_Attaque}" \r\n                                    MinWidth="50"                               \r\n                                    Binding="{Binding Attaque}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>\r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridCheckBoxColumn Header="{lex:Loc Col_EstRare}" \r\n                                        MinWidth="50"                                    \r\n                                        Binding="{Binding EstRare}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_PrixRevente}" \r\n                                    MinWidth="50"                                   \r\n                                    Binding="{Binding PrixRevente, StringFormat=\\{0:N2\\}}">\r\n                    <DataGridTextColumn.ElementStyle>\r\n                        <Style>                            \r\n                            <Setter Property="Control.HorizontalAlignment" Value="Right"/>\r\n                        </Style>\r\n                    </DataGridTextColumn.ElementStyle>\r\n                </DataGridTextColumn>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_CategorieNom}" \r\n                                    MinWidth="250"                                    \r\n                                    Binding="{Binding CategorieNom}"/>\r\n\r\n                <DataGridTextColumn Header="{lex:Loc Col_EnsembleNom}" \r\n                                    MinWidth="250"       \r\n                                    Width="*"\r\n                                    Binding="{Binding EnsembleNom}"/>\r\n\r\n            </DataGrid.Columns>\r\n        </DataGrid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var i=r(7294);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);