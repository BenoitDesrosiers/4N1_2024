"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[6485],{6323:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=n(5893),a=n(1151);const t={sidebar_position:340,draft:!1},s="Validation",l={id:"WPF partie 3/validation",title:"Validation",description:"Avant d'ajouter ou de modifier un \xe9l\xe9ment dans la base de donn\xe9es, il faut v\xe9rifier si les valeurs sont valides.",source:"@site/docs/74-WPF partie 3/validation.md",sourceDirName:"74-WPF partie 3",slug:"/WPF partie 3/validation",permalink:"/4N1_2024/docs/WPF partie 3/validation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:340,frontMatter:{sidebar_position:340,draft:!1},sidebar:"NotesSidebar",previous:{title:"Chargement automatique",permalink:"/4N1_2024/docs/WPF partie 3/chargement_initial"},next:{title:"Localisation du code .cs",permalink:"/4N1_2024/docs/WPF partie 3/localisation"}},o={},d=[{value:"SuperCarte.Core",id:"supercartecore",level:2},{value:"Installation de la librairie",id:"installation-de-la-librairie",level:3},{value:"Cr\xe9ation du mod\xe8le de validation - ValidationModel",id:"cr\xe9ation-du-mod\xe8le-de-validation---validationmodel",level:3},{value:"M\xe9thode d&#39;extension - ValidationModelExtension",id:"m\xe9thode-dextension---validationmodelextension",level:3},{value:"Cr\xe9ation du validateur - CategorieValidateur",id:"cr\xe9ation-du-validateur---categorievalidateur",level:3},{value:"Modification du service - CategorieService",id:"modification-du-service---categorieservice",level:3},{value:"SuperCarte.WPF",id:"supercartewpf",level:2},{value:"Enregistrement du validateur - SCValidateurExtensions",id:"enregistrement-du-validateur---scvalidateurextensions",level:3},{value:"Modification du BaseVM - Ajouter l&#39;interface INotifyDataErrorInfo",id:"modification-du-basevm---ajouter-linterface-inotifydataerrorinfo",level:3},{value:"Modification du ViewModel - GestionCategorieVM",id:"modification-du-viewmodel---gestioncategorievm",level:3},{value:"Ajout d&#39;un template dans les ressources",id:"ajout-dun-template-dans-les-ressources",level:3},{value:"Propri\xe9t\xe9 MaxLength - UcGestionCategorie.xaml",id:"propri\xe9t\xe9-maxlength---ucgestioncategoriexaml",level:3}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"validation",children:"Validation"}),"\n",(0,i.jsx)(r.p,{children:"Avant d'ajouter ou de modifier un \xe9l\xe9ment dans la base de donn\xe9es, il faut v\xe9rifier si les valeurs sont valides."}),"\n",(0,i.jsx)(r.p,{children:"La validation est un service sp\xe9cialis\xe9. Le service principal utilisera le service de validation avant d'effectuer une cr\xe9ation ou une modification."}),"\n",(0,i.jsxs)(r.p,{children:["Pour faire la validation, la librairie ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"https://docs.fluentvalidation.net/en/latest/",children:"FluentValidation"})})," sera utilis\xe9e."]}),"\n",(0,i.jsxs)(r.p,{children:["Chaque propri\xe9t\xe9 peut avoir une seule erreur. D\xe8s qu'une erreur est rencontr\xe9e pour une propri\xe9t\xe9, il faut arr\xeater la validation de cette propri\xe9t\xe9. ",(0,i.jsx)(r.strong,{children:"WPF"})," permet la gestion de plusieurs erreurs par propri\xe9t\xe9, mais son affichage est complexe."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour plus d'information sur la librairie : ",(0,i.jsx)(r.a,{href:"https://docs.fluentvalidation.net/en/latest/",children:"https://docs.fluentvalidation.net/en/latest/"})]}),"\n",(0,i.jsx)(r.h2,{id:"supercartecore",children:"SuperCarte.Core"}),"\n",(0,i.jsx)(r.h3,{id:"installation-de-la-librairie",children:"Installation de la librairie"}),"\n",(0,i.jsxs)(r.p,{children:["Dans la ",(0,i.jsx)(r.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,i.jsx)(r.strong,{children:"Projet par d\xe9faut"})," ",(0,i.jsx)(r.strong,{children:".Core"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,i.jsx)(r.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Install-Package FluentValidation\n"})}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-mod\xe8le-de-validation---validationmodel",children:"Cr\xe9ation du mod\xe8le de validation - ValidationModel"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut une classe pour contenir le r\xe9sultat d'une validation. Il serait possible de prendre celle de ",(0,i.jsx)(r.strong,{children:"FluentValidation"}),", mais l'application aurait une d\xe9pendance directe avec la librairie. En cr\xe9ant une classe propre au programme, il est possible d'avoir une ",(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Facade_pattern",children:"fa\xe7ade"})})," entre la validation et les autres couches de l'application."]}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"ValidationModel"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Core/Models"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'namespace SuperCarte.Core.Models;\r\n\r\n/// <summary>\r\n/// Classe qui contient l\'information de la validation\r\n/// </summary>\r\npublic class ValidationModel\r\n{\r\n    public ValidationModel()\r\n    {\r\n        ErreurParPropriete = new Dictionary<string, string>();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Assigner une erreur pour une propri\xe9t\xe9 du mod\xe8le\r\n    /// </summary>\r\n    /// <param name="propriete">Nom de la propri\xe9t\xe9</param>\r\n    /// <param name="erreur">Message d\'erreur</param>\r\n    public void AssignerErreur(string propriete, string erreur)\r\n    {\r\n        if(ErreurParPropriete.ContainsKey(propriete) == false)\r\n        {\r\n            ErreurParPropriete.Add(propriete, erreur);\r\n        }\r\n        else\r\n        {\r\n            ErreurParPropriete[propriete] = erreur;\r\n        }\r\n    } \r\n    \r\n    public Dictionary<string, string> ErreurParPropriete { get; private set; }\r\n\r\n    public bool EstValide\r\n    {\r\n        get\r\n        {\r\n            return !ErreurParPropriete.Any();\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"m\xe9thode-dextension---validationmodelextension",children:"M\xe9thode d'extension - ValidationModelExtension"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut cr\xe9er une m\xe9thode d'extension pour passer de ",(0,i.jsx)(r.strong,{children:"ValidationResult"})," qui provient de la librairie ",(0,i.jsx)(r.strong,{children:"FluentValidation"})," \xe0 ",(0,i.jsx)(r.strong,{children:"ValidationModel"}),"."]}),"\n",(0,i.jsx)(r.admonition,{title:"Attention",type:"warning",children:(0,i.jsxs)(r.p,{children:["La classe ",(0,i.jsx)(r.strong,{children:"ValidationResult"})," se retrouve dans plusieurs ",(0,i.jsx)(r.strong,{children:"namespace"}),". Assurez-vous d'utiliser celle de ",(0,i.jsx)(r.strong,{children:"FluentValidation.Results;"})]})}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"ValidationModelExtension"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Core/Extensions"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using FluentValidation.Results;\r\nusing SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Extensions;\r\n\r\n/// <summary>\r\n/// Classe statique qui regroupe les m\xe9thodes d\'extension pour la conversion (mapping) du mod\xe8le ValidationModel\r\n/// </summary>\r\npublic static class ValidationModelExtension\r\n{\r\n    /// <summary>\r\n    /// Convertir un objet ValidationResult vers un objet ValidationModel\r\n    /// </summary>\r\n    /// <param name="validationResult">Objet \xe0 convertir</param>\r\n    /// <returns>Objet converti</returns>\r\n    public static ValidationModel VersValidationModel(this ValidationResult validationResult)\r\n    {\r\n        ValidationModel validationModel = new ValidationModel();\r\n\r\n        if (validationResult.IsValid == false)\r\n        {\r\n            foreach(var erreur in validationResult.Errors)\r\n            {\r\n                validationModel.AssignerErreur(erreur.PropertyName, erreur.ErrorMessage);\r\n            }\r\n        }\r\n        return validationModel;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"cr\xe9ation-du-validateur---categorievalidateur",children:"Cr\xe9ation du validateur - CategorieValidateur"}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez l'interface ",(0,i.jsx)(r.strong,{children:"IValidateur.cs"})," dans le dossier ",(0,i.jsx)(r.strong,{children:"Validateurs"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"L'interface est g\xe9n\xe9rique. Les validateurs auront tous la m\xeame interface, il est donc possible de la g\xe9n\xe9raliser en fonction du mod\xe8le \xe0 valider."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Models;\r\nnamespace SuperCarte.Core.Validateurs;\r\n\r\n/// <summary>\r\n/// Interface qui valide un mod\xe8le du domaine\r\n/// </summary>\r\n/// <typeparam name="TModele">Type du mod\xe8le du domaine \xe0 valider</typeparam>\r\npublic interface IValidateur<TModele> where TModele : class\r\n{\r\n    /// <summary>\r\n    /// Valider un objet du mod\xe8le du domaine\r\n    /// </summary>\r\n    /// <param name="modele">Mod\xe8le \xe0 valider</param>\r\n    /// <returns>R\xe9sultat de la validation</returns>\r\n    Task<ValidationModel> ValiderAsync(TModele modele);\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez la classe ",(0,i.jsx)(r.strong,{children:"CategorieValidateur.cs"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 11, la classe impl\xe9mente l'interface ",(0,i.jsx)(r.strong,{children:"IValidateur"})," en sp\xe9cifiant le mod\xe8le \xe0 valider. \xc0 la ligne 25, la m\xe9thode \xe0 impl\xe9menter est sp\xe9cifiquement pour ",(0,i.jsx)(r.strong,{children:"CategorieModel"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["La classe doit \xe9galement h\xe9riter de la classe ",(0,i.jsx)(r.strong,{children:"AbstractValidator"})," qui provient de la librairie ",(0,i.jsx)(r.strong,{children:"FluentValidation"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Dans le constructeur, il faut appliquer les r\xe8gles de validation pour chacune des propri\xe9t\xe9s du mod\xe8le."}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"FluentValidation"})," utilise un ",(0,i.jsx)(r.strong,{children:"API Fluent"})," par des m\xe9thodes chain\xe9es."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using FluentValidation;\r\nusing FluentValidation.Results;\r\nusing SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\n\r\nnamespace SuperCarte.Core.Validateurs;\r\n\r\n/// <summary>\r\n/// Classe qui valide le mod\xe8le CategorieModel\r\n/// </summary>\r\npublic class CategorieValidateur : AbstractValidator<CategorieModel>, IValidateur<CategorieModel>\r\n{\r\n    public CategorieValidateur()\r\n    {\r\n        RuleFor(i => i.Nom).Cascade(CascadeMode.Stop)\r\n            .NotNull().WithMessage("Le nom est obligatoire.")\r\n            .NotEmpty().WithMessage("Le nom est obligatoire.")\r\n            .MaximumLength(35).WithMessage("Le nom doit avoir 35 caract\xe8res au maximum.");\r\n\r\n\r\n        RuleFor(i => i.Description).Cascade(CascadeMode.Stop)\r\n            .MaximumLength(50).WithMessage("La description doit avoir 50 caract\xe8res au maximum.");\r\n    }\r\n\r\n    public async Task<ValidationModel> ValiderAsync(CategorieModel modele)\r\n    {\r\n        ValidationResult validationResult = await base.ValidateAsync(modele);\r\n\r\n        return validationResult.VersValidationModel();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.p,{children:"Voici le fonctionnement:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["La premi\xe8re \xe9tape consiste \xe0 indiquer la propri\xe9t\xe9 dans la m\xe9thode ",(0,i.jsx)(r.strong,{children:"RuleFor"})," (ligne 15)."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Ensuite, il faut indiquer la r\xe8gle de ",(0,i.jsx)(r.strong,{children:"Cascase"}),". Lorsque la valeur est ",(0,i.jsx)(r.strong,{children:"CascadeMode.Stop"}),", la validation s'arr\xeate d\xe8s qu'il y a une erreur."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["Ensuite il faut appliquer chacune des r\xe8gles. Il existe plusieurs m\xe9thodes internes. Lisez la documentation pour voir les diff\xe9rentes m\xe9thodes disponibles. Le premi\xe8re r\xe8gle est la validation ",(0,i.jsx)(r.strong,{children:"NotNull()"})," (ligne 16). La m\xe9thode ",(0,i.jsx)(r.strong,{children:"WithMessage()"})," permet de sp\xe9cifier le message d'erreur. Si ce n'est pas sp\xe9cifi\xe9, ce sera un message g\xe9n\xe9rique et en anglais."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Il est aussi possible d'ajouter des validations personnalis\xe9e."}),"\n",(0,i.jsx)(r.p,{children:"Par exemple, la validation pour Null et Empty se fait sur 2 lignes qui retourne la m\xeame erreur. Il serait mieux de faire cette double validation en une seule fois. Nous allons donc cr\xe9er une validation personnalis\xe9e qui fait les 2 choses en m\xeame temps."}),"\n",(0,i.jsxs)(r.p,{children:["Pour faire une validation personnalis\xe9e, il faut utiliser la m\xe9thode de validation ",(0,i.jsx)(r.strong,{children:"Must()"})," et indiquer la m\xe9thode de validation. La m\xe9thode de validation doit recevoir un param\xe8tre du type de la propri\xe9t\xe9 et doit retourner un bool\xe9en."]}),"\n",(0,i.jsxs)(r.p,{children:["Ici, nous ajoutons ",(0,i.jsx)(r.strong,{children:"ValiderStringObligatoire"})," et l'appelons \xe0 la ligne 4."]}),"\n",(0,i.jsx)(r.p,{children:"Changer la m\xe9thode pour celle-ci:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'public CategorieValidateur()\r\n{\r\n    RuleFor(i => i.Nom).Cascade(CascadeMode.Stop)\r\n        .Must(ValiderStringObligatoire).WithMessage("Le nom est obligatoire.")                        \r\n        .MaximumLength(35).WithMessage("Le nom doit avoir 35 caract\xe8res au maximum.");\r\n\r\n    RuleFor(i => i.Description).Cascade(CascadeMode.Stop)\r\n        .MaximumLength(50).WithMessage("La description doit avoir 50 caract\xe8res au maximum.");\r\n}\r\n\r\n/// <summary>\r\n/// Valider une chaine de caract\xe8re qui est obligatoire\r\n/// </summary>\r\n/// <param name="valeur">Chaine \xe0 valider</param>\r\n/// <returns>Vrai si valide, faux si non valide</returns>\r\nprivate bool ValiderStringObligatoire(string valeur)\r\n{\r\n\treturn !string.IsNullOrWhiteSpace(valeur);\r\n}\n'})}),"\n",(0,i.jsx)(r.admonition,{type:"tip",children:(0,i.jsxs)(r.p,{children:["La m\xe9thode ",(0,i.jsx)(r.strong,{children:"ValiderObligatoire()"})," est une m\xe9thode qui risque d'\xeatre r\xe9utilis\xe9e souvent. Il serait int\xe9ressant de cr\xe9er une classe ",(0,i.jsx)(r.strong,{children:"BaseValidateur"})," et y int\xe9grer les m\xe9thodes r\xe9utilisables."]})}),"\n",(0,i.jsx)(r.h3,{id:"modification-du-service---categorieservice",children:"Modification du service - CategorieService"}),"\n",(0,i.jsx)(r.p,{children:"Il faut modifier le service pour \xeatre en mesure de faire une validation et d'am\xe9liorer les m\xe9thodes ajouter et modifier afin de faire une validation au pr\xe9alable."}),"\n",(0,i.jsxs)(r.p,{children:["Dans l'interface ",(0,i.jsx)(r.strong,{children:"ICategorieService"}),", ajoutez la signature de m\xe9thode ci-dessous."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'/// <summary>\r\n/// Valider le mod\xe8le\r\n/// </summary>\r\n/// <param name="categorieModel">CategorieModel \xe0 valider</param>\r\n/// <returns>R\xe9sultat de validation</returns>\r\nTask<ValidationModel> ValiderAsync(CategorieModel categorieModel);\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"CategorieService"}),", il faut injecter le validateur (ligne 15, 22, et 25)."]}),"\n",(0,i.jsxs)(r.p,{children:["Ensuite, il faut ajouter la m\xe9thode ",(0,i.jsx)(r.strong,{children:"ValiderAsync()"})," (ligne 122)."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour la m\xe9thode ",(0,i.jsx)(r.strong,{children:"AjouterAsync()"}),", il faut valider avant de faire l'enregistrement (ligne 61 ) afin d'\xe9viter les exceptions inutiles. Si l'objet n'est pas valide, il faut retourner ",(0,i.jsx)(r.strong,{children:"false"})," pour indiquer que l'ajout n'a pas \xe9t\xe9 fait (ligne 74-77)."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour la m\xe9thode ",(0,i.jsx)(r.strong,{children:"ModifierAsync()"}),", il faut aussi valider avant de faire l'enregistrement (ligne 98). afin d'\xe9viter les exceptions inutiles. Si l'objet n'est pas valide, il faut retourner ",(0,i.jsx)(r.strong,{children:"false"})," pour indiquer que l'ajout n'a pas \xe9t\xe9 fait (ligne 114-119)."]}),"\n",(0,i.jsxs)(r.p,{children:["Remplacez ",(0,i.jsx)(r.strong,{children:"CategoriService.cs"})," par ce code:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using SuperCarte.Core.Extensions;\r\nusing SuperCarte.Core.Models;\r\nusing SuperCarte.Core.Repositories;\r\nusing SuperCarte.Core.Validateurs;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Services;\r\n\r\n/// <summary>\r\n/// Classe qui contient les services du mod\xe8le Categorie\r\n/// </summary>\r\npublic class CategorieService : ICategorieService\r\n{\r\n    private readonly ICategorieRepo _categorieRepo;\r\n    //highlight-next-line\r\n    private readonly IValidateur<CategorieModel> _validateur;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="categorieRepo">Repository Categorie</param>\r\n    //highlight-next-line\r\n    /// <param name="validateur">Validateur Categorie</param>\r\n    //highlight-next-line\r\n    public CategorieService(ICategorieRepo categorieRepo, IValidateur<CategorieModel> validateur)\r\n    {\r\n        _categorieRepo = categorieRepo;\r\n        //highlight-next-line\r\n        _validateur = validateur;\r\n    }\r\n\r\n    public async Task<List<CategorieModel>> ObtenirListeAsync()\r\n    {\r\n        return (await _categorieRepo.ObtenirListeAsync()).VersCategorieModel();\r\n    }\r\n\r\n    public CategorieDependance? ObtenirDependance(int categorieId)\r\n    {\r\n        return _categorieRepo.ObtenirDependance(categorieId);\r\n    }    \r\n\r\n    public async Task SupprimerAsync(int categorieId)\r\n    {\r\n        CategorieDependance? categorieDependance = await _categorieRepo.ObtenirDependanceAsync(categorieId);\r\n\r\n        if(categorieDependance != null)\r\n        {\r\n            if(categorieDependance.NbCartes == 0)\r\n            {\r\n                await _categorieRepo.SupprimerParCleAsync(categorieId, true);\r\n            }\r\n            else\r\n            {\r\n                throw new Exception("La cat\xe9gorie a des d\xe9pendances. Impossible \xe0 supprimer.");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            throw new Exception("La cat\xe9gorie n\'existe pas dans la base de donn\xe9es.");\r\n        }\r\n    }\r\n\r\n    public async Task<bool> AjouterAsync(CategorieModel categorieModel)\r\n    {\r\n        //highlight-next-line\r\n        if ((await _validateur.ValiderAsync(categorieModel)).EstValide == true)\r\n        {\r\n            //Transformation de l\'objet du mod\xe8le du domaine en objet du mod\xe8le de donn\xe9es\r\n            Categorie categorie = categorieModel.VersCategorie();\r\n\r\n            //Ajout dans repository avec enregistrement imm\xe9diat\r\n            await _categorieRepo.AjouterAsync(categorie, true);\r\n\r\n            //Assigne les valeurs de la base de donn\xe9es dans l\'objet du mod\xe8le\r\n            categorieModel.Copie(categorie, true);\r\n\r\n            return true;\r\n        }\r\n        //highlight-start\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n        //highlight-end\r\n    }\r\n\r\n    public async Task<CategorieModel?> ObtenirAsync(int categorieId)\r\n    {\r\n        Categorie? categorie = await _categorieRepo.ObtenirParCleAsync(categorieId);\r\n      \r\n        //Le ?. est important, car si la cat\xe9gorie n\'est pas trouv\xe9e, l\'objet sera null\r\n        return categorie?.VersCategorieModel();\r\n    }\r\n\r\n    public CategorieModel? Obtenir(int categorieId)\r\n    {\r\n        Categorie? categorie = _categorieRepo.ObtenirParCle(categorieId);\r\n\r\n        //Le ?. est important, car si la cat\xe9gorie n\'est pas trouv\xe9e, l\'objet sera null\r\n        return categorie?.VersCategorieModel();\r\n    }\r\n\r\n    public async Task<bool> ModifierAsync(CategorieModel categorieModel)\r\n    {\r\n        //highlight-next-line\r\n        if ((await _validateur.ValiderAsync(categorieModel)).EstValide == true)\r\n        {\r\n            Categorie? categorie = await _categorieRepo.ObtenirParCleAsync(categorieModel.CategorieId);\r\n\r\n            if (categorie != null)\r\n            {\r\n                //Assigner les valeurs dans la cat\xe9gorie\r\n                categorie.Copie(categorieModel);\r\n                await _categorieRepo.EnregistrerAsync();\r\n                //Assigne les valeurs de la base de donn\xe9es dans l\'objet du mod\xe8le\r\n                categorieModel.Copie(categorie, false);\r\n            }\r\n            else\r\n            {\r\n                throw new Exception("Impossible de modifier la cat\xe9gorie. Aucune cat\xe9gorie trouv\xe9e avec la cl\xe9 primaire.");\r\n            }\r\n//highlight-start\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n//highlight-end\r\n    }\r\n\r\n//highlight-start\r\n    public async Task<ValidationModel> ValiderAsync(CategorieModel categorieModel)\r\n    {\r\n        return await _validateur.ValiderAsync(categorieModel);\r\n    }\r\n//highlight-end\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"supercartewpf",children:"SuperCarte.WPF"}),"\n",(0,i.jsx)(r.h3,{id:"enregistrement-du-validateur---scvalidateurextensions",children:"Enregistrement du validateur - SCValidateurExtensions"}),"\n",(0,i.jsxs)(r.p,{children:["Dans la classe ",(0,i.jsx)(r.strong,{children:"Extensions/ServiceCollections/SCValidateurExtensions"}),", il faut enregistrer le validateur."]}),"\n",(0,i.jsx)(r.p,{children:"Remarquez que l'interface utilis\xe9e est la g\xe9n\xe9rique. Dans ce cas-ci il est possible de le faire, car le validateur n'aura pas d'autres m\xe9thodes publiques que celles de l'interface."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"using Microsoft.Extensions.DependencyInjection;\r\nusing SuperCarte.Core.Validateurs;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Validateur\r\n/// </summary>\r\npublic static class SCValidateurExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les validateurs de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerValidateurs(this IServiceCollection services)\r\n    {\r\n        //highlight-next-line\r\n        services.AddScoped<IValidateur<CategorieModel>, CategorieValidateur>();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"modification-du-basevm---ajouter-linterface-inotifydataerrorinfo",children:"Modification du BaseVM - Ajouter l'interface INotifyDataErrorInfo"}),"\n",(0,i.jsxs)(r.p,{children:["Pour \xeatre en mesure d'indiquer \xe0 la vue qu'il y a des erreurs, il faut impl\xe9menter l'interface ",(0,i.jsx)(r.strong,{children:"INotifyDataErrorInfo"}),". La librairie ",(0,i.jsx)(r.strong,{children:"MVVM Toolkit"})," poss\xe8de une classe ",(0,i.jsx)(r.strong,{children:"ValidationObject"})," qui impl\xe9mente cette interface, mais il est difficile d'y int\xe9grer ",(0,i.jsx)(r.strong,{children:"FluentValidation"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Pour cette raison, il faut impl\xe9menter cette interface dans la classe ",(0,i.jsx)(r.strong,{children:"ViewModels/Base/BaseVM"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Premi\xe8rement, il y a un dictionnaire de type ",(0,i.jsx)(r.strong,{children:"<string,List <string>>"})," (ligne 16). La cl\xe9 du dictionnaire est le nom de la propri\xe9t\xe9 et pour chaque propri\xe9t\xe9, il est possible d'avoir une liste d'erreurs. Par contre, la validation retourne uniquement une erreur par propri\xe9t\xe9 \xe0 la fois. Il faut tout de m\xeame respecter l'impl\xe9mentation de l'interface ",(0,i.jsx)(r.strong,{children:"INotifyDataErrorInfo"})," qui supporte plusieurs erreurs."]}),"\n",(0,i.jsxs)(r.p,{children:["Ensuite, il y a un \xe9v\xe9nement ",(0,i.jsx)(r.strong,{children:"ErrorsChanged"})," ((ligne 15)). Lorsqu'un composant est li\xe9, il \xe9coute cet \xe9v\xe9nement pour voir si sa propri\xe9t\xe9 a une erreur. Le composant appelle la m\xe9thode ",(0,i.jsx)(r.strong,{children:"GetErrors()"})," (ligne 22) pour obtenir la liste d'erreurs."]}),"\n",(0,i.jsxs)(r.p,{children:["La propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"HasErrors"})," (ligne 59) indique s'il y a au moins une propri\xe9t\xe9 en erreur dans le ",(0,i.jsx)(r.strong,{children:"ViewModel"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Ensuite, la fonction ",(0,i.jsx)(r.strong,{children:"AssignerValidation"})," (ligne 43) assigne les erreurs du ",(0,i.jsx)(r.strong,{children:"ValidationModel"})," dans le dictionnaire. Avant de faire l'assignation, il faut effacer la liste au complet."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 55, l'\xe9v\xe9nement ",(0,i.jsx)(r.strong,{children:"OnErrorsChanged"})," est appel\xe9 pour indiquer que la propri\xe9t\xe9 a une erreur."]}),"\n",(0,i.jsxs)(r.p,{children:["La m\xe9thode ",(0,i.jsx)(r.strong,{children:"EffacerErreurs()"})," (ligne 30) permet d'enlever les erreurs. \xc0 la ligne 35, l'\xe9v\xe9nement est appel\xe9 pour indiquer que la propri\xe9t\xe9 n'a plus d'erreur."]}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez la classe ",(0,i.jsx)(r.strong,{children:"BaseVM"})," par le code ci-dessous."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:'using CommunityToolkit.Mvvm.ComponentModel;\r\nusing System.Collections;\r\nusing System.ComponentModel;\r\nusing System.Linq;\r\n\r\nnamespace SuperCarte.WPF.ViewModels.Bases;\r\n\r\n/// <summary>\r\n/// Classe abstraite pour du View Models\r\n/// </summary>\r\npublic abstract class BaseVM : ObservableObject, INotifyDataErrorInfo\r\n{\r\n    //highlight-next-line\r\n    private readonly Dictionary<string, List<string>> _lstErreursParPropriete = new Dictionary<string, List<string>>();\r\n   \r\n    //highlight-next-line\r\n    public event EventHandler<DataErrorsChangedEventArgs>? ErrorsChanged;\r\n    \r\n    private void OnErrorsChanged(string propertyName)\r\n    {\r\n        ErrorsChanged?.Invoke(this, new DataErrorsChangedEventArgs(propertyName));\r\n    }\r\n\r\n    public IEnumerable GetErrors(string? propertyName)\r\n    {\r\n        return _lstErreursParPropriete.GetValueOrDefault(propertyName, null);\r\n    }\r\n\r\n//highlight-start\r\n    /// <summary>\r\n    /// Effacer les erreurs de la vue\r\n    /// </summary>\r\n    protected void EffacerErreurs()\r\n    {\r\n        foreach (string propriete in _lstErreursParPropriete.Keys)\r\n        {\r\n            _lstErreursParPropriete.Remove(propriete);\r\n            OnErrorsChanged(propriete);\r\n        }\r\n    }\r\n//highlight-end\r\n\r\n\r\n//highlight-start\r\n    /// <summary>\r\n    /// Assigner les erreurs \xe0 la vue \xe0 partir de la validation\r\n    /// </summary>\r\n    /// <param name="validationModel">Objet de validation</param>\r\n    protected void AssignerValidation(ValidationModel validationModel)\r\n    {\r\n        EffacerErreurs();\r\n\r\n        foreach (string propriete in validationModel.ErreurParPropriete.Keys)\r\n        {\r\n            if (!_lstErreursParPropriete.ContainsKey(propriete))\r\n            {\r\n                _lstErreursParPropriete.Add(propriete, new List<string>());\r\n            }\r\n\r\n            _lstErreursParPropriete[propriete].Add(validationModel.ErreurParPropriete[propriete]);\r\n            OnErrorsChanged(propriete);\r\n        }\r\n    }    \r\n//highlight-end\r\n\r\n\r\n//highlight-start\r\n    public bool HasErrors\r\n    {\r\n        get\r\n        {\r\n            return _lstErreursParPropriete.Any();\r\n        }\r\n    }\r\n//highlight-end\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"modification-du-viewmodel---gestioncategorievm",children:"Modification du ViewModel - GestionCategorieVM"}),"\n",(0,i.jsxs)(r.p,{children:["Il faut modifier la m\xe9thode ",(0,i.jsx)(r.strong,{children:"EnregistrerAsync()"})," pour y inclure la validation."]}),"\n",(0,i.jsx)(r.p,{children:"\xc0 la ligne 3, il faut effacer les erreurs, car il est possible que des erreurs soient corrig\xe9es par l'utilisateur."}),"\n",(0,i.jsx)(r.p,{children:"Avant d'enregistrer, il faut appeler le service pour effectuer une validation (ligne 11)."}),"\n",(0,i.jsx)(r.p,{children:"Si l'objet est valide, l'enregistrement s'effectue (ligne 13)."}),"\n",(0,i.jsx)(r.p,{children:"Par contre, si l'objet n'est pas valide, il faut assigner la validation et notifier les erreurs (ligne 38)."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",metastring:"showLineNumbers",children:"private async Task EnregistrerAsync()\r\n{\r\n    //highlight-next-line\r\n    EffacerErreurs();\r\n\r\n    ChampsModifiables = false;\r\n    EstEnTravail = true;\r\n    bool estEnregistre;\r\n\r\n    CategorieModel categorieModel = VersModele();\r\n    \r\n    //highlight-next-line\r\n    ValidationModel validationModel = await _categorieService.ValiderAsync(categorieModel);\r\n\r\n//highlight-next-line\r\n    if (validationModel.EstValide == true)\r\n    {\r\n        if (categorieModel.CategorieId == 0)\r\n        {\r\n            //La cl\xe9 primaire est z\xe9ro, donc c'est une nouvelle cat\xe9gorie\r\n            estEnregistre = await _categorieService.AjouterAsync(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //La cl\xe9 primaire n'est pas z\xe9ro, donc c'est une cat\xe9gorie existante\r\n            estEnregistre = await _categorieService.ModifierAsync(categorieModel);\r\n        }\r\n\r\n        if (estEnregistre == true)\r\n        {\r\n            VersVM(categorieModel);\r\n        }\r\n        else\r\n        {\r\n            //Envoyer un message d'erreur \xe0 la vue\r\n            throw new Exception(\"Erreur. Impossible d'enregistrer\");\r\n        }\r\n    }\r\n    //highlight-start\r\n    else\r\n    {\r\n        AssignerValidation(validationModel);\r\n    }\r\n//highlight-end\r\n\r\n    EstEnTravail = false;\r\n    ChampsModifiables = true;\r\n}\n"})}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marrez l'application et testez l'ajout d'une nouvelle cat\xe9gorie sans inscrire de nom."}),"\n",(0,i.jsxs)(r.p,{children:["Le ",(0,i.jsx)(r.strong,{children:"<Textbox>"})," sera rouge, mais il n'y aura aucun message."]}),"\n",(0,i.jsx)(r.h3,{id:"ajout-dun-template-dans-les-ressources",children:"Ajout d'un template dans les ressources"}),"\n",(0,i.jsxs)(r.p,{children:["Pour \xeatre en mesure de voir le message d'erreur d'un composant, il faut ajouter le ",(0,i.jsx)(r.strong,{children:"<Validation.ErrorTemplate>"}),". Cette propri\xe9t\xe9 du composant permet d'indiquer comment le composant s'affiche lorsqu'il y a une erreur."]}),"\n",(0,i.jsxs)(r.p,{children:["Il est possible de le faire composant par composant, mais l'id\xe9al est d'utiliser un mod\xe8le ",(0,i.jsx)(r.strong,{children:"(template)"})," global dans les ressources de l'application."]}),"\n",(0,i.jsxs)(r.p,{children:["Cr\xe9ez le dossier ",(0,i.jsx)(r.strong,{children:"Styles"})," dans le projet ",(0,i.jsx)(r.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Choisissez le type de fichier ",(0,i.jsx)(r.strong,{children:"Dictionaire de ressources (WPF)"})," et cr\xe9ez le fichier ",(0,i.jsx)(r.strong,{children:"ErreurTemplate.xaml"})]}),"\n",(0,i.jsxs)(r.p,{children:["Un dictionnaire de ressources permet de configurer des \xe9l\xe9ments de l'application et de les r\xe9utiliser. Il est possible de faire le parall\xe8le avec les fichiers ",(0,i.jsx)(r.strong,{children:"CSS"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Dans l'exemple ci-dessous, il y a un mod\xe8le ",(0,i.jsx)(r.strong,{children:"erreurTemplate"})," qui permet de g\xe9rer l'affichage des erreurs. Le nom ",(0,i.jsx)(r.strong,{children:"erreurTemplate"})," peut \xeatre consid\xe9r\xe9 comme une classe ",(0,i.jsx)(r.strong,{children:"CSS"}),". Les contr\xf4les qui utilisent le mod\xe8le ",(0,i.jsx)(r.strong,{children:"erreurTemplate"})," pour les erreurs auront le m\xeame comportement."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 5, le contr\xf4le ",(0,i.jsx)(r.strong,{children:"<AdornedElementPlaceholder>"})," repr\xe9sente le contr\xf4le utilisateur normal. Si le contr\xf4le est un ",(0,i.jsx)(r.strong,{children:"<TextBox>"}),", ",(0,i.jsx)(r.strong,{children:"<AdornedElementPlaceholder>"})," correspond au  ",(0,i.jsx)(r.strong,{children:"<TextBox>"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 6, une bordure rouge est ajout\xe9e \xe0 l'int\xe9rieur du contr\xf4le. C'est le comportement par d\xe9faut, mais en sp\xe9cifiant un ",(0,i.jsx)(r.strong,{children:"template"}),", il faut le reproduire."]}),"\n",(0,i.jsx)(r.p,{children:"\xc0 la ligne 8, c'est un contr\xf4le de r\xe9p\xe9tition. Il est li\xe9 \xe0 la liste des erreurs."}),"\n",(0,i.jsxs)(r.p,{children:["\xc0 la ligne 11, un ",(0,i.jsx)(r.strong,{children:"<TextBlock>"})," est cr\xe9\xe9 avec le contenu de l'erreur pour chaque erreur de la liste d'erreur. Le message d'erreur est dans la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:'Text="{Binding ErrorContent}"'}),". Le texte est en rouge."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\r\n//highlight-next-line\r\n    <ControlTemplate x:Key="erreurTemplate">\r\n        <StackPanel Orientation="Vertical">\r\n//highlight-next-line\r\n            <AdornedElementPlaceholder>\r\n//highlight-next-line\r\n                <Border BorderBrush="Red" BorderThickness="2"/>\r\n            </AdornedElementPlaceholder>\r\n//highlight-next-line\r\n            <ItemsControl ItemsSource="{Binding}">\r\n                <ItemsControl.ItemTemplate>\r\n                    <DataTemplate>\r\n//highlight-next-line\r\n                        <TextBlock Text="{Binding ErrorContent}" Foreground="Red"/>\r\n                    </DataTemplate>\r\n                </ItemsControl.ItemTemplate>\r\n            </ItemsControl>\r\n        </StackPanel>\r\n    </ControlTemplate>\r\n</ResourceDictionary>\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Dans le fichier ",(0,i.jsx)(r.strong,{children:"App.xaml"}),", il faut importer le dictionnaire."]}),"\n",(0,i.jsx)(r.p,{children:"\xc0 la ligne 8, il y a le dictionnaire de ressources \xe0 inclure. Il serait possible d'en inclure plusieurs."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'<Application x:Class="SuperCarte.WPF.App"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:local="clr-namespace:SuperCarte.WPF">\r\n    <Application.Resources>     \r\n//highlight-start   \r\n        <ResourceDictionary>\r\n            <ResourceDictionary.MergedDictionaries>\r\n                 <ResourceDictionary Source="Styles\\ErreurTemplate.xaml"/>\r\n            </ResourceDictionary.MergedDictionaries>\r\n        </ResourceDictionary>    \r\n//highlight-end    \r\n    </Application.Resources>\r\n</Application>\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Modifiez le fichier ",(0,i.jsx)(r.strong,{children:"UcGestionCategorie.xaml"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Dans le ",(0,i.jsx)(r.strong,{children:"contr\xf4le utilisateur"}),", il faut assigner le template avec cette propri\xe9t\xe9 sur le composant ",(0,i.jsx)(r.strong,{children:'Validation.ErrorTemplate="{StaticResource erreurTemplate}"'})," (lignes 19 et 30)."]}),"\n",(0,i.jsx)(r.p,{children:"Remplacez la section de la rang\xe9e 2 (ou ajoutez les 2 lignes)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'        \x3c!--Rang\xe9e 2--\x3e\r\n        \x3c!-- Formulaire --\x3e\r\n        <Grid Grid.Row="2" IsEnabled="{Binding ChampsModifiables}">\r\n            <Grid.RowDefinitions>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n            </Grid.RowDefinitions>\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width="auto"/>\r\n                <ColumnDefinition Width="*" />\r\n            </Grid.ColumnDefinitions>\r\n            \r\n            \x3c!-- Nom --\x3e\r\n            <Label Grid.Row="0" Grid.Column="0" \r\n                   Content="Nom : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="0" Grid.Column="1" \r\n//highlight-next-line\r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding Nom}" \r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10" />\r\n\r\n            \x3c!-- Description --\x3e\r\n            <Label Grid.Row="1" Grid.Column="0" \r\n                   Content="Description : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="1" Grid.Column="1" \r\n//highlight-next-line\r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding Description}"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10" />\r\n        </Grid>\r\n \n'})}),"\n",(0,i.jsx)(r.p,{children:"D\xe9marrez le programme et testez la validation. Le message d'erreur s'affichera en dessous du contr\xf4le."}),"\n",(0,i.jsx)(r.h3,{id:"propri\xe9t\xe9-maxlength---ucgestioncategoriexaml",children:"Propri\xe9t\xe9 MaxLength - UcGestionCategorie.xaml"}),"\n",(0,i.jsxs)(r.p,{children:["Il est possible de limiter le nombre de caract\xe8res dans un ",(0,i.jsx)(r.strong,{children:"<TextBox>"})," avec la propri\xe9t\xe9 ",(0,i.jsx)(r.strong,{children:"MaxLength"}),"."]}),"\n",(0,i.jsx)(r.p,{children:"Il est pr\xe9f\xe9rable de l'utiliser dans la vue (lignes 21 et 33)."}),"\n",(0,i.jsxs)(r.p,{children:["Avec cette propri\xe9t\xe9, il n'y aura plus de message d'erreur pour la longueur, mais il faut tout de m\xeame que le validateur s'en assure, car le ",(0,i.jsx)(r.strong,{children:"Service"})," n'a aucune id\xe9e si la ",(0,i.jsx)(r.strong,{children:"Vue"})," s'en occupe."]}),"\n",(0,i.jsxs)(r.p,{children:["Pensez \xe0 utiliser cette propri\xe9t\xe9 pour le ",(0,i.jsx)(r.strong,{children:"TP 3"}),"."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-xaml",metastring:"showLineNumbers ",children:'        \x3c!--Rang\xe9e 2--\x3e\r\n        \x3c!-- Formulaire --\x3e\r\n        <Grid Grid.Row="2" IsEnabled="{Binding ChampsModifiables}">\r\n            <Grid.RowDefinitions>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n                <RowDefinition Height="auto"></RowDefinition>\r\n            </Grid.RowDefinitions>\r\n            <Grid.ColumnDefinitions>\r\n                <ColumnDefinition Width="auto"/>\r\n                <ColumnDefinition Width="*" />\r\n            </Grid.ColumnDefinitions>\r\n            \r\n            \x3c!-- Nom --\x3e\r\n            <Label Grid.Row="0" Grid.Column="0" \r\n                   Content="Nom : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="0" Grid.Column="1" \r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding Nom}" \r\n//highlight-next-line\r\n                     MaxLength="35"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10" />\r\n\r\n            \x3c!-- Description --\x3e\r\n            <Label Grid.Row="1" Grid.Column="0" \r\n                   Content="Description : "\r\n                   Margin="5 10 5 10" \r\n                   FontWeight="Bold"/>\r\n            <TextBox Grid.Row="1" Grid.Column="1" \r\n                     Validation.ErrorTemplate="{StaticResource erreurTemplate}"\r\n                     Text="{Binding Description}"\r\n//highlight-next-line\r\n                     MaxLength="50"\r\n                     Padding="2 4 0 0"\r\n                     Margin="0 10 5 10" />\r\n        </Grid>\r\n        \x3c!--Rang\xe9e 3--\x3e\r\n        <ProgressBar Grid.Row="3" Height="10" IsIndeterminate="{Binding EstEnTravail}" />\r\n\r\n    </Grid>\r\n</UserControl>\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>l,a:()=>s});var i=n(7294);const a={},t=i.createContext(a);function s(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);