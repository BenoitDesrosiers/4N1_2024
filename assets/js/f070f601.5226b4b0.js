"use strict";(self.webpackChunknotes_de_cours_4_n_1_2024=self.webpackChunknotes_de_cours_4_n_1_2024||[]).push([[5579],{4455:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=r(5893),t=r(1151);const i={},a="WPF partie 1",l={id:"04 WPF/partie_1",title:"WPF partie 1",description:"Pour faire des applications natives Windows, .Net a 3 plateformes principales : WinForm , Universal Windows Platforme (UWP) et Windows Presentation Form (WPF).",source:"@site/docs/04 WPF/partie_1.md",sourceDirName:"04 WPF",slug:"/04 WPF/partie_1",permalink:"/4N1_2024/docs/04 WPF/partie_1",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"NotesSidebar",previous:{title:"Injection de d\xe9pendances",permalink:"/4N1_2024/docs/03 Injection de d\xe9pendance/injection_dependance"},next:{title:"planning",permalink:"/4N1_2024/docs/planning"}},o={},d=[{value:"Pr\xe9sentation de l&#39;application",id:"pr\xe9sentation-de-lapplication",level:2},{value:"Structure de l&#39;application",id:"structure-de-lapplication",level:2},{value:"Concepts pr\xe9sent\xe9s",id:"concepts-pr\xe9sent\xe9s",level:2},{value:"Diagramme entit\xe9-association",id:"diagramme-entit\xe9-association",level:2},{value:"Cr\xe9ation du projet - SuperCarte.EF",id:"cr\xe9ation-du-projet---supercarteef",level:2},{value:"Cr\xe9ation du mod\xe8le",id:"cr\xe9ation-du-mod\xe8le",level:2},{value:"Cr\xe9ation du contexte",id:"cr\xe9ation-du-contexte",level:2},{value:"Variable d&#39;environnement <code>MIGRATION_CONNECTION_STRING</code>",id:"variable-denvironnement-migration_connection_string",level:3},{value:"Cr\xe9ation du fichier de migration",id:"cr\xe9ation-du-fichier-de-migration",level:3},{value:"Synchronisation de la base de donn\xe9es",id:"synchronisation-de-la-base-de-donn\xe9es",level:3},{value:"Configuration du contexte - OnModelCreating",id:"configuration-du-contexte---onmodelcreating",level:2},{value:"Nom des tables",id:"nom-des-tables",level:3},{value:"Cr\xe9er une cl\xe9 primaire compos\xe9e",id:"cr\xe9er-une-cl\xe9-primaire-compos\xe9e",level:3},{value:"Type des champs - string, decimal et date",id:"type-des-champs---string-decimal-et-date",level:3},{value:"Ajout d&#39;une contrainte d&#39;unicit\xe9",id:"ajout-dune-contrainte-dunicit\xe9",level:3},{value:"Mettre ON DELETE NO ACTION sur les cl\xe9s \xe9trang\xe8res",id:"mettre-on-delete-no-action-sur-les-cl\xe9s-\xe9trang\xe8res",level:2},{value:"Pr\xe9paration du contexte",id:"pr\xe9paration-du-contexte",level:2},{value:"Cr\xe9ation des donn\xe9es",id:"cr\xe9ation-des-donn\xe9es",level:2},{value:"Ajout des d\xe9pendances de projet",id:"ajout-des-d\xe9pendances-de-projet",level:2},{value:"Classe et m\xe9thode g\xe9n\xe9rique - Th\xe9orie",id:"classe-et-m\xe9thode-g\xe9n\xe9rique---th\xe9orie",level:2},{value:"G\xe9n\xe9ralisation du contexte",id:"g\xe9n\xe9ralisation-du-contexte",level:2},{value:"Obtenir un enregistrement sp\xe9cifique par sa cl\xe9",id:"obtenir-un-enregistrement-sp\xe9cifique-par-sa-cl\xe9",level:3},{value:"Utilisation du Repository - Th\xe9orie",id:"utilisation-du-repository---th\xe9orie",level:3},{value:"Cr\xe9ation des Repositories sp\xe9cifiques",id:"cr\xe9ation-des-repositories-sp\xe9cifiques",level:2},{value:"RoleRepo",id:"rolerepo",level:3},{value:"UtilisateurRepo",id:"utilisateurrepo",level:3},{value:"EnsembleRepo",id:"ensemblerepo",level:3},{value:"CategorieRepo",id:"categorierepo",level:3},{value:"CarteRepo",id:"carterepo",level:3},{value:"UtilisateurCarteRepo",id:"utilisateurcarterepo",level:3},{value:"Cr\xe9ation du projet dans une solution existante",id:"cr\xe9ation-du-projet-dans-une-solution-existante",level:2},{value:"Ajout des d\xe9pendances de projet",id:"ajout-des-d\xe9pendances-de-projet-1",level:2},{value:"Fichier Usings.cs",id:"fichier-usingscs",level:2},{value:"Fichier de configuration - appsettings.json",id:"fichier-de-configuration---appsettingsjson",level:2},{value:"Ajout de la structure pour injection des d\xe9pendances",id:"ajout-de-la-structure-pour-injection-des-d\xe9pendances",level:2},{value:"Classes d&#39;extension de m\xe9thodes",id:"classes-dextension-de-m\xe9thodes",level:3},{value:"Cr\xe9ation du Host - App.xaml.cs",id:"cr\xe9ation-du-host---appxamlcs",level:3},{value:"Hello World",id:"hello-world",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"wpf-partie-1",children:"WPF partie 1"}),"\n",(0,s.jsxs)(n.p,{children:["Pour faire des applications natives Windows, ",(0,s.jsx)(n.strong,{children:".Net"})," a 3 plateformes principales : ",(0,s.jsx)(n.strong,{children:"WinForm"})," , ",(0,s.jsx)(n.strong,{children:"Universal Windows Platforme (UWP)"})," et ",(0,s.jsx)(n.strong,{children:"Windows Presentation Form (WPF)"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Malgr\xe9 que ",(0,s.jsx)(n.strong,{children:"WPF"})," existe depuis 2006, la plateforme utilise le langage ",(0,s.jsx)(n.strong,{children:"XAML"})," pour r\xe9aliser les interfaces graphiques. Un premier avantage de ",(0,s.jsx)(n.strong,{children:"XAML"})," par rapport \xe0 ",(0,s.jsx)(n.strong,{children:"WinForm"})," est que ",(0,s.jsx)(n.strong,{children:"XAML"})," permet d'\xeatre facilement ",(0,s.jsx)(n.strong,{children:"responsive"}),". Un deuxi\xe8me avantage est que les composants sont ",(0,s.jsx)(n.strong,{children:"liables (bindables)"})," \xe0 des propri\xe9t\xe9s. Il est possible de s\xe9parer facilement les classes graphiques de la logique d'interaction.  Il est donc possible de faire d'utiliser des patrons de conception comme ",(0,s.jsx)(n.strong,{children:"MVVM"})," facilement."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"XAML"})," est \xe9galement utilis\xe9 pour la cr\xe9ation des interfaces graphiques de ",(0,s.jsx)(n.strong,{children:"MAUI"}),", la nouvelle librairie ",(0,s.jsx)(n.strong,{children:"multiplateforme"})," de Microsoft."]}),"\n",(0,s.jsx)(n.h2,{id:"pr\xe9sentation-de-lapplication",children:"Pr\xe9sentation de l'application"}),"\n",(0,s.jsxs)(n.p,{children:["L'application permet de g\xe9rer les cartes de jeux du style ",(0,s.jsx)(n.strong,{children:"Heartstone"})," pour des joueurs. Il s'agit du jeu ",(0,s.jsx)(n.strong,{children:"Super Carte"}),". Tr\xe8s original comme nom."]}),"\n",(0,s.jsx)(n.p,{children:"Les cartes ont des caract\xe9ristiques propres pour d\xe9terminer leur pointage de vie, d\u2019armure et de force."}),"\n",(0,s.jsx)(n.p,{children:"Chaque joueur poss\xe8de des cartes qui lui permettront de jouer des parties. Les joueurs peuvent visualiser ses propres cartes et \xe9galement toutes les cartes du syst\xe8me."}),"\n",(0,s.jsx)(n.p,{children:"Les administrateurs de l'application sont en mesure de cr\xe9er de nouvelles cartes. Les cartes appartiennent \xe0 un ensemble de cartes. P\xe9riodiquement, les administrateurs cr\xe9ent un nouvel ensemble de cartes."}),"\n",(0,s.jsx)(n.h2,{id:"structure-de-lapplication",children:"Structure de l'application"}),"\n",(0,s.jsxs)(n.p,{children:["L'application ",(0,s.jsx)(n.strong,{children:"SuperCarteApp"})," qui sera cr\xe9\xe9e aura 3 projets."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"})}),"\n",(0,s.jsxs)(n.p,{children:["Ce projet consiste \xe0 l'interface visuelle ",(0,s.jsx)(n.strong,{children:"UI"})," de l'application. Il contient \xe9galement la structure ",(0,s.jsx)(n.strong,{children:"MVVM"})," pour g\xe9rer les interactions avec l'interface graphique."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"SuperCarte.Core"})}),"\n",(0,s.jsxs)(n.p,{children:["Ce projet consiste \xe0 la logique de l'application. Il contient les classes de type ",(0,s.jsx)(n.strong,{children:"Service"}),", de type ",(0,s.jsx)(n.strong,{children:"Repository"}),", de type ",(0,s.jsx)(n.strong,{children:"Validateur"})," et les classes du mod\xe8le du domaine."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"SuperCarte.EF"})}),"\n",(0,s.jsxs)(n.p,{children:["Ce projet consiste \xe0 la communication avec la base de donn\xe9es. Il contient le ",(0,s.jsx)(n.strong,{children:"contexte"})," et les classes du mod\xe8le de donn\xe9es."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"concepts-pr\xe9sent\xe9s",children:"Concepts pr\xe9sent\xe9s"}),"\n",(0,s.jsxs)(n.p,{children:["Dans ce document, vous allez cr\xe9er une base de donn\xe9es en ",(0,s.jsx)(n.strong,{children:"Code First"})," \xe0 partir du ",(0,s.jsx)(n.strong,{children:"contexte"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, vous allez cr\xe9er un ",(0,s.jsx)(n.strong,{children:"Repository"})," g\xe9n\xe9rique pour optimiser la r\xe9utilisation de code."]}),"\n",(0,s.jsxs)(n.p,{children:["Finalement, vous allez cr\xe9er la base du projet ",(0,s.jsx)(n.strong,{children:"WPF"})," pour int\xe9grer le fichier de configuration et l'injection de d\xe9pendances."]}),"\n",(0,s.jsx)(n.h1,{id:"approche-code-first-du-contexte",children:"Approche Code First du Contexte"}),"\n",(0,s.jsxs)(n.p,{children:["Pour ce projet, l'approche ",(0,s.jsx)(n.strong,{children:"Code First"})," sera utilis\xe9e pour cr\xe9er le contexte."]}),"\n",(0,s.jsxs)(n.p,{children:["L'avantage du ",(0,s.jsx)(n.strong,{children:"Code First"})," est que la base de donn\xe9es se met \xe0 jour par ",(0,s.jsx)(n.strong,{children:"migration"}),". La ",(0,s.jsx)(n.strong,{children:"migration"})," consiste \xe0 g\xe9n\xe9rer des fichiers de cr\xe9ation et de mise \xe0 jour de la base de donn\xe9es \xe0 partir du code de programmation. Dans ce projet, ce sera du ",(0,s.jsx)(n.strong,{children:"C#"}),". Ce code est facilement int\xe9grable \xe0 ",(0,s.jsx)(n.strong,{children:"Git"})," et se partage facilement entre les membres de l'\xe9quipe. Un fichier de ",(0,s.jsx)(n.strong,{children:"migration"})," contient le code pour appliquer les modifications et le code pour les annuler. Il est donc facile de faire des retours en arri\xe8re et de se mettre rapidement a une version sp\xe9cifique de la base de donn\xe9es. Il suffit d'ex\xe9cuter la derni\xe8re version des fichiers de migration pour avoir la base de donn\xe9es \xe0 jour. Il est \xe9galement possible de revenir \xe0 une ancienne version facilement en ex\xe9cutant le fichier de migration correspondant."]}),"\n",(0,s.jsx)(n.p,{children:"Un autre avantage est qu'il est possible de cr\xe9er le contexte selon des standards internes. Par exemple, la pluralisation ne fonctionne pas bien en fran\xe7ais. Il est donc possible de mettre un pr\xe9fixe ou un suffixe a des \xe9l\xe9ments pour diff\xe9rencier une r\xe9f\xe9rence unitaire ou une collection."}),"\n",(0,s.jsxs)(n.p,{children:["Il est important que ",(0,s.jsx)(n.strong,{children:"la base de donn\xe9es n'existe pas"})," dans votre ",(0,s.jsx)(n.strong,{children:"SQL Server"})," lors de l'ex\xe9cution de la premi\xe8re migration."]}),"\n",(0,s.jsxs)(n.p,{children:["Le site ",(0,s.jsx)(n.strong,{children:"Entity Framework Tutorial"})," (anglais seulement) explique plusieurs \xe9l\xe9ments du fonctionnement du contexte. C'est un tr\xe8s bon tutoriel. ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://www.entityframeworktutorial.net/efcore/entity-framework-core.aspx",children:"https://www.entityframeworktutorial.net/efcore/entity-framework-core.aspx"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Voici le site officiel de Microsoft pour la migration de ",(0,s.jsx)(n.strong,{children:"Entity Framework Core"}),". ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/ef/core/managing-schemas/migrations/?tabs=vs",children:"https://learn.microsoft.com/fr-ca/ef/core/managing-schemas/migrations/?tabs=vs"})})]}),"\n",(0,s.jsxs)(n.p,{children:["L'approche utilis\xe9e dans ce document pour g\xe9rer la migration est directement par la librairie de classe. La migration sera ind\xe9pendante du projet ",(0,s.jsx)(n.strong,{children:"ex\xe9cutable"})," (WPF, WinForm, Console, ASP.NET MVC, Blazor...). Cette approche doit ajouter des configurations dans le contexte, mais permet d'\xeatre ind\xe9pendant de l'ex\xe9cutable. Il est possible pour un programmeur de g\xe9rer la base de donn\xe9es sans avoir acc\xe8s \xe0 la solution compl\xe8te. L'approche pr\xe9sent\xe9e dans ce document n\xe9cessite de sp\xe9cifier ",(0,s.jsx)(n.strong,{children:"une chaine de connexion en m\xe9moire"}),", mais elle ne n\xe9cessite pas un projet de d\xe9marrage."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de g\xe9rer la migration \xe0 partir du projet ",(0,s.jsx)(n.strong,{children:"ex\xe9cutable"}),". L'avantage d'avoir un projet ex\xe9cutable lors de la mise en place de la migration est qu'il est possible d'utiliser le fichier de configuration du projet pour se synchroniser avec la base de donn\xe9es. ",(0,s.jsx)(n.strong,{children:"Par contre"}),", la mise en place d'un projet d\xe9marrable peut demander du temps. Si le projet d\xe9marrable est mal configur\xe9, la migration ne fonctionnera pas. Il est possible que la solution poss\xe8de plusieurs projets de d\xe9marrage (WPF et API). Il faut donc que chacun des projets soit en mesure de g\xe9rer la migration."]}),"\n",(0,s.jsx)(n.h2,{id:"diagramme-entit\xe9-association",children:"Diagramme entit\xe9-association"}),"\n",(0,s.jsx)(n.p,{children:"Voici le DEA initial de l'application. Le DEA \xe9voluera en cours de route pour pratiquer les migrations en cours de projet."}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/13_dea_supercarte.png"}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-du-projet---supercarteef",children:"Cr\xe9ation du projet - SuperCarte.EF"}),"\n",(0,s.jsxs)(n.p,{children:["Pour d\xe9buter, il faut cr\xe9er le projet qui contiendra le ",(0,s.jsx)(n.strong,{children:"contexte"})," et les classes du mod\xe8le."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un projet de type ",(0,s.jsx)(n.strong,{children:"Biblioth\xe8que de classe"}),". Il est important ",(0,s.jsx)(n.strong,{children:"de ne pas choisir"})," la version ",(0,s.jsx)(n.strong,{children:".NET Framework"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nom du projet"})," : SuperCarte.EF"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nom de la solution"})," : SuperCarteApp"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Infrastructure"})," : .NET 7"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Remarquez que le nom de la solution n'est pas identique au projet, car la solution repr\xe9sente l'application et le projet une partie de l'application."}),"\n",(0,s.jsxs)(n.p,{children:["Supprimez la classe ",(0,s.jsx)(n.strong,{children:"Class1.cs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Une ",(0,s.jsx)(n.strong,{children:"Biblioth\xe8que de classe"})," est une librairie interne. Ce type de projet n'est pas en mesure de s'ex\xe9cuter de fa\xe7on autonome. Pour \xeatre utilisable, ce projet doit \xeatre int\xe9gr\xe9 dans un projet ",(0,s.jsx)(n.strong,{children:"ex\xe9cutable"})," (WPF, WinForm, Console, ASP.NET MVC, Blazor...)."]}),"\n",(0,s.jsxs)(n.p,{children:["Ce projet contiendra uniquement le ",(0,s.jsx)(n.strong,{children:"contexte"})," et les classes du mod\xe8le de donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", installez les 2 librairies ci-dessous."]}),"\n",(0,s.jsxs)(n.p,{children:["La premi\xe8re librairie est pour le serveur utilis\xe9 avec le contexte. Dans notre cas, c'est ",(0,s.jsx)(n.strong,{children:"SQL Server"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Install-Package Microsoft.EntityFrameworkCore.SqlServer\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La 2e librairie est pour les outils de migration. C'est la m\xeame librairie que pour l'outil ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Scaffold-DbContext"})})," de l'approche ",(0,s.jsx)(n.strong,{children:"Database First"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Install-Package Microsoft.EntityFrameworkCore.Tools\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-du-mod\xe8le",children:"Cr\xe9ation du mod\xe8le"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut reproduire les classes du mod\xe8le pour repr\xe9senter le ",(0,s.jsx)(n.strong,{children:"DEA"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"En premier lieu, il faut cr\xe9er toutes les classes vides, car les propri\xe9t\xe9s de navigation font des r\xe9f\xe9rences circulaires. Si la classe n'existe pas, Visual Studio va indiquer une erreur."}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"Data"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez toutes les classes ci-dessous dans le dossier ",(0,s.jsx)(n.strong,{children:"Data"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Role.cs"}),"\n",(0,s.jsx)(n.li,{children:"Utilisateur.cs"}),"\n",(0,s.jsx)(n.li,{children:"Categorie.cs"}),"\n",(0,s.jsx)(n.li,{children:"Ensemble.cs"}),"\n",(0,s.jsx)(n.li,{children:"Carte.cs"}),"\n",(0,s.jsx)(n.li,{children:"UtilisateurCarte.cs"}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Une propri\xe9t\xe9 de navigation qui repr\xe9sente la relation ",(0,s.jsx)(n.strong,{children:"1 \xe0 Plusieurs"})," auront le suffixe ",(0,s.jsx)(n.strong,{children:"Liste"})," pour les diff\xe9rencier des relations ",(0,s.jsx)(n.strong,{children:"Plusieurs \xe0 1"}),", car il s'agit d'une collection d'\xe9l\xe9ments."]}),(0,s.jsxs)(n.p,{children:["Pour une propri\xe9t\xe9 de navigation qui repr\xe9sente une relation ",(0,s.jsx)(n.strong,{children:"Plusieurs \xe0 1"}),", le nom de la propri\xe9t\xe9 de navigation sera le nom de la classe."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code de la classe ",(0,s.jsx)(n.strong,{children:"Role.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Role\r\n{\r\n    public int RoleId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n    \r\n    public ICollection<Utilisateur> UtilisateurListe { get; set; } = new List<Utilisateur>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code de la classe ",(0,s.jsx)(n.strong,{children:"Utilisateur.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Utilisateur\r\n{\r\n    public int UtilisateurId {  get; set; }\r\n\r\n    public string Prenom { get; set; } = null!;\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string NomUtilisateur { get; set; } = null!;\r\n    \r\n    public string MotPasseHash { get; set; } = null!;\r\n\r\n    public int RoleId { get; set; }\r\n    \r\n    public Role Role { get; set; } = null!;   \r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code de  la classe ",(0,s.jsx)(n.strong,{children:"Categorie.cs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez que le champ ",(0,s.jsx)(n.strong,{children:"Description"})," est ",(0,s.jsx)(n.strong,{children:"nullable"})," comme dans le ",(0,s.jsx)(n.strong,{children:"DEA"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Categorie\r\n{\r\n    public int CategorieId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string? Description { get; set; }\r\n    \r\n    public ICollection<Carte> CarteListe { get; set; } = new List<Carte>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code de la classe ",(0,s.jsx)(n.strong,{children:"Ensemble.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Ensemble\r\n{\r\n    public int EnsembleId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public DateTime Disponibilite { get; set; }\r\n    \r\n    public ICollection<Carte> CarteListe { get; set; } = new List<Carte>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code de la classe ",(0,s.jsx)(n.strong,{children:"Carte.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Carte\r\n{\r\n    public int CarteId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public short Vie { get; set; }\r\n\r\n    public short Armure { get; set; }\r\n\r\n    public short Attaque { get; set; }\r\n\r\n    public bool EstRare { get; set; }\r\n    \r\n    public decimal PrixRevente { get; set; }\r\n\r\n    public int CategorieId { get; set; }\r\n\r\n    public int EnsembleId { get; set; }\r\n    \r\n    public Categorie Categorie { get; set; } = null!;\r\n\r\n    public Ensemble Ensemble { get; set; } = null!;\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La classe ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte.cs"})," reste vide pour l'instant."]}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-du-contexte",children:"Cr\xe9ation du contexte"}),"\n",(0,s.jsxs)(n.p,{children:["Pour que la migration fonctionne, il faut avoir un ",(0,s.jsx)(n.strong,{children:"contexte"}),", une configuration de base, des ",(0,s.jsx)(n.strong,{children:"DBSet"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Chacune des classes qui sont inscrites dans un ",(0,s.jsx)(n.strong,{children:"DbSet"})," doit avoir une cl\xe9 primaire. Par convention, la propri\xe9t\xe9 qui se nomme ",(0,s.jsx)(n.strong,{children:"Id"})," ou ",(0,s.jsx)(n.strong,{children:"[Nom de la Classe]Id"}),"  dans la classe du mod\xe8le est automatiquement consid\xe9r\xe9e comme la cl\xe9 primaire."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc9galement, pour les cl\xe9s \xe9trang\xe8res, il faut la propri\xe9t\xe9 de navigation ",(0,s.jsx)(n.strong,{children:"Plusieurs \xe0 1"})," et une propri\xe9t\xe9 du m\xeame nom avec ",(0,s.jsx)(n.strong,{children:"Id"})," comme suffixe. Par convention, une cl\xe9 \xe9trang\xe8re a le m\xeame nom que la cl\xe9 primaire de la table parent. Donc pour une cl\xe9 \xe9trang\xe8re qui utilise la table ",(0,s.jsx)(n.strong,{children:"Maison"}),", la propri\xe9t\xe9 de navigation serait ",(0,s.jsx)(n.strong,{children:"Maison"})," et la propri\xe9t\xe9 de la cl\xe9 serait ",(0,s.jsx)(n.strong,{children:"MaisonId"}),". Par d\xe9faut, la cl\xe9 \xe9trang\xe8re est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ON DELETE CASCADE"})})," et ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ON UPDATE NO ACTION"})}),". Si la classe parent poss\xe8de une collection de la classe enfant, le lien sera fait automatiquement. Si la table avait 2 cl\xe9s \xe9trang\xe8res sur la m\xeame table, il faudrait configurer la relation dans le contexte."]}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple, pour la classe ",(0,s.jsx)(n.strong,{children:"Carte.cs"}),", il y a la cl\xe9 \xe9trang\xe8re vers la table parent ",(0,s.jsx)(n.strong,{children:"Categorie"}),". Mais il serait possible de modifier la convention en effectuant le 2e exemple. Il faut par contre que le couple de propri\xe9t\xe9s ",(0,s.jsx)(n.strong,{children:"Navigation et cl\xe9 \xe9trang\xe8re"})," respecte la convention."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"//Convention\r\npublic int CategorieId { get; set; }\r\npublic Categorie Categorie { get; set; } = null!;\r\n\r\n/***/\r\n//Ceci ferait \xe9galement une relation entre la table Categorie et Carte\r\npublic int CatId { get; set; }\r\npublic Categorie Cat { get; set; } = null!;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"Data\\Context"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"SuperCarteContext"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Data\\Context"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using Microsoft.EntityFrameworkCore;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l'utilisation en programme\r\n    /// </summary>\r\n    /// <param name=\"options\">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d'inclure cette m\xe9thode uniquement si l'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        //V\xe9rifie si la configuration n'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d'un fichier de configuration\r\n            //Option de base pour la migration\r\n            string? chaineConnexion = Environment.GetEnvironmentVariable(\"MIGRATION_CONNECTION_STRING\");\r\n\r\n            //V\xe9rifie si la variable n'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n            }\r\n            else\r\n            {\r\n                //Il n'y a aucune chaine de connexion.\r\n                throw new Exception(\"La variable MIGRATION_CONNECTION_STRING n'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\\"[ma chaine de connexion]\\\" \");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Premi\xe8rement, la classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:"DbContext"}),". Cette classe contient toute la m\xe9canique de communication et de synchronisation du mod\xe8le objet avec la base de donn\xe9es. La classe sp\xe9cifique ",(0,s.jsx)(n.strong,{children:"SuperCarteContext"})," contient uniquement la d\xe9finition de la base de donn\xe9es relationnelle."]}),"\n",(0,s.jsxs)(n.p,{children:["Avec le nom des tables de cette base de donn\xe9es, il serait possible d'utiliser la convention du pluriel. Par contre, avec l'\xe9volution de la base de donn\xe9es , il serait possible qu'une nouvelle table se termine par ",(0,s.jsx)(n.strong,{children:"s"})," s'ajoute. Il ne serait donc pas possible de mettre la r\xe8gle du pluriel."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de choisir le nom des ",(0,s.jsx)(n.strong,{children:"DbSet"}),". Pour ce projet, le suffixe ",(0,s.jsx)(n.strong,{children:"Tb"})," sera ajout\xe9 pour indiquer que c'est la table."]}),"\n",(0,s.jsxs)(n.p,{children:["La table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"})," est volontairement ",(0,s.jsx)(n.strong,{children:"exclue"})," des ",(0,s.jsx)(n.strong,{children:"DbSet"})," pour l'instant, car elle n'a pas de cl\xe9 primaire unique, mais une cl\xe9 primaire compos\xe9e. Ce concept sera pr\xe9sent\xe9 \xe0 la section 2.5.2."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnConfiguring"})})," contient la logique pour la configuration du serveur par un fichier externe ou par une variable d'environnement. La clause ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"#if DEBUG"})})," indique au compilateur de tenir compte du code seulement si l'application est en mode ",(0,s.jsx)(n.strong,{children:"Debug"}),". Il ne faut pas que cette configuration soit accessible en production."]}),"\n",(0,s.jsxs)(n.h3,{id:"variable-denvironnement-migration_connection_string",children:["Variable d'environnement ",(0,s.jsx)(n.code,{children:"MIGRATION_CONNECTION_STRING"})]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut assigner la chaine de connexion dans la variable d'environnement ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"MIGRATION_CONNECTION_STRING"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut faire cette \xe9tape \xe0 chaque d\xe9marrage de ",(0,s.jsx)(n.strong,{children:"Visual Studio"})," s'il est n\xe9cessaire d'effectuer des migrations."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,s.jsx)(n.strong,{children:"Projet par d\xe9faut"})," de ",(0,s.jsx)(n.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console. Pour ce projet, ce doit \xeatre ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"}),". \xc0 ce stade, il y a un seul projet, ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"})," sera le seul de la liste."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour ce projet, utilisez cette chaine de connexion. Le nom de la base de donn\xe9es est ",(0,s.jsx)(n.strong,{children:"eDA_4N1_SuperCarte"}),". Modifiez le ",(0,s.jsx)(n.strong,{children:"DA"})," par votre num\xe9ro d'admission."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Voici la commande avec le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Trusted_Connection=True;"})})," , si vous avez l'erreur ",(0,s.jsx)(n.strong,{children:"SSL"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'$env:MIGRATION_CONNECTION_STRING = "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;Trust Server Certificate=True;"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Si vous oubliez cette \xe9tape, vous allez avoir ce message lors de l'utilisation des commandes de migration. C'est l'exception de la ligne 46 de la classe du contexte."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'La variable SQL_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING="{ma chaine de connexion}" \n'})}),"\n",(0,s.jsx)(n.h3,{id:"cr\xe9ation-du-fichier-de-migration",children:"Cr\xe9ation du fichier de migration"}),"\n",(0,s.jsx)(n.p,{children:"Le contexte n'est pas complet, mais il est possible de cr\xe9er une base de donn\xe9es."}),"\n",(0,s.jsx)(n.p,{children:"Il faut cr\xe9er un fichier de migration. La syntaxe de la commande est ceci."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration [nom migration] -StartupProject [Nom Projet Entity Framework]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez la commande ci-dessous. Il est important que le ",(0,s.jsx)(n.strong,{children:"Projet par d\xe9faut"})," de ",(0,s.jsx)(n.strong,{children:"Entity Framework"})," soit s\xe9lectionn\xe9 dans la console, m\xeame s'il est indiqu\xe9 dans la ligne de commande. Pour ce projet, ce doit \xeatre ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration CreationBD -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il y a maintenant un dossier ",(0,s.jsx)(n.strong,{children:"Migration"}),". \xc0 l'int\xe9rieur, il y a un fichier avec un ",(0,s.jsx)(n.strong,{children:"timestamp"})," avec le nom de la migration. L'outil ",(0,s.jsx)(n.strong,{children:"Add-Migration"})," s'occupe d'analyser le contexte et de cr\xe9er le fichier de migration correspondant. Il serait possible de faire ce fichier manuellement ou \xe0 partir d'une autre librairie."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici le fichier. La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Up"})})," permet d'appliquer la migration \xe0 la base de donn\xe9es et la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Down"})})," est de la retirer. Il n'est pas recommand\xe9 de modifier ce fichier s'il a \xe9t\xe9 g\xe9n\xe9r\xe9 par un outil., car il ne sera plus en ",(0,s.jsx)(n.strong,{children:"synchronisation"})," avec le ",(0,s.jsx)(n.strong,{children:"contexte"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using System;\r\nusing Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace SuperCarte.EF.Migrations\r\n{\r\n    /// <inheritdoc />\r\n    public partial class CreationBD : Migration\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void Up(MigrationBuilder migrationBuilder)\r\n        {\r\n            migrationBuilder.CreateTable(\r\n                name: "CategorieTb",\r\n                columns: table => new\r\n                {\r\n                    CategorieId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_CategorieTb", x => x.CategorieId);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "EnsembleTb",\r\n                columns: table => new\r\n                {\r\n                    EnsembleId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Disponibilite = table.Column<DateTime>(type: "datetime2", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_EnsembleTb", x => x.EnsembleId);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "RoleTb",\r\n                columns: table => new\r\n                {\r\n                    RoleId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_RoleTb", x => x.RoleId);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "CarteTb",\r\n                columns: table => new\r\n                {\r\n                    CarteId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Vie = table.Column<short>(type: "smallint", nullable: false),\r\n                    Armure = table.Column<short>(type: "smallint", nullable: false),\r\n                    Attaque = table.Column<short>(type: "smallint", nullable: false),\r\n                    EstRare = table.Column<bool>(type: "bit", nullable: false),\r\n                    PrixRevente = table.Column<decimal>(type: "decimal(18,2)", nullable: false),\r\n                    CategorieId = table.Column<int>(type: "int", nullable: false),\r\n                    EnsembleId = table.Column<int>(type: "int", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_CarteTb", x => x.CarteId);\r\n                    table.ForeignKey(\r\n                        name: "FK_CarteTb_CategorieTb_CategorieId",\r\n                        column: x => x.CategorieId,\r\n                        principalTable: "CategorieTb",\r\n                        principalColumn: "CategorieId",\r\n                        onDelete: ReferentialAction.Cascade);\r\n                    table.ForeignKey(\r\n                        name: "FK_CarteTb_EnsembleTb_EnsembleId",\r\n                        column: x => x.EnsembleId,\r\n                        principalTable: "EnsembleTb",\r\n                        principalColumn: "EnsembleId",\r\n                        onDelete: ReferentialAction.Cascade);\r\n                });\r\n\r\n            migrationBuilder.CreateTable(\r\n                name: "UtilisateurTb",\r\n                columns: table => new\r\n                {\r\n                    UtilisateurId = table.Column<int>(type: "int", nullable: false)\r\n                        .Annotation("SqlServer:Identity", "1, 1"),\r\n                    Prenom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    Nom = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    NomUtilisateur = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    MotPasseHash = table.Column<string>(type: "nvarchar(max)", nullable: false),\r\n                    RoleId = table.Column<int>(type: "int", nullable: false)\r\n                },\r\n                constraints: table =>\r\n                {\r\n                    table.PrimaryKey("PK_UtilisateurTb", x => x.UtilisateurId);\r\n                    table.ForeignKey(\r\n                        name: "FK_UtilisateurTb_RoleTb_RoleId",\r\n                        column: x => x.RoleId,\r\n                        principalTable: "RoleTb",\r\n                        principalColumn: "RoleId",\r\n                        onDelete: ReferentialAction.Cascade);\r\n                });\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: "IX_CarteTb_CategorieId",\r\n                table: "CarteTb",\r\n                column: "CategorieId");\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: "IX_CarteTb_EnsembleId",\r\n                table: "CarteTb",\r\n                column: "EnsembleId");\r\n\r\n            migrationBuilder.CreateIndex(\r\n                name: "IX_UtilisateurTb_RoleId",\r\n                table: "UtilisateurTb",\r\n                column: "RoleId");\r\n        }\r\n\r\n        /// <inheritdoc />\r\n        protected override void Down(MigrationBuilder migrationBuilder)\r\n        {\r\n            migrationBuilder.DropTable(\r\n                name: "CarteTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "UtilisateurTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "CategorieTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "EnsembleTb");\r\n\r\n            migrationBuilder.DropTable(\r\n                name: "RoleTb");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Les fichiers de migration sont incr\xe9mentaux. La g\xe9n\xe9ration d'une migration se base sur le fichier ",(0,s.jsx)(n.strong,{children:"snapshot"})," du dossier de migration. Il est important d'utiliser la commande ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Remove-Migration"})})," pour retirer une migration de la liste et non supprimer le fichier manuellement. L'annexe \xe0 la fin du document explique le fonctionnement du ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Remove-Migration"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"synchronisation-de-la-base-de-donn\xe9es",children:"Synchronisation de la base de donn\xe9es"}),"\n",(0,s.jsxs)(n.p,{children:["Pour synchroniser une migration avec la base de donn\xe9es, il faut utiliser l'utilitaire ",(0,s.jsx)(n.strong,{children:"Update-Database"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Voici la syntaxe."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject [Nom Projet Entity Framework] -Migration [Nom migration]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Si l'argument ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"-Migration"})})," n'est pas sp\xe9cifi\xe9, ce sera toutes les migrations qui seront appliqu\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc9galement, dans la chaine de connexion de la variable ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"MIGRATION_CONNECTION_STRING"})}),", il faut s'assurer que l'utilisateur sp\xe9cifi\xe9 soit en mesure de cr\xe9er des bases de donn\xe9es. Le premier fichier de migration aura le code de cr\xe9ation de la base de donn\xe9es."]}),"\n",(0,s.jsx)(n.p,{children:"Pour ce projet, utilisez cette commande."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Update-Database -StartupProject "SuperCarte.EF" -Migration CreationBD\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es sera pr\xe9sente."]}),"\n",(0,s.jsxs)(n.p,{children:["Il y a par contre quelques erreurs. Les tables se terminent par ",(0,s.jsx)(n.strong,{children:"Tb"}),". \xc9galement, toutes les propri\xe9t\xe9s ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"string"})})," sont des ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NVARCHAR(max)"})}),". Le champ ",(0,s.jsx)(n.strong,{children:"CarteTb.PrixRevente"})," est un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DECIMAL(18,2)"})}),". Le champ ",(0,s.jsx)(n.strong,{children:"EnsembleTb.Disponible"})," est un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"datetime2"})}),". \xc9galement, le champ ",(0,s.jsx)(n.strong,{children:"UtilisateurTb.NomUtilisateur"}),", il n'est pas unique. Ceci ne respecte pas le ",(0,s.jsx)(n.strong,{children:"DEA"}),". Il faut configurer le contexte pour respecter le ",(0,s.jsx)(n.strong,{children:"DEA"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/13_migration_1.png"}),"\n",(0,s.jsx)(n.p,{children:"L'utilisation de la migration permet \xe9galement de conserver les donn\xe9es existantes dans une table."}),"\n",(0,s.jsxs)(n.p,{children:["Dans ",(0,s.jsx)(n.strong,{children:"SSMS"}),", ins\xe9rez un r\xf4le dans la table ",(0,s.jsx)(n.strong,{children:"RoleTb"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"USE eDA_4N1_SuperCarte;\r\nGO\r\n\r\nINSERT INTO RoleTb(Nom)\r\nVALUES ('Administrateur');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La cl\xe9 primaire n'est pas sp\xe9cifi\xe9e dans le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"INSERT"})}),". La migration consid\xe8re que la cl\xe9 primaire d'une table est ",(0,s.jsx)(n.strong,{children:"auto incr\xe9ment\xe9e"})," par d\xe9faut."]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-du-contexte---onmodelcreating",children:"Configuration du contexte - OnModelCreating"}),"\n",(0,s.jsx)(n.p,{children:"Il est possible d'ajouter des configurations et des sp\xe9cifications \xe0 la base de donn\xe9es."}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de sp\xe9cifier le nom de la table pour chacune des classes, les cl\xe9s primaires compos\xe9es, des types de donn\xe9es sp\xe9cifiques, des contraintes sur une colonne..."}),"\n",(0,s.jsxs)(n.p,{children:["Il faut les ajouter dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnModelCreating"})})," du contexte. Il s'agit du ",(0,s.jsx)(n.strong,{children:"FluentAPI"}),". Il est possible de faire plusieurs configurations avec ",(0,s.jsx)(n.strong,{children:"DataAnnontation"})," directement avec les classes du mod\xe8le, mais certaines configurations doivent \xeatre faites obligatoirement avec ",(0,s.jsx)(n.strong,{children:"FluentAPI"}),". \xc9galement, il y a certaines limitations selon la version de ",(0,s.jsx)(n.strong,{children:"Entity Framework Core"})," utilis\xe9e. Le ",(0,s.jsx)(n.strong,{children:"FluentAPI"})," permet de tout faire. Il est pr\xe9f\xe9rable de le faire dans un endroit centralis\xe9."]}),"\n",(0,s.jsx)(n.h3,{id:"nom-des-tables",children:"Nom des tables"}),"\n",(0,s.jsxs)(n.p,{children:["Pour d\xe9buter, il faut modifier le nom des tables pour retirer le suffixe ",(0,s.jsx)(n.strong,{children:"Tb"})," dans la base de donn\xe9es, mais il faut le conserver dans les ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DBSet"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Ajoutez la m\xe9thode ci-dessous dans la classe ",(0,s.jsx)(n.strong,{children:"SuperCarteContext.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'/// <summary>\r\n/// Configuration sp\xe9cifique de la base de donn\xe9es\r\n/// </summary>\r\n/// <param name="modelBuilder"></param>\r\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\r\n{\r\n    //Table Role\r\n    modelBuilder.Entity<Role>(entity =>\r\n    {\r\n        //Sp\xe9cifie le nom de la table dans la BD\r\n        entity.ToTable("Role");\r\n    });\r\n\r\n    //Table Utilisateur\r\n    modelBuilder.Entity<Utilisateur>(entity =>\r\n    {\r\n        //Sp\xe9cifie le nom de la table dans la BD\r\n        entity.ToTable("Utilisateur");\r\n    });\r\n\r\n    //Table Categorie\r\n    modelBuilder.Entity<Categorie>(entity =>\r\n    {\r\n        //Sp\xe9cifie le nom de la table dans la BD\r\n        entity.ToTable("Categorie");\r\n    });\r\n\r\n    //Table Ensemble\r\n    modelBuilder.Entity<Ensemble>(entity =>\r\n    {\r\n        //Sp\xe9cifie le nom de la table dans la BD\r\n        entity.ToTable("Ensemble");\r\n    });\r\n\r\n    //Table Carte\r\n    modelBuilder.Entity<Carte>(entity =>\r\n    {\r\n        //Sp\xe9cifie le nom de la table dans la BD\r\n        entity.ToTable("Carte");\r\n    });\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour chacune des ",(0,s.jsx)(n.strong,{children:"entit\xe9s (mod\xe8les/tables)"}),", il faut utiliser le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"modelBuilder"})})," pour faire la configuration. Dans une mod\xe9lisation de donn\xe9es, le terme ",(0,s.jsx)(n.strong,{children:"Entit\xe9"})," est utilis\xe9 pour repr\xe9senter un concept. ",(0,s.jsx)(n.strong,{children:"DEA"})," est pour ",(0,s.jsx)(n.strong,{children:"Diagramme Entit\xe9 Association"}),". Donc une ",(0,s.jsx)(n.strong,{children:"entit\xe9"})," dans une base de donn\xe9es est une table et pour un mod\xe8le objet une classe de mod\xe8le de donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ToTable()"})})," permet d'indiquer le nom de la table dans la base de donn\xe9es. Il serait possible de s'adapter aux stadards propres de l'organisation/technologie en utilisant que des minuscules, ",(0,s.jsx)(n.strong,{children:"PascalCase"}),", ",(0,s.jsx)(n.strong,{children:"camelCase"}),", la pluralisation, le ",(0,s.jsx)(n.strong,{children:"underscore"})," pour une table pivot..."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du gestionnaire de Package"}),", cr\xe9ez la migration ",(0,s.jsx)(n.strong,{children:"RenommerTables"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration RenommerTables -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Si vous ouvrez le fichier ",(0,s.jsx)(n.strong,{children:"xxx_RenommerTables.cs"})," dans le dossier de migration, il y aura seulement la logique pour renommer les tables. En ",(0,s.jsx)(n.strong,{children:"SQL"}),", cette t\xe2che demanderait beaucoup de code."]}),"\n",(0,s.jsxs)(n.p,{children:["Appliquez la migration avec la commande ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Update-Database"})}),". Il faut sp\xe9cifier la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"RenommerTables"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour ce projet, utilisez cette commande. Le nom de la base de donn\xe9es est ",(0,s.jsx)(n.strong,{children:"eDA_4N1_SuperCarte"}),". Modifiez le ",(0,s.jsx)(n.strong,{children:"DA"})," par votre num\xe9ro d'admission."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"Update-Database -StartupProject SuperCarte.EF -Migration RenommerTables \n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es sera pr\xe9sente avec les nouveaux noms."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/13_migration_2.png"}),"\n",(0,s.jsxs)(n.p,{children:["Effectuez \xe9galement la requ\xeate ci-dessous. L'enregistrement ",(0,s.jsx)(n.strong,{children:"Administrateur"})," est toujours l\xe0."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM [Role];\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La base de donn\xe9es a \xe9galement une table ",(0,s.jsx)(n.strong,{children:"__EFMigrationsHistory"}),". Cette table permet de lister les migrations qui ont \xe9t\xe9 appliqu\xe9es sur la base de donn\xe9es."]}),"\n",(0,s.jsx)(n.p,{children:"La table a actuellement ces enregistrements."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MigrationId\t\t\t\t\t\t\t\t\t\t\t\t\t\tProductVersion\r\n20230315124209_CreationBD\t\t\t\t\t\t\t\t\t\t7.0.4\r\n20230315131307_RenommerTables\t\t\t\t\t\t\t\t\t7.0.4\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour revenir \xe0 l'\xe9tat initial, il faut appliquer de nouveau la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CreationBD"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Pour ce projet, utilisez cette commande."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"Update-Database -Migration CreationBD\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es sera pr\xe9sente avec les anciens noms."]}),"\n",(0,s.jsxs)(n.p,{children:["La table ",(0,s.jsx)(n.strong,{children:"__EFMigrationsHistory"})," a seulement cet enregistrement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MigrationId\t\t\t\t\t\t\t\t\t\t\t\t\t\tProductVersion\r\n20230315124209_CreationBD\t\t\t\t\t\t\t\t\t\t7.0.4\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cr\xe9er-une-cl\xe9-primaire-compos\xe9e",children:"Cr\xe9er une cl\xe9 primaire compos\xe9e"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut cr\xe9er une cl\xe9 primaire compos\xe9e pour la table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class UtilisateurCarte\r\n{\r\n    public int UtilisateurId { get; set; }\r\n\r\n    public int CarteId { get; set; }\r\n\r\n    public short Quantite { get; set; }\r\n\r\n    public Utilisateur Utilisateur { get; set; } = null!;\r\n\r\n    public Carte Carte { get; set; } = null!;\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,s.jsx)(n.strong,{children:"Carte.cs"})," pour ajouter la collection ",(0,s.jsx)(n.strong,{children:"UtilisateurCarteListe"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Carte\r\n{\r\n    public int CarteId { get; set; }\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public byte[]? Image { get; set; }\r\n\r\n    public short Vie { get; set; }\r\n\r\n    public short Armure { get; set; }\r\n\r\n    public short Attaque { get; set; }\r\n\r\n    public bool EstRare { get; set; }\r\n    \r\n    public decimal PrixRevente { get; set; }\r\n\r\n    public int CategorieId { get; set; }\r\n\r\n    public int EnsembleId { get; set; }\r\n\r\n    public Categorie Categorie { get; set; } = null!;\r\n\r\n    public Ensemble Ensemble { get; set; } = null!;\r\n\r\n    public ICollection<UtilisateurCarte> UtilisateurCarteListe { get; set; } = new List<UtilisateurCarte>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,s.jsx)(n.strong,{children:"Utilisateur.cs"})," pour ajouter la collection ",(0,s.jsx)(n.strong,{children:"UtilisateurCarteListe"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"namespace SuperCarte.EF.Data;\r\n\r\npublic class Utilisateur\r\n{\r\n    public int UtilisateurId {  get; set; }\r\n\r\n    public string Prenom { get; set; } = null!;\r\n\r\n    public string Nom { get; set; } = null!;\r\n\r\n    public string NomUtilisateur { get; set; } = null!;\r\n    \r\n    public string MotPasseHash { get; set; } = null!;\r\n\r\n    public int RoleId { get; set; }\r\n\r\n    public Role Role { get; set; } = null!;\r\n\r\n    public ICollection<UtilisateurCarte> UtilisateurCarteListe { get; set; } = new List<UtilisateurCarte>();\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Copiez ce code dans la classe ",(0,s.jsx)(n.strong,{children:"SuperCarteContext"}),", pour ajouter le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DBSet<UtilisateurCarte>"})})," dans le contexte. L'ajout est \xe0 la ligne 112. Il a y \xe9galement la sp\xe9cification du nom de la table \xe0 la ligne 94."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration\r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n        });\r\n    }\r\n\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Effectuez une nouvelle migration nomm\xe9e ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AjouterTableUtilisateurCarte"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration AjouterTableUtilisateurCarte -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsx)(n.p,{children:"Vous allez avoir ce message d'erreur."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"The entity type 'UtilisateurCarte' requires a primary key to be defined. If you intended to use a keyless entity type, call 'HasNoKey' in 'OnModelCreating'. For more information on keyless entity types, see https://go.microsoft.com/fwlink/?linkid=2141943.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ceci indique que la classe ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"})," n'a pas de cl\xe9 primaire, car il n'y a pas de propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"UtilisateurCarteId"}),". Le g\xe9n\xe9rateur de migration n'est pas en mesure de d\xe9terminer que les propri\xe9t\xe9s ",(0,s.jsx)(n.strong,{children:"UtilisateurId"})," et ",(0,s.jsx)(n.strong,{children:"CarteId"})," sont les cl\xe9s primaires. Il faut donc le sp\xe9cifier dans le contexte."]}),"\n",(0,s.jsxs)(n.p,{children:["Modifiez la partie ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"})," dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnModelCreating()"})})," du contexte."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'//Table UtilisateurCarte\r\nmodelBuilder.Entity<UtilisateurCarte>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("UtilisateurCarte");\r\n\r\n    //Sp\xe9cifie la cl\xe9 primaire\r\n    entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasKey()"})})," permet de sp\xe9cifier la cl\xe9 primaire. Si la cl\xe9 est repr\xe9sent\xe9e par plusieurs champs, il faut cr\xe9er un objet dynamique ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"new {}"})})," et ins\xe9rer toutes les propri\xe9t\xe9s qui repr\xe9sentent la cl\xe9 primaire."]}),"\n",(0,s.jsxs)(n.p,{children:["Il peut arriver qu'une table n'utilise pas une cl\xe9 artificielle pour la cl\xe9 primaire. Par exemple, la table ",(0,s.jsx)(n.strong,{children:"Etudiant"})," peut avoir comme cl\xe9 primaire le champ ",(0,s.jsx)(n.strong,{children:"DA"})," et non ",(0,s.jsx)(n.strong,{children:"EtudiantId"}),". Il faudrait sp\xe9cifier ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"entity.HasKey(t => t.DA)"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Effectuez une nouvelle migration nomm\xe9e ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AjouterTableUtilisateurCarte"})}),". Elle devrait fonctionner."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration AjouterTableUtilisateurCarte\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Dans le fichier de migration ",(0,s.jsx)(n.strong,{children:"xxx_AjouterTableUtilisateurCarte.cs"})," du dossier ",(0,s.jsx)(n.strong,{children:"Migrations"}),", il y a seulement la logique de la cr\xe9ation de la table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"}),". Il prend en consid\xe9ration les anciennes migrations, dont ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"RemommerTables"})})," m\xeame si elle n'est pas actuellement appliqu\xe9e."]}),"\n",(0,s.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AjouterTableUtilisateurCarte"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"Update-Database -StartupProject SuperCarte.EF -Migration AjouterTableUtilisateurCarte\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura de nouveau les bons noms de table et la table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"})," est pr\xe9sente avec ses cl\xe9s primaires."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/13_migration_3.png"}),"\n",(0,s.jsxs)(n.p,{children:["La table ",(0,s.jsx)(n.strong,{children:"__EFMigrationsHistory"})," a toutes les migrations qui ont \xe9t\xe9 appliqu\xe9es \xe0 la base de donn\xe9es. La migration ",(0,s.jsx)(n.strong,{children:"RenommerTables"})," a \xe9t\xe9 ex\xe9cut\xe9e de nouveau, car la version de la BD \xe9tait celle de ",(0,s.jsx)(n.strong,{children:"CreationBD"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"MigrationId\t\t\t\t\t\t\t\t\t\t\t\t\t\tProductVersion\r\n20230315124209_CreationBD\t\t\t\t\t\t\t\t\t\t7.0.4\r\n20230315131307_RenommerTables\t\t\t\t\t\t\t\t\t7.0.4\r\n20230315140002_AjouterTableUtilisateurCarte\t\t\t\t\t\t7.0.4\n"})}),"\n",(0,s.jsx)(n.h3,{id:"type-des-champs---string-decimal-et-date",children:"Type des champs - string, decimal et date"}),"\n",(0,s.jsxs)(n.p,{children:["Actuellement, toutes les chaines de caract\xe8res sont des ",(0,s.jsx)(n.strong,{children:"NVARCHAR(MAX)"}),". Il est de plus en plus fr\xe9quent de ne plus sp\xe9cifier la longueur des chaines de caract\xe8res qui ne sont pas fixes, car il est difficile de d\xe9terminer la bonne longueur pour plusieurs champs. La longueur est souvent sp\xe9cifi\xe9e par l'exp\xe9rience, mais sans consid\xe9ration valable. Le ",(0,s.jsx)(n.strong,{children:"NVARCHAR(MAX)"})," va seulement utiliser l'espace n\xe9cessaire. La gestion des contraintes se fait plus au niveau du logiciel maintenant. Si la longueur maximale doit \xeatre modifi\xe9e, il n'est pas n\xe9cessaire de modifier la base de donn\xe9es, seulement la partie ",(0,s.jsx)(n.strong,{children:"validation"})," dans le logiciel."]}),"\n",(0,s.jsxs)(n.p,{children:["Mais en tant que programmeur, il faut r\xe9aliser le ",(0,s.jsx)(n.strong,{children:"DEA"})," tel que produit par le concepteur. Si vous \xeates le concepteur, posez-vous la question s'il est n\xe9cessaire de limiter la longueur d'un champ ou de ne pas permettre le ",(0,s.jsx)(n.strong,{children:"unicode"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"modelBuilder"})})," a la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Property()"})})," qui permet de sp\xe9cifier les \xe9l\xe9ments sp\xe9cifiques \xe0 un champ. La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Property()"})})," est chainable, donc il est possible d'ajouter toutes les sp\xe9cifications d'un coup pour une propri\xe9t\xe9. Elle re\xe7oit en param\xe8tre une fonction ",(0,s.jsx)(n.strong,{children:"Lambda"})," pour sp\xe9cifier la propri\xe9t\xe9. La variable ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"t"})})," est utilis\xe9e pour ",(0,s.jsx)(n.strong,{children:"Table"}),". Ensuite, les autres m\xe9thodes chainables permettent de configurer la propri\xe9t\xe9/champ."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour sp\xe9cifier la longueur maximale, c'est la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasMaxLength()"})})," qui permet de la sp\xe9cifier."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans le ",(0,s.jsx)(n.strong,{children:"DEA"}),", ce sont des ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"VARCHAR"})})," et non des ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NVARCHAR"})}),". La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"IsUnicode(false)"})})," permet d'indiquer que ce n'est pas un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NVARCHAR"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Voici les exemples pour la configuration des diff\xe9rents cas. La classe compl\xe8te sera fournise \xe0 la fin de la section."}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Role"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'//Table Role\r\nmodelBuilder.Entity<Role>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Role");\r\n\r\n    entity.Property(t => t.Nom)\r\n        .IsUnicode(false) //VARCHAR ou CHAR\r\n        .HasMaxLength(25); //VARCHAR(25)        \r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Utilisateur"}),", le champ ",(0,s.jsx)(n.strong,{children:"MotPasseHash"})," est un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CHAR(60)"})}),". La longueur d'un ",(0,s.jsx)(n.strong,{children:"Hash"})," est fixe \xe0 60 caract\xe8res pour l'algorithme ",(0,s.jsx)(n.strong,{children:"Bcrypt"}),". Ce sera l'algorithme utilis\xe9 pour ce projet. Pour ce cas, il est pertinent pour le concepteur de fixer la longueur. La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"IsFixedLength()"})})," permet d'indiquer que c'est un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"NCHAR"})})," ou un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CHAR"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'//Table Utilisateur\r\nmodelBuilder.Entity<Utilisateur>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Utilisateur");           \r\n\r\n    entity.Property(t => t.MotPasseHash)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(true) //CHAR\r\n        .HasMaxLength(60);\r\n    \r\n    /*Autres colonnes \xe0 ajouter*/\r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Carte"}),", le champ ",(0,s.jsx)(n.strong,{children:"PrixRevente"})," doit \xeatre un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DECIMAL(8,2)"})}),". La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasPrecision()"})})," permet de pr\xe9ciser la pr\xe9cision d'un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DECIMAL"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'//Table Carte\r\nmodelBuilder.Entity<Carte>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Carte");\r\n\r\n    entity.Property(t => t.PrixRevente)\r\n        .HasPrecision(8, 2); //DECIMAL(8,2)\r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Ensemble"}),", le champ ",(0,s.jsx)(n.strong,{children:"Disponibilite"})," doit \xeatre de type ",(0,s.jsx)(n.strong,{children:"DATE"}),". Actuellement c'est un ",(0,s.jsx)(n.strong,{children:"DATETIME2"}),". La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasColumnType()"})})," permet de sp\xe9cifier directement un type. Il faut s'assurer que le type est compatible avec celui de la classe."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'//Table Ensemble\r\nmodelBuilder.Entity<Ensemble>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Ensemble");\r\n\r\n    entity.Property(t => t.Disponibilite)\r\n        .HasColumnType("DATE");\r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Voici la classe ",(0,s.jsx)(n.strong,{children:"SuperCarteContext.cs"})," au complet avec tous les ajustements pour les champs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using Microsoft.EntityFrameworkCore;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {\r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration\r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false) //VARCHAR ou CHAR\r\n                .HasMaxLength(25); //VARCHAR(25)   \r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n\r\n            entity.Property(t => t.Prenom)\r\n                .IsUnicode(false)                    \r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.NomUtilisateur)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.MotPasseHash)\r\n                .IsUnicode(false)\r\n                .IsFixedLength(true) //CHAR\r\n                .HasMaxLength(60);\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(35);\r\n\r\n            entity.Property(t => t.Description)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Disponibilite)\r\n                .HasColumnType("DATE");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(100);\r\n\r\n            entity.Property(t => t.PrixRevente)\r\n                .HasPrecision(8,2);\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n\r\n            //Sp\xe9cifie la cl\xe9 primaire\r\n            entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n        });\r\n    }\r\n\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,s.jsx)(n.strong,{children:"CorrectionType"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration CorrectionType -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"CorrectionType"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"Update-Database -StartupProject SuperCarte.EF -Migration CorrectionType\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura les nouveaux types pour les champs modifi\xe9s."]}),"\n",(0,s.jsx)(n.h3,{id:"ajout-dune-contrainte-dunicit\xe9",children:"Ajout d'une contrainte d'unicit\xe9"}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Utilisateur"}),", le champ ",(0,s.jsx)(n.strong,{children:"NomUtilisateur"})," doit \xeatre unique."]}),"\n",(0,s.jsx)(n.p,{children:"Cette contrainte est assez importante dans la base de donn\xe9es, car s'il y a un probl\xe8me dans l'application pour faire la validation d'un doublon, l'application aurait une faille de s\xe9curit\xe9."}),"\n",(0,s.jsxs)(n.p,{children:["Une contrainte d'unicit\xe9 permet de cr\xe9er un ",(0,s.jsx)(n.strong,{children:"index"})," de recherche sur le champ et d'indiquer la contrainte ",(0,s.jsx)(n.strong,{children:"UNIQUE"}),". Il faut donc cr\xe9er un ",(0,s.jsx)(n.strong,{children:"index"})," dans le contexte et de le sp\xe9cifier comme unique. La sp\xe9cification est \xe0 la ligne 24. Par contre, dans la base de donn\xe9es, il n'y aura pas de contrainte explicite ",(0,s.jsx)(n.strong,{children:"UNIQUE"})," sur le champ. Ce sera uniquement l'index qui s'occupera de valider l'unicit\xe9. L'ajout de l'index unique est \xe0 la ligne 24 du code ci-dessous."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'//Table Utilisateur\r\nmodelBuilder.Entity<Utilisateur>(entity =>\r\n{\r\n    //Sp\xe9cifie le nom de la table dans la BD\r\n    entity.ToTable("Utilisateur");\r\n\r\n    entity.Property(t => t.Prenom)\r\n        .IsUnicode(false)                    \r\n        .HasMaxLength(50);\r\n\r\n    entity.Property(t => t.Nom)\r\n        .IsUnicode(false)\r\n        .HasMaxLength(50);\r\n\r\n    entity.Property(t => t.NomUtilisateur)\r\n        .IsUnicode(false)\r\n        .HasMaxLength(50);\r\n\r\n    entity.Property(t => t.MotPasseHash)\r\n        .IsUnicode(false)\r\n        .IsFixedLength(true) //CHAR\r\n        .HasMaxLength(60);\r\n\r\n    entity.HasIndex(t => t.NomUtilisateur).IsUnique(true);\r\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,s.jsx)(n.strong,{children:"UtilisateurNomUtilisateurUnique"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration UtilisateurNomUtilisateurUnique -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UtilisateurNomUtilisateurUnique"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration UtilisateurNomUtilisateurUnique\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura l'index avec la mention ",(0,s.jsx)(n.strong,{children:"Unique"})," sur le champ ",(0,s.jsx)(n.strong,{children:"NomUtilisateur"}),". Il n'aura pas de contrainte ",(0,s.jsx)(n.strong,{children:"UNIQUE"})," sur le champ, mais le r\xe9sultat est le m\xeame."]}),"\n",(0,s.jsx)(n.h2,{id:"mettre-on-delete-no-action-sur-les-cl\xe9s-\xe9trang\xe8res",children:"Mettre ON DELETE NO ACTION sur les cl\xe9s \xe9trang\xe8res"}),"\n",(0,s.jsxs)(n.p,{children:["Par d\xe9faut, les cl\xe9s \xe9trang\xe8res ont la r\xe8gle ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ON DELETE CASCADE"})}),". Dans certains cas, ce comportement peut \xeatre int\xe9ressant, car ceci permet de supprimer plusieurs enregistrements \xe0 partie de l'enregistrement parent."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"}),", il pourrait \xeatre int\xe9ressant de conserver le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ON DELETE CASCADE"})})," sur la cl\xe9 \xe9trang\xe8re ",(0,s.jsx)(n.strong,{children:"UtilisateurId"}),". Si l'utilisateur est supprim\xe9, les cartes qu'ils poss\xe8dent le seront \xe9galement."]}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, pour la cl\xe9 \xe9trang\xe8re carte, il n'est pas int\xe9ressant de le faire, car si une carte est supprim\xe9e, elle disparaitrait de tous les utilisateurs. L'administrateur avant de supprimer une carte qui est utilis\xe9e par des utilisateurs devra prendre une action sp\xe9ciale s'il d\xe9sire r\xe9ellement supprimer la carte, soit en offrant une nouvelle carte en compensation. Il serait possible de g\xe9rer ce comportement dans le code uniquement, mais en cas de ",(0,s.jsx)(n.strong,{children:"bug"}),", les cons\xe9quences peuvent \xeatre importantes. Il peut \xeatre pr\xe9f\xe9rable de limiter ce comportement dans la base de donn\xe9es \xe9galement."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ON UPDATE"})}),", il est toujours \xe0 **",(0,s.jsx)(n.code,{children:"NO ACTION"}),"**avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", m\xeame si la table est configur\xe9e de cette fa\xe7on dans la base de donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour l'instant, toutes les cl\xe9s \xe9trang\xe8res auront ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ON DELETE NO ACTION"})}),". Pour ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", il faut mettre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DeleteBehavior.ClientSetNull"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut donc configurer manuellement dans le ",(0,s.jsx)(n.strong,{children:"contexte"})," la relation ",(0,s.jsx)(n.strong,{children:"Plusieurs \xe0 1"})," avec la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasOne()"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Utilisateur"}),", la relation est avec la table ",(0,s.jsx)(n.strong,{children:"Role"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"//Table Utilisateur\r\nmodelBuilder.Entity<Utilisateur>(entity =>\r\n{\r\n    /** Code pr\xe9c\xe9dent retir\xe9 pour l'exemple uniquement **/\r\n\r\n    entity.HasOne(t => t.Role).WithMany(p => p.UtilisateurListe)\r\n        .HasForeignKey(t => t.RoleId)\r\n        .OnDelete(DeleteBehavior.ClientSetNull);\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasOne(t => t.Role)"})})," indique qu'il y a une relation ",(0,s.jsx)(n.strong,{children:"Plusieurs \xe0 1"})," avec la table/mod\xe8le ",(0,s.jsx)(n.strong,{children:"Role"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"WithMany(p => p.UtilisateurListe)"})})," indique la relation ",(0,s.jsx)(n.strong,{children:"1 \xe0 plusieurs"})," de la table/mod\xe8le ",(0,s.jsx)(n.strong,{children:"Role"})," avec la table/mod\xe8le ",(0,s.jsx)(n.strong,{children:"Utilisateur"}),". La variable ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"p"})})," est pour ",(0,s.jsx)(n.strong,{children:"Table Parent"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasForeignKey(t => t.RoleId)"})})," indique que la cl\xe9 \xe9trang\xe8re de la table/mod\xe8le ",(0,s.jsx)(n.strong,{children:"Role"})," est la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"RoleId"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnDelete(DeleteBehavior.ClientSetNull)"})})," permet d'indiquer que la r\xe8gle est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"No Action"})}),". Malgr\xe9 que l'option ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DeleteBehavior.NoAction"})})," existe, il est recommand\xe9 de prendre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"DeleteBehavior.ClientSetNull"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour la classe ",(0,s.jsx)(n.strong,{children:"Carte"})," et ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"}),", il y a 2 cl\xe9s \xe9trang\xe8res. Il faut le faire pour les 2 cl\xe9s."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"Carte"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"//Table Carte\r\nmodelBuilder.Entity<Carte>(entity =>\r\n{\r\n    /** Code pr\xe9c\xe9dent retir\xe9 pour l'exemple uniquement **/\r\n\r\n    entity.HasOne(t => t.Ensemble).WithMany(p => p.CarteListe)\r\n            .HasForeignKey(t => t.EnsembleId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n    entity.HasOne(t => t.Categorie).WithMany(p => p.CarteListe)\r\n            .HasForeignKey(t => t.CategorieId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour la table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"//Table UtilisateurCarte\r\nmodelBuilder.Entity<UtilisateurCarte>(entity =>\r\n{\r\n    /** Code pr\xe9c\xe9dent retir\xe9 pour l'exemple uniquement **/\r\n\r\n    entity.HasOne(t => t.Utilisateur).WithMany(p => p.UtilisateurCarteListe)\r\n            .HasForeignKey(t => t.UtilisateurId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n    entity.HasOne(t => t.Carte).WithMany(p => p.UtilisateurCarteListe)\r\n            .HasForeignKey(t => t.CarteId)\r\n            .OnDelete(DeleteBehavior.ClientSetNull);\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Voici le code du contexte ",(0,s.jsx)(n.strong,{children:"SuperCarteContext.cs"})," au complet."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using Microsoft.EntityFrameworkCore;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    private bool _executerSeed = false;\r\n\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {        \r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration            \r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n\r\n                _executerSeed = true;\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false) //VARCHAR ou CHAR\r\n                .HasMaxLength(25); //VARCHAR(25)   \r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n\r\n            entity.Property(t => t.Prenom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.NomUtilisateur)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.MotPasseHash)\r\n                .IsUnicode(false)\r\n                .IsFixedLength(true) //CHAR\r\n                .HasMaxLength(60);\r\n\r\n            entity.HasIndex(t => t.NomUtilisateur).IsUnique(true);\r\n\r\n            entity.HasOne(t => t.Role).WithMany(p => p.UtilisateurListe)\r\n                .HasForeignKey(t => t.RoleId)\r\n                .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(35);\r\n\r\n            entity.Property(t => t.Description)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Disponibilite)\r\n                .HasColumnType("DATE");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(100);\r\n\r\n            entity.Property(t => t.PrixRevente)\r\n                .HasPrecision(8,2);\r\n\r\n            entity.HasOne(t => t.Ensemble).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.EnsembleId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Categorie).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.CategorieId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n\r\n            //Sp\xe9cifie la cl\xe9 primaire\r\n            entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n\r\n            entity.HasOne(t => t.Utilisateur).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.UtilisateurId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Carte).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.CarteId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n    }\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,s.jsx)(n.strong,{children:"FKOnDeleteNoAction"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration FKOnDeleteNoAction -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UtilisateurNomUtilisateurUnique"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration FKOnDeleteNoAction\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et les cl\xe9s \xe9trang\xe8res auront ",(0,s.jsx)(n.strong,{children:"No Action"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici le r\xe9sultat de la 7e section de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"sp_help Utilisateur "})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"constraint_type\t\t\tconstraint_name\t\t\t\tdelete_action\tupdate_action\t\r\nFOREIGN KEY\t\t\t\tFK_Utilisateur_Role_RoleId\tNo Action\t\tNo Action\t\t\n"})}),"\n",(0,s.jsx)(n.h1,{id:"ajouter-des-donn\xe9es---seed",children:"Ajouter des donn\xe9es - Seed"}),"\n",(0,s.jsxs)(n.p,{children:["Pour ajouter des donn\xe9es, il faut le faire dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnModelCreating()"})}),". Cette action s'appelle ",(0,s.jsx)(n.strong,{children:"Seed"})," pour semer des donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["Avant de poursuivre, il faut retirer l'enregistrement de la table ",(0,s.jsx)(n.strong,{children:"Role"})," qui a \xe9t\xe9 fait manuellement."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"DELETE FROM [Role];\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pr\xe9paration-du-contexte",children:"Pr\xe9paration du contexte"}),"\n",(0,s.jsxs)(n.p,{children:["Pour \xe9viter que le ",(0,s.jsx)(n.strong,{children:"Seed"})," soit toujours ex\xe9cut\xe9 en m\xe9moire, il est pr\xe9f\xe9rable de modifier le contexte. Ce sera l'attribut ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"_activerSeed"})})," qui s'occupera de ceci."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using Microsoft.EntityFrameworkCore;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace SuperCarte.EF.Data.Context;\r\n\r\n/// <summary>\r\n/// Contexte pour la base de de donn\xe9es SuperCarte\r\n/// </summary>\r\npublic class SuperCarteContext : DbContext\r\n{\r\n    private bool _executerSeed = false;\r\n\r\n    /// <summary>\r\n    /// Constructeur pour la migration\r\n    /// </summary>\r\n\tpublic SuperCarteContext() : base()\r\n    {\r\n\r\n    }\r\n\r\n    /// <summary>\r\n    /// Constructeur pour l\'utilisation en programme\r\n    /// </summary>\r\n    /// <param name="options">Option de la base de donn\xe9es</param>\r\n    public SuperCarteContext(DbContextOptions<SuperCarteContext> options)\r\n        : base(options)\r\n    {\r\n    }\r\n\r\n#if DEBUG //Permet d\'inclure cette m\xe9thode uniquement si l\'application est en mode DEBUG\r\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\r\n    {        \r\n        //V\xe9rifie si la configuration n\'a pas \xe9t\xe9 sp\xe9cifi\xe9e par un fichier de configuration\r\n        if (optionsBuilder.IsConfigured == false)\r\n        {\r\n            //Aucune configuration \xe0 partir d\'un fichier de configuration\r\n            //Option de base pour la migration            \r\n            string? chaineConnexion = Environment.GetEnvironmentVariable("MIGRATION_CONNECTION_STRING");\r\n\r\n            //V\xe9rifie si la variable n\'est pas vide\r\n            if (string.IsNullOrEmpty(chaineConnexion) == false)\r\n            {\r\n                //La variable n\'est pas vide, la chaine de connexion est appliqu\xe9e\r\n                optionsBuilder.UseSqlServer(chaineConnexion);\r\n\r\n                _executerSeed = true;\r\n            }\r\n            else\r\n            {\r\n                //Il n\'y a aucune chaine de connexion.\r\n                throw new Exception("La variable MIGRATION_CONNECTION_STRING n\'est pas sp\xe9cifi\xe9e. Effectuez la commande suivante dans la Console du Gestionnaire de package : $env:MIGRATION_CONNECTION_STRING=\\"[ma chaine de connexion]\\" ");\r\n            }\r\n        }\r\n    }\r\n#endif\r\n\r\n    /// <summary>\r\n    /// Configuration sp\xe9cifique de la base de donn\xe9es\r\n    /// </summary>\r\n    /// <param name="modelBuilder"></param>\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        //Table Role\r\n        modelBuilder.Entity<Role>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Role");\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false) //VARCHAR ou CHAR\r\n                .HasMaxLength(25); //VARCHAR(25)   \r\n        });\r\n\r\n        //Table Utilisateur\r\n        modelBuilder.Entity<Utilisateur>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Utilisateur");\r\n\r\n            entity.Property(t => t.Prenom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Nom)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.NomUtilisateur)\r\n                .IsUnicode(false)\r\n                .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.MotPasseHash)\r\n                .IsUnicode(false)\r\n                .IsFixedLength(true) //CHAR\r\n                .HasMaxLength(60);\r\n\r\n            entity.HasIndex(t => t.NomUtilisateur).IsUnique(true);\r\n\r\n            entity.HasOne(t => t.Role).WithMany(p => p.UtilisateurListe)\r\n                .HasForeignKey(t => t.RoleId)\r\n                .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        //Table Categorie\r\n        modelBuilder.Entity<Categorie>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Categorie");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(35);\r\n\r\n            entity.Property(t => t.Description)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n        });\r\n\r\n        //Table Ensemble\r\n        modelBuilder.Entity<Ensemble>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Ensemble");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(50);\r\n\r\n            entity.Property(t => t.Disponibilite)\r\n                .HasColumnType("DATE");\r\n        });\r\n\r\n        //Table Carte\r\n        modelBuilder.Entity<Carte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("Carte");\r\n\r\n            entity.Property(t => t.Nom)\r\n                    .IsUnicode(false)\r\n                    .HasMaxLength(100);\r\n\r\n            entity.Property(t => t.PrixRevente)\r\n                .HasPrecision(8,2);\r\n\r\n            entity.HasOne(t => t.Ensemble).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.EnsembleId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Categorie).WithMany(p => p.CarteListe)\r\n                    .HasForeignKey(t => t.CategorieId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        //Table UtilisateurCarte\r\n        modelBuilder.Entity<UtilisateurCarte>(entity =>\r\n        {\r\n            //Sp\xe9cifie le nom de la table dans la BD\r\n            entity.ToTable("UtilisateurCarte");\r\n\r\n            //Sp\xe9cifie la cl\xe9 primaire\r\n            entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\r\n\r\n            entity.HasOne(t => t.Utilisateur).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.UtilisateurId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n\r\n            entity.HasOne(t => t.Carte).WithMany(p => p.UtilisateurCarteListe)\r\n                    .HasForeignKey(t => t.CarteId)\r\n                    .OnDelete(DeleteBehavior.ClientSetNull);\r\n        });\r\n\r\n        if(_executerSeed == true)\r\n        {\r\n            Seed(modelBuilder);\r\n        }\r\n    }\r\n\r\n    /// <summary>\r\n    /// M\xe9thode qui s\'occupe de la cr\xe9ation des donn\xe9es\r\n    /// </summary>\r\n    private void Seed(ModelBuilder modelBuilder)\r\n    {\r\n        //Les donn\xe9es \xe0 ajouter\r\n    }\r\n\r\n    public DbSet<Role> RoleTb { get; set; }\r\n\r\n    public DbSet<Utilisateur> UtilisateurTb { get; set; }\r\n\r\n    public DbSet<Categorie> CategorieTb { get; set; }\r\n\r\n    public DbSet<Ensemble> EnsembleTb { get; set; }\r\n\r\n    public DbSet<Carte> CarteTb { get; set; }\r\n\r\n    public DbSet<UtilisateurCarte> UtilisateurCarteTb { get; set; }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 46, l'activation du ",(0,s.jsx)(n.strong,{children:"Seed"})," se fait uniquement si le contexte est initialis\xe9 en mode ",(0,s.jsx)(n.strong,{children:"Migration"})," dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnConfiguring()"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 160, il y a une v\xe9rification avant d'ex\xe9cuter le **Seed **dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnModelCreating()"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"\xc0 la ligne 169, les donn\xe9es seront cr\xe9\xe9es dans cette m\xe9thode."}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-des-donn\xe9es",children:"Cr\xe9ation des donn\xe9es"}),"\n",(0,s.jsxs)(n.p,{children:["Pour ajouter des donn\xe9es, il faut envoyer un tableau des donn\xe9es dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"HasData()"})})," de l'entit\xe9 en question."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est obligatoire de sp\xe9cifier les cl\xe9s primaires et \xe9trang\xe8res lors d'un ",(0,s.jsx)(n.strong,{children:"Seed"})," \xe0 partir de la migration avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'/// <summary>\r\n/// M\xe9thode qui s\'occupe de la cr\xe9ation des donn\xe9es\r\n/// </summary>\r\nprivate void Seed(ModelBuilder modelBuilder)\r\n{\r\n    //Les donn\xe9es \xe0 ajouter\r\n    Role[] roles = \r\n    {\r\n        new Role() \r\n        { \r\n            RoleId = 1,\r\n            Nom = "Administrateur"                \r\n        },\r\n        new Role()\r\n        {\r\n            RoleId = 2,\r\n            Nom = "Utilisateur"\r\n        },\r\n    };\r\n\r\n    Utilisateur[] utilisateurs =\r\n    {\r\n        new Utilisateur()\r\n        {\r\n            UtilisateurId = 1,\r\n            Prenom = "Fran\xe7ois",\r\n            Nom = "St-Hilaire",\r\n            NomUtilisateur = "fsthilaire",\r\n            MotPasseHash = "$2y$11$IY6NG9FkTSI1dnjLfSbuOuNkuyI7IZHxHSOD5Td6AlwvroUz/vzLK", //Native3! avec Bcrypt\r\n            RoleId = 1 //Admin\r\n        },\r\n        new Utilisateur()\r\n        {\r\n            UtilisateurId = 2,\r\n            Prenom = "Benoit",\r\n            Nom = "Tremblay",\r\n            NomUtilisateur = "btremblay",\r\n            MotPasseHash = "$2y$11$ewK3YsMGQ1IMKEzJUAjyVe0P19I0gEbTO998mwfVbSSA8nZ6MG/ha", //Web4MVC! avec Bcrypt\r\n            RoleId = 2 //Utilisateur\r\n        },\r\n        new Utilisateur() \r\n        {\r\n            UtilisateurId = 3,\r\n            Prenom = "Tony",\r\n            Nom = "Stark",\r\n            NomUtilisateur = "tstark",\r\n            MotPasseHash = "$2y$11$VfcNowkWResPQKl0AA3MJ.w1LXBqmMM77YKlyf32Glr9TWG4xxyD2", //#NotAdmin! avec Bcrypt\r\n            RoleId = 2 //Utilisateur\r\n        }\r\n    };\r\n\r\n    //Ajout dans les tables\r\n    modelBuilder.Entity<Role>().HasData(roles);\r\n    modelBuilder.Entity<Utilisateur>().HasData(utilisateurs);\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Les utilisateurs ont un mot de passe en ",(0,s.jsx)(n.strong,{children:"Hash"})," avec l'algorithme ",(0,s.jsx)(n.strong,{children:"Bcrypt"}),". Le site web ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://bcrypt.online/",children:"https://bcrypt.online/"})})," a permis de les g\xe9n\xe9rer manuellement pour les ins\xe9rer directement. La librairie ",(0,s.jsx)(n.strong,{children:"Bcrypt.Net"})," sera utilis\xe9e dans l'application."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la migration ",(0,s.jsx)(n.strong,{children:"Seed_RoleEtUtilisateur"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Add-Migration Seed_RoleEtUtilisateur -StartupProject SuperCarte.EF\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Appliquez les modifications \xe0 la base de donn\xe9es. Sp\xe9cifiez la migration ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Seed_RoleEtUtilisateur"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration Seed_RoleEtUtilisateur\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour votre ",(0,s.jsx)(n.strong,{children:"TP 3"}),", vous devez cr\xe9er un jeu de donn\xe9es initial pour chacune des tables. Il devra \xeatre cr\xe9\xe9 par un ",(0,s.jsx)(n.strong,{children:"Seed"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez ",(0,s.jsx)(n.strong,{children:"SSMS"})," et la base de donn\xe9es aura des donn\xe9es dans les tables ",(0,s.jsx)(n.strong,{children:"Utilisateur"})," et ",(0,s.jsx)(n.strong,{children:"Role"}),"."]}),"\n",(0,s.jsx)(n.h1,{id:"cr\xe9ation-du-projet---supercartecore",children:"Cr\xe9ation du projet - SuperCarte.Core"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut ajouter le projet ",(0,s.jsx)(n.strong,{children:"Core"})," dans la solution."]}),"\n",(0,s.jsxs)(n.p,{children:["Ce projet aura les classes de type ",(0,s.jsx)(n.strong,{children:"Service"}),", de type ",(0,s.jsx)(n.strong,{children:"Repository"}),", de type ",(0,s.jsx)(n.strong,{children:"Validateur"})," et les mod\xe8les du domaine."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un projet de type ",(0,s.jsx)(n.strong,{children:"Biblioth\xe8que de classe"}),". Il est important ",(0,s.jsx)(n.strong,{children:"de ne pas choisir"})," la version ",(0,s.jsx)(n.strong,{children:".NET Framework"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nom du projet"})," : SuperCarte.Core"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Infrastructure"})," : .NET 7"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Supprimez le fichier ",(0,s.jsx)(n.strong,{children:"Class1.cs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(n.strong,{children:"Models"})," \xe0 la racine du projet. Ce dossier contient les classes du mod\xe8le du domaine."]}),"\n",(0,s.jsx)(n.p,{children:"Il faut diff\xe9rencier les classes du mod\xe8le de donn\xe9es et du mod\xe8le du domaine."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mod\xe8le de donn\xe9es"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Il s'agit d'une classe qui repr\xe9sente une entit\xe9 de la base de donn\xe9es. (Table ou Vue)."}),"\n",(0,s.jsx)(n.li,{children:"L'application ne doit pas travailler directement avec cette classe."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mod\xe8le du domaine"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Il s'agit d'une classe qui repr\xe9sente un \xe9l\xe9ment du domaine de l'application. Elle peut \xeatre tr\xe8s similaire \xe0 une classe du mod\xe8le de donn\xe9es, mais peut \xe9galement contenir des champs de plusieurs tables et de la logique propre."}),"\n",(0,s.jsx)(n.li,{children:"La logique applicative travaille avec la classe du mod\xe8le de domaine."}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.strong,{children:"Service"})," s'occupe de faire la transition (",(0,s.jsx)(n.strong,{children:"mapping"}),") entre la classe du mod\xe8le de donn\xe9es et la classe du domaine du domaine."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.strong,{children:"Repository"})," peut \xe9galement utiliser les classes du domaine pour ins\xe9rer les donn\xe9es de plusieurs tables dans un seul objet."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Avec ",(0,s.jsx)(n.strong,{children:"Entity Framework"}),", il n'est pas recommand\xe9 que la classe du mod\xe8le de donn\xe9es soit \xe9galement la classe du mod\xe8le du domaine. ",(0,s.jsx)(n.strong,{children:"Dapper"})," offre un plus grand contr\xf4le sur la cr\xe9ation de l'objet, il serait possible de donner les 2 r\xf4les \xe0 la m\xeame classe."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(n.strong,{children:"Repositories"})," \xe0 la racine du projet. Ce dossier contiendra les classes de type ",(0,s.jsx)(n.strong,{children:"Repository"}),". Ce sont les classes qui contiennent les requ\xeates pour communiquer avec la base de donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un dossier ",(0,s.jsx)(n.strong,{children:"Services"})," \xe0 la racine du projet. Ce dossier contiendra les services de l'application. Les classes de type ",(0,s.jsx)(n.strong,{children:"Service"})," contiennent la logique de l'application. Elles s'occuperont de convertir les objets de donn\xe9es en objet du domaine et vice-versa dans un certain cas \xe9galement."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"Validateurs"}),". Les classes de type ",(0,s.jsx)(n.strong,{children:"Validateur"})," s'occupent de valider les donn\xe9es. Ce sont des outils que le service utilisera pour s'assurer que l'objet du domaine est conforme aux exigences du logiciel. Avant d'envoyer un objet \xe0 la base de donn\xe9es, il doit respecter les contraintes."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"Extensions"}),". Il y aura des extensions pour faire la conversion entre les objets du mod\xe8le de donn\xe9es et du mod\xe8le du domaine."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici la structure compl\xe8te des dossiers du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.Core"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"SuperCarte.Core\r\n\t- Extensions\r\n\t- Models\r\n\t- Repositories\r\n\t- Services\r\n\t- Validateurs\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ajout-des-d\xe9pendances-de-projet",children:"Ajout des d\xe9pendances de projet"}),"\n",(0,s.jsxs)(n.p,{children:["Le projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.Core"})," aura besoin du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"})," pour utiliser le contexte."]}),"\n",(0,s.jsx)(n.p,{children:"Il faut l'ajouter dans les d\xe9pendances du projet."}),"\n",(0,s.jsxs)(n.p,{children:["S\xe9lectionnez le dossier ",(0,s.jsx)(n.strong,{children:"D\xe9pendances"})," du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.Core"})," et choisissez ",(0,s.jsx)(n.strong,{children:"Ajouter une r\xe9f\xe9rence de projet"})," dans le menu contextuel."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la fen\xeatre, il faut cocher ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"}),". Vous venez d'int\xe9grer une librairie interne au projet."]}),"\n",(0,s.jsx)(n.h2,{id:"classe-et-m\xe9thode-g\xe9n\xe9rique---th\xe9orie",children:"Classe et m\xe9thode g\xe9n\xe9rique - Th\xe9orie"}),"\n",(0,s.jsxs)(n.p,{children:["Pour plus d'information : ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/fr-fr/dotnet/csharp/fundamentals/types/generics",children:"https://learn.microsoft.com/fr-fr/dotnet/csharp/fundamentals/types/generics"})]}),"\n",(0,s.jsx)(n.p,{children:"L'utilisation de classe g\xe9n\xe9rique permet de g\xe9n\xe9raliser les classes afin d'\xe9viter de cr\xe9er plusieurs classes sp\xe9cifiques et de m\xe9thodes sp\xe9cifiques."}),"\n",(0,s.jsxs)(n.p,{children:["Les classes et les m\xe9thodes g\xe9n\xe9riques ont \xe0 la fin de leur nom le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<>"})}),". Le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<>"})})," permet d'indiquer le type r\xe9el qui doit \xeatre utilis\xe9 pour l'instance de la classe ou pour l'utilisation de la m\xe9thode."]}),"\n",(0,s.jsxs)(n.p,{children:["La classe g\xe9n\xe9rique la plus populaire en ",(0,s.jsx)(n.strong,{children:"C#"})," est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"List<T>"})}),". La lettre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"T"})})," est la norme pour indiquer que le type est g\xe9n\xe9rique."]}),"\n",(0,s.jsxs)(n.p,{children:["Prenez par exemple qu'il faut avoir une collection de la classe ",(0,s.jsx)(n.strong,{children:"Personne"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public class Personne\r\n{\r\n    public string Prenom { get; set; }\r\n    public string Nom { get; set; }\r\n    public int Age { get; set; }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Avant d'avoir une collection de type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"List<T>"})}),", il avait 2 options."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cr\xe9er une collection d'objets"})}),"\n",(0,s.jsxs)(n.p,{children:["Par exemple, en ",(0,s.jsx)(n.strong,{children:"C#"}),", il y a la collection ",(0,s.jsx)(n.strong,{children:"ArrayList"}),". Voici la signature de la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Add(objet? value)"})}),". Cette collection permet d'ajouter des classes du type ",(0,s.jsx)(n.strong,{children:"objet"}),", donc tous les types de classes."]}),"\n",(0,s.jsx)(n.p,{children:"Il est possible d'ajouter plusieurs types de donn\xe9es dans la m\xeame collection. C'est rarement un comportement d\xe9sir\xe9 dans une liste."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'ArrayList listePersonne = new ArrayList();\r\nliste.Add(1); //Un entier\r\nliste.Add("une string"); //Une string\r\nliste.Add(3.04m); //Un decimal\r\nliste.Add(new DateTime(2011,11,11)); //Un objet DateTime\r\nliste.Add(new Personne() {Prenom = "Francois", Nom = "St-Hilaire", Age = 21}); //Un objet de type personne\r\n\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cr\xe9er une classe Collection sp\xe9cifique \xe0 un type."})}),"\n",(0,s.jsxs)(n.p,{children:["Cette approche permet de cr\xe9er une classe qui s'occupera d'ajouter des objets d'un seul type. Cette classe permet d'encapsuler la m\xe9canique interne pour ajouter, pour enlever et pour obtenir uniquement pour le type ",(0,s.jsx)(n.strong,{children:"Personne"}),". Le gros d\xe9savantage est qu'il faut cr\xe9er une classe ",(0,s.jsx)(n.strong,{children:"Collection"})," sp\xe9cifique pour toutes les classes de l'application qui n\xe9cessite une collection."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'public class CollectionPersonne\r\n{\r\n    private ArrayList _arrPersonne = new ArrayList();\r\n\r\n    public void Ajouter(Personne personne)\r\n    {\r\n        _arrPersonne.Add(personne);\r\n    }\r\n\r\n    public Personne Obtenir(int index)\r\n    {\r\n        if (index < _arrPersonne.Count)\r\n        {\r\n            return (Personne)_arrPersonne[index];\r\n        }\r\n        else\r\n        {\r\n            throw new Exception($"La liste a {_arrPersonne.Count} \xe9l\xe9ment(s)");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Voici comment l'utiliser."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'CollectionPersonne liste = new CollectionPersonne();\r\n\r\nliste.Ajouter(new Personne() { Prenom = "Francois", Nom = "St-Hilaire", Age = 21 });\r\nliste.Ajouter(new Personne() { Prenom = "St\xe9phane", Nom = "Janvier", Age = 61 });\r\n\r\nPersonne p2 = liste.Obtenir(1);\r\n\r\nConsole.WriteLine($"La personne est {p2.Prenom} { p2.Nom }.");\r\n\r\nliste.Ajouter(4); //Erreur du compilateur. Seulement le type **Personne** qui est accept\xe9.\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Classe g\xe9n\xe9rique"})}),"\n",(0,s.jsx)(n.p,{children:"Les classes g\xe9n\xe9riques permettent de g\xe9n\xe9raliser un comportement et de sp\xe9cifier un type \xe0 une instance pr\xe9cise."}),"\n",(0,s.jsxs)(n.p,{children:["Voici une simplification de la classe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"List<T>"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'public class ListeGenerique<T>\r\n{\r\n    private ArrayList _arr = new ArrayList();\r\n\r\n    public void Ajouter(T valeur)\r\n    {\r\n        _arr.Add(valeur);\r\n    }\r\n\r\n    public T Obtenir(int index)\r\n    {\r\n        if (index < _arr.Count)\r\n        {\r\n            return (T)_arr[index];\r\n        }\r\n        else\r\n        {\r\n            throw new Exception($"La liste a {_arr.Count} \xe9l\xe9ment(s)");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la d\xe9claration de la classe, il y a le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<T>"})})," qui indique qu'il faut obligatoirement sp\xe9cifier un type lors de la cr\xe9ation d'un objet."]}),"\n",(0,s.jsxs)(n.p,{children:["Le type g\xe9n\xe9rique ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"T"})})," est utilis\xe9 comme type pour le param\xe8tre de la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"void Ajouter(T valeur)"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Le type g\xe9n\xe9rique ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"T"})})," est utilis\xe9 comme type de retour de la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"T Obtenir(int index)"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Donc, si un objet est cr\xe9\xe9 avec le type ",(0,s.jsx)(n.strong,{children:"Personne"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"new ListeGenerique<Personne>()"})})," , le compilateur va voir ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"void Ajouter(Personne valeur)"})})," et  ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Personne Obtenir(int index)"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Voici comment l'utiliser."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'ListeGenerique<Personne> liste = new ListeGenerique<Personne>();\r\n\r\nliste.Ajouter(new Personne() { Prenom = "Francois", Nom = "St-Hilaire", Age = 21 });\r\nliste.Ajouter(new Personne() { Prenom = "St\xe9phane", Nom = "Janvier", Age = 61 });\r\n\r\nPersonne p2 = liste.Obtenir(1);\r\n\r\nConsole.WriteLine($"La personne est {p2.Prenom} { p2.Nom }.");\r\n\r\nliste.Ajouter(4); //Erreur du compilateur\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Avec la m\xeame liste, il est possible de faire des ajouts de ",(0,s.jsx)(n.strong,{children:"DateTime"})," par exemple."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'ListeGenerique<DateTime> listeDate = new ListeGenerique<DateTime>();\r\n\r\nlisteDate.Ajouter(new DateTime(1967, 2, 1));\r\nlisteDate.Ajouter(new DateTime(1957, 6, 29));\r\n\r\nDateTime d2 = listeDate.Obtenir(1);\r\n\r\nConsole.WriteLine($"La date est {d2}.");\r\n\r\nlisteDate.Ajouter(4); //Erreur du compilateur\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"g\xe9n\xe9ralisation-du-contexte",children:"G\xe9n\xe9ralisation du contexte"}),"\n",(0,s.jsxs)(n.p,{children:["Les m\xe9thodes de base de la classe ",(0,s.jsx)(n.strong,{children:"DBContext"})," utilisent les types g\xe9n\xe9riques. Il est donc possible de g\xe9n\xe9raliser les requ\xeates de base et r\xe9p\xe9titives dans le ",(0,s.jsx)(n.strong,{children:"Repository"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici une liste de requ\xeates ",(0,s.jsx)(n.strong,{children:"classiques"})," qui sont g\xe9n\xe9ralement identiques."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Obtenir tous les \xe9l\xe9ments de la table"}),"\n",(0,s.jsx)(n.li,{children:"Ajouter un ou des \xe9l\xe9ments"}),"\n",(0,s.jsx)(n.li,{children:"Supprimer un ou des \xe9l\xe9ments"}),"\n",(0,s.jsx)(n.li,{children:"Enregistrer les modifications"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le dossier ",(0,s.jsx)(n.strong,{children:"Bases"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Repositories"}),". Ce dossier contiendra les classes g\xe9n\xe9riques de base."]}),"\n",(0,s.jsxs)(n.p,{children:["L'injection de d\xe9pendances du ",(0,s.jsx)(n.strong,{children:"Repository"})," se fait par les interfaces. Il faut donc que les classes de base poss\xe8dent une interface."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IBaseRepo"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'namespace SuperCarte.Core.Repositories.Bases;\r\n\r\n/// <summary>\r\n/// Interface g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base de donn\xe9es\r\n/// </summary>\r\n/// <typeparam name="TData">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\npublic interface IBaseRepo<TData> where TData : class\r\n{\r\n    /// <summary>\r\n    /// Obtenir la liste de tous les items en asynchrone.\r\n    /// </summary>\r\n    /// <returns>Liste des items</returns>\r\n    Task<List<TData>> ObtenirListeAsync();\r\n\r\n    /// <summary>\r\n    /// Obtenir la liste de tous les items.\r\n    /// </summary>\r\n    /// <returns>Liste des items</returns>\r\n    List<TData> ObtenirListe();\r\n\r\n    /// <summary>\r\n    /// Ajouter une liste d\'items dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task AjouterAsync(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Ajouter une liste d\'items dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Ajouter(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Ajouter un item dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task AjouterAsync(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Ajouter un item dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 ajouter</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Ajouter(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer une liste d\'items dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task SupprimerAsync(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer une liste d\'items dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="lstItem">Liste des items \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Supprimer(List<TData> lstItem, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer un item dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task SupprimerAsync(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Supprimer un item dans la base de donn\xe9es.\r\n    /// </summary>\r\n    /// <param name="item">L\'item \xe0 supprimer</param>\r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void Supprimer(TData item, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Enregistrer l\'\xe9tat actuel du contexte dans la base de donn\xe9es en asynchrone.\r\n    /// </summary>\r\n    Task EnregistrerAsync();\r\n\r\n    /// <summary>\r\n    /// Enregistrer l\'\xe9tat actuel du contexte dans la base de donn\xe9es.\r\n    /// </summary>\r\n    void Enregistrer();\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 7, il y a la d\xe9claration de l'interface avec un type g\xe9n\xe9rique.  Il est possible de renommer le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"T"})})," pour un nom plus sp\xe9cifique ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"TData"})}),". Par convention, le type g\xe9n\xe9rique d\xe9bute toujours avec le pr\xe9fixe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"T"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il est possible de mettre des contraintes au type g\xe9n\xe9rique. Le mot-cl\xe9 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"where"})})," permet de sp\xe9cifier les contraintes. Dans ce cas-ci, il est seulement possible de sp\xe9cifier un type qui est une classe. Donc, il n'est pas possible de sp\xe9cifier ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"IBaseRepo<int>"})}),", car le type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"int"})})," n'est pas une classe, mais un type primitif."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour plus d'information pour le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"where"})})," ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/where-generic-type-constraint",children:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/where-generic-type-constraint"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public interface IBaseRepo<TData> where TData : class\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour chacune des m\xe9thodes, il y a le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"TData"})})," pour le type d'un param\xe8tre ou pour le retour."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc9galement, l'application doit pouvoir fonctionner en ",(0,s.jsx)(n.strong,{children:"asynchrone"}),". Par convention en ",(0,s.jsx)(n.strong,{children:"C#"}),", une m\xe9thode ",(0,s.jsx)(n.strong,{children:"asynchrone"})," doit avoir le suffixe ",(0,s.jsx)(n.strong,{children:"Async"}),", mais ce n'est pas obligatoire. De plus, les m\xe9thodes doivent retourner un type ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Task"})})," ou ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Task<T>"})}),". L'explication du fonctionnement de l'asynchrone sera expliqu\xe9e dans la partie 2. Il faut \xe9galement le m\xe9thode ",(0,s.jsx)(n.strong,{children:"synchrone"}),", car selon le cas d'utilisation, l'appel peut \xeatre obligatoirement synchrone."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"BaseRepo"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using Microsoft.EntityFrameworkCore;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories.Bases;\r\n\r\n/// <summary>\r\n/// Classe abstraite g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base de donn\xe9es\r\n/// </summary>\r\n/// <typeparam name=\"TData\">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\npublic class BaseRepo<TData> : IBaseRepo<TData> where TData : class\r\n{\r\n    protected readonly SuperCarteContext _bd;\r\n\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name=\"bd\">Contexte de la base de donn\xe9es</param>\r\n    public BaseRepo(SuperCarteContext bd)\r\n    {\r\n        _bd = bd;\r\n    }\r\n\r\n    public async Task<List<TData>> ObtenirListeAsync()\r\n    {\r\n        //\xc9quivalent \xe0 _db.TData.ToListAsync();\r\n        return await _bd.Set<TData>().ToListAsync();\r\n    }\r\n\r\n    public List<TData> ObtenirListe()\r\n    {\r\n        //\xc9quivalent \xe0 _db.TData.ToList();\r\n        return _bd.Set<TData>().ToList();\r\n    }\r\n\r\n    public async Task AjouterAsync(TData item, bool enregistrer)\r\n    {\r\n        //Add est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Add<TData>().\r\n        _bd.Add(item);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //L'ajout est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Ajouter(TData item, bool enregistrer)\r\n    {\r\n        //Add est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Add<TData>().\r\n        _bd.Add(item);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n\r\n    public async Task AjouterAsync(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //AddRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.AddRange<TData>().\r\n        _bd.AddRange(lstItem);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //L'ajout est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Ajouter(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //AddRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.AddRange<TData>().\r\n        _bd.AddRange(lstItem);\r\n\r\n        //V\xe9rifie si l'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //L'ajout doit \xeatre appliqu\xe9 dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n\r\n    public async Task SupprimerAsync(TData item, bool enregistrer)\r\n    {\r\n        //Remove est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Remove<TData>().\r\n        _bd.Remove(item);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //La suppression est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Supprimer(TData item, bool enregistrer)\r\n    {\r\n        //Remove est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.Remove<TData>().\r\n        _bd.Remove(item);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n\r\n    public async Task SupprimerAsync(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //RemoveRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.RemoveRange<TData>().        \r\n        _bd.RemoveRange(lstItem);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            await _bd.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            //La suppression est seulement en m\xe9moire\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n\r\n    public void Supprimer(List<TData> lstItem, bool enregistrer)\r\n    {\r\n        //RemoveRange est d\xe9j\xe0 g\xe9n\xe9rique.\r\n        //Sa d\xe9finition r\xe9elle est _bd.RemoveRange<TData>().        \r\n        _bd.RemoveRange(lstItem);\r\n\r\n        //V\xe9rifie si la suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n        if (enregistrer == true)\r\n        {\r\n            //La suppression doit \xeatre appliqu\xe9e dans la base de donn\xe9es imm\xe9diatement\r\n            _bd.SaveChanges();\r\n        }\r\n    }\r\n    public async Task EnregistrerAsync()\r\n    {\r\n        //Enregistre les ajouts, modifications et suppression en attente dans la m\xe9moire du contexte\r\n        await _bd.SaveChangesAsync();\r\n    }\r\n\r\n    public void Enregistrer()\r\n    {\r\n        //Enregistre les ajouts, modifications et suppressions en attente dans la m\xe9moire du contexte\r\n        _bd.SaveChanges();\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Les m\xe9thodes ressemblent \xe0 ce que vous avez d\xe9j\xe0 fait, mais elles sont g\xe9n\xe9riques."}),"\n",(0,s.jsxs)(n.p,{children:["\xc9galement, le contexte utilise des m\xe9thodes ",(0,s.jsx)(n.strong,{children:"asynchrones"}),". Pour y avoir acc\xe8s, il faut inclure ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using Microsoft.EntityFrameworkCore;"})}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ToListAsync()"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"SaveChangesAsync()"})})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["La d\xe9claration de la classe ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"public class BaseRepo<TData> : IBaseRepo<TData> where TData : class"})})," doit \xe9galement inclure le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<TData>"})}),". Elle doit la r\xe9pliquer dans l'impl\xe9mentation de l'interface avec la m\xeame contrainte ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"where"})}),". Retirez le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"where"})})," et le compilateur indiquera que la classe est en erreur."]}),"\n",(0,s.jsx)(n.h3,{id:"obtenir-un-enregistrement-sp\xe9cifique-par-sa-cl\xe9",children:"Obtenir un enregistrement sp\xe9cifique par sa cl\xe9"}),"\n",(0,s.jsx)(n.p,{children:"Une op\xe9ration de base dans les op\xe9rations de la base de donn\xe9es est d'obtenir un enregistrement sp\xe9cifique en fonction de sa cl\xe9 primaire."}),"\n",(0,s.jsx)(n.p,{children:"Le nom du champ de la cl\xe9 primaire change pour chacune des tables. G\xe9n\xe9ralement, le type de la cl\xe9 primaire un entier, mais ce n'est pas une garantie."}),"\n",(0,s.jsx)(n.p,{children:"Il y a aussi le cas d'une cl\xe9 primaire compos\xe9e."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"//Cl\xe9 avec nom diff\xe9rent\r\nCarte carte = _bd.CarteTb.Where(c => c.CarteId == carteId).FirtOrDefault();\r\nUtilisateur utilisateur = _bd.UtilisateurTb.Where(c => c.UtilisateurId == utilisateurId).FirtOrDefault();\r\n\r\n//Cl\xe9 pas un entier. DA est une string, car les DA peuvent d\xe9buter par 0, pour ceux qui ont \xe9t\xe9 inscrits entre 2000 et 2009\r\nEtudiant etudiant = _bd.EtudiantTb.Where(e => e.DA == da).FirstOrDefault();\r\n\r\n//Cl\xe9 compos\xe9e\r\nUtilisateurCarte utilisateurCarte = _bd.UtilisateurCarteTb.Where(uc => uc.CarteId == carteId && uc.utilisateurId == UtilisateurId).FirtOrDefault();\n"})}),"\n",(0,s.jsx)(n.p,{children:"Est-ce possible de g\xe9n\xe9raliser ceci ? Oui et non."}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:"contexte"})," poss\xe8de une m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Find()"})})," ou ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"FindAsync()"})}),". Cette m\xe9thode permet de recevoir un enregistrement en fonction de sa cl\xe9 primaire."]}),"\n",(0,s.jsxs)(n.p,{children:["Cette m\xe9thode peut recevoir un ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"params object?[]? keyValues "})}),". Le type est ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"object"})}),", donc il peut recevoir une cl\xe9 en ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"int"})}),", en ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"string"})}),", etc. selon le cas."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"//Cl\xe9 avec nom diff\xe9rent\r\nCarte carte = _bd.CarteTb.Find(carteId).FirtOrDefault();\r\nUtilisateur utilisateur = _bd.UtilisateurTb.Find(utilisateurId).FirtOrDefault();\r\n\r\n//Cl\xe9 pas un entier. DA est une string, car les DA peuvent d\xe9buter par 0, pour ceux qui ont \xe9t\xe9 inscrits entre 2000 et 2009\r\nEtudiant etudiant = _bd.EtudiantTb.Find(da).FirstOrDefault();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le mot-cl\xe9 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"params"})})," d'ajouter des param\xe8tres illimit\xe9s (max r\xe9el de 65 535) \xe0 la m\xe9thode. Donc il est possible de faire ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:'Find(1, "2", new DateTime(2022, 1, 3), 10.3m, true)'})})," ou ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Find(1, 2, 3)"})}),".  En r\xe9alit\xe9, il faudrait envoyer un tableau ",(0,s.jsx)(n.strong,{children:"object[]"})," en param\xe8tre, mais le mot-cl\xe9 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"params"})})," permet de le cr\xe9er lors de l'appel de la m\xe9thode en fusionnant les param\xe8tres. Donc **",(0,s.jsx)(n.code,{children:"Find(1, 2, 3)"})," ** est en r\xe9alit\xe9 ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Find(new object{1, 2, 3})"})}),". Pour plus d'information pour le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"params"})})," ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/params",children:"https://learn.microsoft.com/fr-ca/dotnet/csharp/language-reference/keywords/params"})]}),"\n",(0,s.jsx)(n.p,{children:"Il est donc possible de r\xe9cup\xe9rer un enregistrement qui a une cl\xe9 primaire compos\xe9e."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"UtilisateurCarte utilisateurCarte1 = _bd.UtilisateurCarteTb.Find(carteId, utilisateurId).FirtOrDefault();\r\nUtilisateurCarte utilisateurCarte2 = _bd.UtilisateurCarteTb.Find(utilisateurId, carte).FirtOrDefault();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["L'ordre des cl\xe9s a-t-il son importance ? La r\xe9ponse est ",(0,s.jsx)(n.strong,{children:"oui"}),". Lequel des 2 appels est la bonne ? Il faut retourner dans la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnModelCreating"})})," du ",(0,s.jsx)(n.strong,{children:"contexte"})," pour voir dans quel ordre les cl\xe9s ont \xe9t\xe9 sp\xe9cifi\xe9es."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"entity.HasKey(t => new { t.UtilisateurId, t.CarteId });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["C'est donc ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"UtilisateurCarte utilisateurCarte2 = _bd.UtilisateurCarteTb.Find(utilisateurId, carte).FirtOrDefault();"})})," qui serait la bonne. Il est possible de g\xe9n\xe9raliser la m\xe9thode ",(0,s.jsx)(n.strong,{children:"Find"})," dans le ",(0,s.jsx)(n.strong,{children:"Repo"}),", mais il faut l'encadrer."]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.strong,{children:"Repo"})," g\xe9n\xe9rique ne permettra pas la gestion des cl\xe9s multiples, car il y a trop de risque d'erreur que le programmeur doive toujours valider l'ordre des cl\xe9s primaires. Ce sera une m\xe9thode sp\xe9cifique pour les tables qui ont une cl\xe9 primaire compos\xe9e."]}),"\n",(0,s.jsx)(n.p,{children:"La m\xe9thode g\xe9n\xe9rique ressemblerait \xe0 celle-ci."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public Task<TData?> ObtenirParCleAsync(int id)\r\n{\r\n\treturn await _bd.FindAsync<TData>(id);\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il y a 1 probl\xe8me dans cette m\xe9thode. Elle fonctionne uniquement pour une cl\xe9 primaire qui est un ",(0,s.jsx)(n.strong,{children:"entier"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Il est possible de mettre plusieurs types g\xe9n\xe9riques dans une classe."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public class BaseRepo<TData, TClePrimaire> : IBaseRepo<TData, TClePrimaire> where TData : class\r\n{\r\n    /**\r\n     Code retir\xe9 pour simplifier\r\n    */\r\n    public Task<TData?> ObtenirParCleAsync(TClePrimaire clePrimaire)\r\n    {\r\n        return await _bd.FindAsync<TData>(clePrimaire);\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Le nombre de types g\xe9n\xe9riques d'une classe n'est pas limit\xe9 \xe0 1 uniquement. Il suffit de mettre une virgule dans le **",(0,s.jsx)(n.code,{children:"<>"})," ** pour ajouter des types g\xe9n\xe9riques, par exemple  ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<T1, T2, T3, T4>"})})," . Lorsqu'il y a plusieurs types g\xe9n\xe9riques, il est important de les nommer avec un nom significatif."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"TClePrimaire"})})," sert uniquement pour le param\xe8tre de la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ObtenirParCleAsync()"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Mais est-ce le bon endroit pour mettre cette m\xe9thode ? Que devra-t-il \xeatre sp\xe9cifi\xe9 pour la table ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"})," ? Dans le cas ci-dessous, ce sera ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"int"})}),", mais si le programmeur utilise quand m\xeame la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ObtenirParCleAsync()"})}),", il y aura une exception."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"var utilisateurCarteRepo BaseRepo<UtilisateurCarte, int>();\r\n\r\n//La valeur 1 est-ce carteId ou utilisateurId ???\r\nutilisateurCarteRepo.ObtenirParCleAsync(1); //Il y aura une exception \"System.ArgumentException\xa0: 'Entity type 'UtilisateurCarte' is defined with a 2-part composite key, but 1 values were passed to the 'Find' method.'\r\n\"\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cette approche va contre les principes ",(0,s.jsx)(n.strong,{children:"SOLID"}),". Il s'agit du ",(0,s.jsx)(n.strong,{children:"L (Liskov substitution)"}),". \xc7a ne s'applique pas n\xe9cessairement au type g\xe9n\xe9rique dans sa d\xe9finition pure, mais l'id\xe9e est tout de m\xeame respect\xe9e. Ce principe consiste qu'une classe de **Base ** doit fonctionner pour tous les types de donn\xe9es. Il ne doit pas avoir de m\xe9thode disponible dans une classe dont le programmeur sait qu'un cas particulier va g\xe9n\xe9rer une exception si elle est utilis\xe9e. Donc par conception, le programmeur concepteur sait que la m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"ObtenirParCleAsync()"})})," va g\xe9n\xe9rer une exception pour le mod\xe8le de donn\xe9es ",(0,s.jsx)(n.strong,{children:"UtilisateurCarte"}),". Le programmeur qui n'est pas concepteur et qui voit cette m\xe9thode disponible, ne saura pas n\xe9cessairement qu'il ne peut pas l'utiliser, d'o\xf9 l'importance de respecter le ",(0,s.jsx)(n.strong,{children:"L"})," de ",(0,s.jsx)(n.strong,{children:"SOLID"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"La solution a ce probl\xe8me est de cr\xe9er une classe de base interm\xe9diaire."}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IBasePKUniqueRepo"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'namespace SuperCarte.Core.Repositories.Bases;\r\n\r\n/// <summary>\r\n/// Interface g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base de donn\xe9es pour une table \xe0 cl\xe9 primaire unique\r\n/// </summary>\r\n/// <typeparam name="TData">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\n/// <typeparam name="TClePrimaire">Type de la cl\xe9 primaire</typeparam>\r\npublic interface IBasePKUniqueRepo<TData, TClePrimaire> : IBaseRepo<TData> where TData : class\r\n{\r\n    /// <summary>\r\n    /// Obtenir un item sp\xe9cifique en fonction de sa cl\xe9 primaire en asynchrone.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>\r\n    /// <returns>L\'item ou null si non trouv\xe9</returns>\r\n    Task<TData?> ObtenirParCleAsync(TClePrimaire clePrimaire);\r\n\r\n    /// <summary>\r\n    /// Obtenir un item sp\xe9cifique en fonction de sa cl\xe9 primaire.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>\r\n    /// <returns>L\'item ou null si non trouv\xe9</returns>\r\n    TData? ObtenirParCle(TClePrimaire clePrimaire);\r\n\r\n    /// <summary>\r\n    /// Suprimer un item sp\xe9cifique en fonction de sa cl\xe9 primaire en asynchrone.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>    \r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    Task SupprimerParCleAsync(TClePrimaire clePrimaire, bool enregistrer);\r\n\r\n    /// <summary>\r\n    /// Suprimer un item sp\xe9cifique en fonction de sa cl\xe9 primaire.\r\n    /// </summary>\r\n    /// <param name="clePrimaire">Valeur de la cl\xe9 primaire</param>    \r\n    /// <param name="enregistrer">Enregistrer imm\xe9diatement ou non dans la base de donn\xe9es</param>\r\n    void SupprimerParCle(TClePrimaire clePrimaire, bool enregistrer);\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"BasePKUniqueRepo"})," dans le dossier ",(0,s.jsx)(n.strong,{children:"Repositories\\Bases"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories.Bases;\r\n\r\n// <summary>\r\n/// Classe abstraite g\xe9n\xe9rique qui contient les op\xe9rations de base des tables de la base de donn\xe9es pour une table \xe0 cl\xe9 primaire unique\r\n/// </summary>\r\n/// <typeparam name="TData">Type du mod\xe8le de donn\xe9es / table</typeparam>\r\n/// <typeparam name="TClePrimaire">Type de la cl\xe9 primaire</typeparam>\r\npublic abstract class BasePKUniqueRepo<TData, TClePrimaire> : BaseRepo<TData>, IBasePKUniqueRepo<TData, TClePrimaire> where TData : class\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public BasePKUniqueRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n\r\n    public async Task<TData?> ObtenirParCleAsync(TClePrimaire clePrimaire)\r\n    {\r\n        return await _bd.FindAsync<TData>(clePrimaire);\r\n    }\r\n\r\n    public TData? ObtenirParCle(TClePrimaire clePrimaire)\r\n    {\r\n        return _bd.Find<TData>(clePrimaire);\r\n    }\r\n\r\n    public async Task SupprimerParCleAsync(TClePrimaire clePrimaire, bool enregistrer)\r\n    {\r\n        TData? item = await ObtenirParCleAsync(clePrimaire);\r\n\r\n        //V\xe9rifie si un item a \xe9t\xe9 trouv\xe9 avec la cl\xe9 sp\xe9cifi\xe9e\r\n        if (item != null)\r\n        {\r\n            //Il y a un item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            await SupprimerAsync(item, enregistrer);\r\n        }\r\n        else\r\n        {\r\n            //Il n\'y a pas d\'item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            throw new Exception("Impossible de trouver l\'item \xe0 supprimer avec la cl\xe9 sp\xe9cifi\xe9e.");\r\n        }\r\n    }\r\n\r\n    public void SupprimerParCle(TClePrimaire clePrimaire, bool enregistrer)\r\n    {\r\n        TData? item = ObtenirParCle(clePrimaire);\r\n\r\n        //V\xe9rifie si un item a \xe9t\xe9 trouv\xe9 avec la cl\xe9 sp\xe9cifi\xe9e\r\n        if (item != null)\r\n        {\r\n            //Il y a un item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            Supprimer(item, enregistrer);\r\n        }\r\n        else\r\n        {\r\n            //Il n\'y a pas d\'item avec la cl\xe9 sp\xe9cifi\xe9e\r\n            throw new Exception("Impossible de trouver l\'item \xe0 supprimer avec la cl\xe9 sp\xe9cifi\xe9e.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe a 2 m\xe9thodes sp\xe9cifiques aux tables avec une cl\xe9 primaire unique. Il est possible d'obtenir un item \xe0 partir de sa cl\xe9 primaire et de le supprimer. Il y la version ",(0,s.jsx)(n.strong,{children:"synchrone"})," et ",(0,s.jsx)(n.strong,{children:"asynchrone"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"utilisation-du-repository---th\xe9orie",children:"Utilisation du Repository - Th\xe9orie"}),"\n",(0,s.jsxs)(n.p,{children:["Pour utiliser un ",(0,s.jsx)(n.strong,{children:"Repository"})," g\xe9n\xe9rique, il faut l'injecter comme ceci. Voici l'exemple pour ",(0,s.jsx)(n.strong,{children:"Carte"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public classe CarteService\r\n{\r\n\tprivate readonly IBasePKUniqueRepo<Carte, int> _baseRepoCarte;\r\n    \r\n\tpublic CarteService(IBasePKUniqueRepo<Carte, int> baseRepoCarte)\r\n\t{\r\n\t\t_baseRepoCarte = baseRepoCarte;\r\n\t}\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Par contre, si le logiciel doit obtenir les cartes qui ont plus de 10 points de vie, il faut une requ\xeate sp\xe9cifique dans le ",(0,s.jsx)(n.strong,{children:"Repository"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il faut avoir une classe ",(0,s.jsx)(n.strong,{children:"CarteRepo"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Il y a 2 options."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Utiliser 2 ",(0,s.jsx)(n.strong,{children:"Repositories"})," par mod\xe8le de donn\xe9es."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour les mod\xe8les qui n\xe9cessitent des requ\xeates sp\xe9cifiques, il serait possible d'injecter les 2 ",(0,s.jsx)(n.strong,{children:"Repositories"})," dans le ",(0,s.jsx)(n.strong,{children:"Service"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici l'interface et la classe du ",(0,s.jsx)(n.strong,{children:"Repository"})," sp\xe9cifique."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public interface ICarteRepo\r\n{\r\n\tList<Carte> ObtenirListeParPointVieMin(int vie);\r\n}\r\n\r\npublic classe CarteRepoICarteService\r\n{\r\n    private readonly SuperCarteContext _bd;\r\n    \r\n    public CarteRepo(SuperCarteContext bd)\r\n    {\r\n        _bd = bd;\r\n    }\r\n    \r\n\tpublic List<Carte> ObtenirListeParPointVieMin(int vie)\r\n    {\r\n        return _bd.CarteTb.Where(c => c.vie >= vie).ToList();\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Et l'injection dans le ",(0,s.jsx)(n.strong,{children:"Service"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public classe CarteService\r\n{\r\n\tprivate readonly IBaseRepo<Carte> _carteBaseRepo;\r\n\tprivate readonly ICarteRepo _carteSpecificRepo;\r\n    \r\n\tpublic CarteService(IBaseRepo<Carte> _carteBaseRepo, ICarteRepo _carteSpecificRepo)\r\n\t{\r\n\t\t_carteBaseRepo = carteBaseRepo;\r\n\t\t_carteSpecificRepo = carteSpecificRepo;\r\n\t}\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["H\xe9riter de ",(0,s.jsx)(n.strong,{children:"BaseRepo"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Il y aurait seulement un ",(0,s.jsx)(n.strong,{children:"Repository"}),". Le ",(0,s.jsx)(n.strong,{children:"Repository"})," sp\xe9cifique h\xe9riterait du ",(0,s.jsx)(n.strong,{children:"Repository"})," g\xe9n\xe9rique de base."]}),"\n",(0,s.jsxs)(n.p,{children:["Voici l'interface et la classe du ",(0,s.jsx)(n.strong,{children:"Repository"})," sp\xe9cifique."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public interface ICarteRepo : IBasePKUniqueRepo<Carte,int>\r\n{\r\n\tList<Carte> ObtenirListeParPointVieMin(int vie);\r\n}\r\n\r\npublic classe CarteRepo : BasePKUniqueRepo<Carte,int>, ICarteService\r\n{   \r\n    public CarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        \r\n    }\r\n    \r\n\tpublic List<Carte> ObtenirListeParPointVieMin(int vie)\r\n    {\r\n        return _bd.CarteTb.Where(c => c.vie >= vie).ToList();\r\n    }\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Et l'injection dans le ",(0,s.jsx)(n.strong,{children:"Service"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public classe CarteService\r\n{\r\n\tprivate readonly ICarteRepo _carteRepo;\r\n    \r\n\tpublic CarteService(ICarteRepo _carteRepo)\r\n\t{\r\n\t\t_carteRepo = carteRepo;\r\n\t}\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Les 2 approches ont leurs avantages et leurs inconv\xe9nients."}),"\n",(0,s.jsxs)(n.p,{children:["L'approche par h\xe9ritage permet d'avoir un seul ",(0,s.jsx)(n.strong,{children:"Repository"})," qui contient toutes les m\xe9thodes n\xe9cessaires \xe0 l'entit\xe9. Par contre, ce n'est pas tous les ",(0,s.jsx)(n.strong,{children:"Repository"})," qui n\xe9cessitent des requ\xeates sp\xe9cifiques. Dans une approche standardis\xe9e, il pourrait \xeatre exig\xe9 au programmeur de cr\xe9er des classes sp\xe9cifiques, m\xeame s'il n'y a pas de requ\xeate sp\xe9cifique."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans une approche non standardis\xe9e, il faudrait injecter le ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BaseRepo<TData>"})})," dans le service lorsqu'il n'y a pas de requ\xeates sp\xe9cifiques. Si un jour, il faut ajouter une requ\xeate sp\xe9cifique, il faut cr\xe9er le ",(0,s.jsx)(n.strong,{children:"Repository"})," sp\xe9cifique et modifier tous les services qui utilisaient le ",(0,s.jsx)(n.strong,{children:"Repository"})," de base. Ceci peut demander beaucoup de refactorisation. Donc, si l'approche par"]}),"\n",(0,s.jsxs)(n.p,{children:["L'approche avec 2 ",(0,s.jsx)(n.strong,{children:"Repositories"})," a l'avantage de cr\xe9er uniquement un ",(0,s.jsx)(n.strong,{children:"Repo"})," sp\xe9cialis\xe9 lorsque n\xe9cessaire. Par contre, le programmeur doit basculer d'un ",(0,s.jsx)(n.strong,{children:"Repository"})," \xe0 l'autre selon le contexte. Aussi, \xe0 chaque fois qu'il faut injecter le ",(0,s.jsx)(n.strong,{children:"Repository"})," de base, il faut s'assurer de sp\xe9cifier le type de la bonne cl\xe9 primaire. Rien n'emp\xeache \xe9galement d'injecter la mauvaise classe de base, par exemple ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BaseRepo<Carte>"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Si l'enregistrement des services est bien fait dans l'injection des d\xe9pendances, le programme g\xe9n\xe8rera une exception lorsque la mauvaise classe de base sera utilis\xe9e. Par contre, si le programmeur l'ajoute dans l'enregistrement sans valider l'existence des autres, le programme va devenir non uniforme et moins maintenable dans le temps."}),"\n",(0,s.jsxs)(n.p,{children:["Principalement pour la derni\xe8re raison, l'approche par h\xe9ritage sera utilis\xe9e et il faudra cr\xe9er la classe et l'interface sp\xe9cifique en tout temps, m\xeame si elle est vide. Le programme sera plus uniforme et plus facilement maintenable \xe0 long terme.  De plus, dans les applications d'envergure, les ",(0,s.jsx)(n.strong,{children:"entit\xe9s"})," sans aucune requ\xeate sp\xe9cifique sont assez rares."]}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez que les classes ",(0,s.jsx)(n.strong,{children:"BaseRepo"})," et ",(0,s.jsx)(n.strong,{children:"BasePKUniqueRepo"})," ont \xe9t\xe9 d\xe9clar\xe9es d\xe8s le d\xe9part ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"abstract"})})," pour \xe9viter l'utilisation directe sans h\xe9ritage."]}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-des-repositories-sp\xe9cifiques",children:"Cr\xe9ation des Repositories sp\xe9cifiques"}),"\n",(0,s.jsx)(n.p,{children:"Il faut cr\xe9er les classes sp\xe9cifiques qui h\xe9riteront de la classe de base correspondante."}),"\n",(0,s.jsx)(n.p,{children:"Pour l'instant, toutes les classes seront vides."}),"\n",(0,s.jsxs)(n.p,{children:["Toutes les classes et interfaces doivent \xeatre cr\xe9\xe9es dans le dossier ",(0,s.jsx)(n.strong,{children:"Repositories"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"rolerepo",children:"RoleRepo"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IRoleRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic interface IRoleRepo : IBasePKUniqueRepo<Role,int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"RoleRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic class RoleRepo : BasePKUniqueRepo<Role,int>, IRoleRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public RoleRepo(SuperCarteContext bd) : base(bd)\r\n\t{\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePKUniqueRepo<Role,int>"})}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(n.h3,{id:"utilisateurrepo",children:"UtilisateurRepo"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IUtilisateurRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Utilisateur\r\n/// </summary>\r\npublic interface IUtilisateurRepo : IBasePKUniqueRepo<Utilisateur, int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"UtilisateurRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Utilisateur\r\n/// </summary>\r\npublic class UtilisateurRepo : BasePKUniqueRepo<Utilisateur, int>, IUtilisateurRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public UtilisateurRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePKUniqueRepo<Utilisateur,int>"})}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(n.h3,{id:"ensemblerepo",children:"EnsembleRepo"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IEnsembleRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Ensemble\r\n/// </summary>\r\npublic interface IEnsembleRepo : IBasePKUniqueRepo<Ensemble, int>\r\n{\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"EnsembleRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Ensemble\r\n/// </summary>\r\npublic class EnsembleRepo : BasePKUniqueRepo<Ensemble, int>, IEnsembleRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public EnsembleRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePKUniqueRepo<Ensemble,int>"})}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(n.h3,{id:"categorierepo",children:"CategorieRepo"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"ICategorieRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic interface ICategorieRepo : IBasePKUniqueRepo<Categorie, int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"CategorieRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Categorie\r\n/// </summary>\r\npublic class CategorieRepo : BasePKUniqueRepo<Categorie, int>, ICategorieRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CategorieRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\r\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePKUniqueRepo<Categorie,int>"})}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(n.h3,{id:"carterepo",children:"CarteRepo"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"ICarteRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic interface ICarteRepo : IBasePKUniqueRepo<Carte, int>\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"CarteRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Carte\r\n/// </summary>\r\npublic class CarteRepo : BasePKUniqueRepo<Carte, int>, ICarteRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public CarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BasePKUniqueRepo<Carte,int>"})}),", car il y a seulement une cl\xe9 primaire et c'est un entier."]}),"\n",(0,s.jsx)(n.h3,{id:"utilisateurcarterepo",children:"UtilisateurCarteRepo"}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez l'interface ",(0,s.jsx)(n.strong,{children:"IUtilisateurCarteRepoRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Interface qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table Role\r\n/// </summary>\r\npublic interface IUtilisateurCarteRepo : IBaseRepo<UtilisateurCarte>\r\n{\r\n\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"UtilisateurCarteRepoRepo"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using SuperCarte.Core.Repositories.Bases;\r\nusing SuperCarte.EF.Data;\r\nusing SuperCarte.EF.Data.Context;\r\n\r\nnamespace SuperCarte.Core.Repositories;\r\n\r\n/// <summary>\r\n/// Classe qui contient les m\xe9thodes de communication avec la base de donn\xe9es pour la table UtilisateurCarte\r\n/// </summary>\r\npublic class UtilisateurCarteRepo : BaseRepo<UtilisateurCarte>, IUtilisateurCarteRepo\r\n{\r\n    /// <summary>\r\n    /// Constructeur\r\n    /// </summary>\r\n    /// <param name="bd">Contexte de la base de donn\xe9es</param>\r\n    public UtilisateurCarteRepo(SuperCarteContext bd) : base(bd)\r\n    {\r\n        //Vide, il sert uniquement a recevoir le contexte et \xe0 l\'envoyer \xe0 la classe parent.\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La classe h\xe9rite de ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"BaseRepo<UtilisateurCarte>"})}),", car elle n'a pas de cl\xe9 primaire unique."]}),"\n",(0,s.jsx)(n.h1,{id:"pr\xe9paration-du-projet-wpf",children:"Pr\xe9paration du projet WPF"}),"\n",(0,s.jsx)(n.h2,{id:"cr\xe9ation-du-projet-dans-une-solution-existante",children:"Cr\xe9ation du projet dans une solution existante"}),"\n",(0,s.jsxs)(n.p,{children:["Il faut ajouter le projet ",(0,s.jsx)(n.strong,{children:"WPF"})," dans la solution."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour ce faire, s\xe9lectionnez la solution ",(0,s.jsx)(n.strong,{children:"SuperCarteApp"})," en haut de l'",(0,s.jsx)(n.strong,{children:"Explorateur de solution"})," et choisissez ",(0,s.jsx)(n.strong,{children:"Ajouter -> Nouveau projet..."})," dans le menu contextuel."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez un projet de type ",(0,s.jsx)(n.strong,{children:"Application WPF"}),". Il est important ",(0,s.jsx)(n.strong,{children:"de ne pas choisir"})," la version ",(0,s.jsx)(n.strong,{children:".NET Framework"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Nom du projet"})," : SuperCarte.WPF"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Infrastructure"})," : .NET 7"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, s\xe9lectionnez le projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"})," en haut de l'",(0,s.jsx)(n.strong,{children:"Explorateur de solution"})," et choisissez ",(0,s.jsx)(n.strong,{children:"D\xe9finir en tant que projet de d\xe9marrage"})," dans le menu contextuel."]}),"\n",(0,s.jsx)(n.h2,{id:"ajout-des-d\xe9pendances-de-projet-1",children:"Ajout des d\xe9pendances de projet"}),"\n",(0,s.jsxs)(n.p,{children:["Le projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"})," aura besoin du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"})," pour initialiser le contexte et ",(0,s.jsx)(n.strong,{children:"SuperCarte.Core"}),", car il utilisera des ",(0,s.jsx)(n.strong,{children:"services"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Il faut l'ajouter dans les d\xe9pendances du projet."}),"\n",(0,s.jsxs)(n.p,{children:["S\xe9lectionnez le dossier ",(0,s.jsx)(n.strong,{children:"D\xe9pendances"})," du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"})," et choisissez ",(0,s.jsx)(n.strong,{children:"Ajouter une r\xe9f\xe9rence de projet"})," dans le menu contextuel."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la fen\xeatre, il faut cocher ",(0,s.jsx)(n.strong,{children:"SuperCarte.EF"})," et ",(0,s.jsx)(n.strong,{children:"SuperCarte.Core"}),". Vous venez d'int\xe9grer 2 librairies internes au projet."]}),"\n",(0,s.jsx)(n.h2,{id:"fichier-usingscs",children:"Fichier Usings.cs"}),"\n",(0,s.jsxs)(n.p,{children:["Afin de r\xe9duire la taille des classes, les ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"using"})})," qui seront beaucoup utilis\xe9s dans ce projet seront d\xe9clar\xe9 globalement."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,s.jsx)(n.strong,{children:"Usings.cs"})," \xe0 la racine du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"global using SuperCarte.WPF; //Les classes \xe0 la racine de l'application WPF\r\nglobal using SuperCarte.EF.Data; //Les classes du mod\xe8le du contexte\r\nglobal using SuperCarte.EF.Data.Context; // La classe du contexte\r\nglobal using System;\r\nglobal using System.Collections.Generic;\r\nglobal using System.Threading.Tasks;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Au fur et \xe0 mesure que des classes s'ajouteront dans le projet, le fichier ",(0,s.jsx)(n.strong,{children:"Usings.cs"})," sera mis \xe0 jour."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc9galement, le fichier ",(0,s.jsx)(n.strong,{children:"Usings.cs"})," appartient uniquement au projet dans lequel il est cr\xe9\xe9."]}),"\n",(0,s.jsx)(n.h2,{id:"fichier-de-configuration---appsettingsjson",children:"Fichier de configuration - appsettings.json"}),"\n",(0,s.jsxs)(n.p,{children:["La librairie ",(0,s.jsx)(n.strong,{children:"Microsoft.Extensions.Configuration.Json"})," permet de lire un fichier de configuration en ",(0,s.jsx)(n.strong,{children:"json"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez cette ligne. Il est important que le ",(0,s.jsx)(n.strong,{children:"Projet par d\xe9faut"})," soit ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"})," dans la console. La librairie s'installera dans le projet indiqu\xe9 dans le champ ",(0,s.jsx)(n.strong,{children:"Projet par d\xe9faut"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/13_package_console_1.png"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Install-Package Microsoft.Extensions.Configuration.Json\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez le fichier ",(0,s.jsx)(n.strong,{children:"appsettings.json"})," \xe0 la racine du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"}),". Prenez le mod\xe8le ",(0,s.jsx)(n.strong,{children:"Fichier Texte"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"IMPORTANT"})," : Pour que le fichier soit pris en compte par le compilateur, il faut indiquer dans ces propri\xe9t\xe9s qu'il doit \xeatre copi\xe9 dans le dossier de compilation. Effectuez un ",(0,s.jsx)(n.strong,{children:"clic droit"})," sur le fichier ",(0,s.jsx)(n.strong,{children:"appsettings.json"})," et s\xe9lectionnez ",(0,s.jsx)(n.strong,{children:"Propri\xe9t\xe9s"}),". Pour le champ ",(0,s.jsx)(n.strong,{children:"Copier dans le r\xe9pertoire de sortie"}),", il faut mettre la valeur ",(0,s.jsx)(n.strong,{children:"Copier si plus r\xe9cent"}),"."]}),"\n",(0,s.jsx)("img",{src:"/4N1_2024/img/12_appsettings_01.png"}),"\n",(0,s.jsxs)(n.p,{children:["Copiez ce code ",(0,s.jsx)(n.strong,{children:"json"})," dans le fichier."]}),"\n",(0,s.jsxs)(n.p,{children:["Utilisez cette version si vous n'avez pas le message d'erreur du certificat ",(0,s.jsx)(n.strong,{children:"SSL"}),". Il faut \xe9galement modifier le nom de la base de donn\xe9es pour celui que vous avez utilis\xe9."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'{\r\n  "ConnectionStrings": {\r\n    "DefaultConnection": "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;"\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Utilisez cette version avec le param\xe8tre ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Trust Server Certificate=true;"})})," si vous avez le message d'erreur du certificat ",(0,s.jsx)(n.strong,{children:"SSL"}),". Il faut \xe9galement modifier le nom de la base de donn\xe9es pour celui que vous avez utilis\xe9."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'{\r\n  "ConnectionStrings": {\r\n    "DefaultConnection": "Server=localhost\\SQLExpress;Database=eDA_4N1_SuperCarte;Trusted_Connection=True;Trust Server Certificate=true;"\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"ajout-de-la-structure-pour-injection-des-d\xe9pendances",children:"Ajout de la structure pour injection des d\xe9pendances"}),"\n",(0,s.jsxs)(n.p,{children:["Le projet ",(0,s.jsx)(n.strong,{children:"WPF"})," n'a pas de fichier ",(0,s.jsx)(n.strong,{children:"program.cs"}),". Ce type de projet n'est pas con\xe7u \xe0 la base pour \xeatre dans la structure du ",(0,s.jsx)(n.strong,{children:"hosting"})," de ",(0,s.jsx)(n.strong,{children:".Net Core"}),". Il faut donc l'adapter."]}),"\n",(0,s.jsxs)(n.p,{children:["Le fichier de d\xe9marrage de l'application est ",(0,s.jsx)(n.strong,{children:"App.xaml.cs"}),". Il est inclus dans le fichier ",(0,s.jsx)(n.strong,{children:"App.xaml"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Remarquez que la classe est ",(0,s.jsx)(n.strong,{children:"partial"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"public partial class App : Application\r\n{\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Une classe partielle en ",(0,s.jsx)(n.strong,{children:".NET"})," consiste \xe0 cr\xe9er une classe dans plusieurs fichiers. Le fichier ",(0,s.jsx)(n.strong,{children:"App.xaml"})," est aussi une classe, sauf que le langage est ",(0,s.jsx)(n.strong,{children:"XAML"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",children:'<Application x:Class="SuperCarte.WPF.App"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:local="clr-namespace:SuperCarte.WPF"\r\n             StartupUri="MainWindow.xaml">\r\n    <Application.Resources>\r\n         \r\n    </Application.Resources>\r\n</Application>\n'})}),"\n",(0,s.jsx)(n.p,{children:"\xc0 la ligne 1, le nom de la classe est indiqu\xe9."}),"\n",(0,s.jsxs)(n.p,{children:["C'est pour cette raison que le fichier ",(0,s.jsx)(n.strong,{children:"App.xaml.cs"})," est un sous-fichier de ",(0,s.jsx)(n.strong,{children:"App.xaml"})," dans l'",(0,s.jsx)(n.strong,{children:"Explorateur de solutions"}),". Si la classe n'\xe9tait pas partielle, il ne serait pas possible d'avoir 2 langages pour une m\xeame classe. La notion de classe partielle sert \xe9galement \xe0 ajouter des fonctionnalit\xe9s dans une classe g\xe9n\xe9r\xe9e automatiquement. Dans le ",(0,s.jsx)(n.strong,{children:"TP 2"}),", les classes du mod\xe8le sont ",(0,s.jsx)(n.strong,{children:"partial"}),". Il aurait \xe9t\xe9 possible d'ajouter un 2e fichier interne pour ajouter des \xe9l\xe9ments \xe0 la classe de base."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 5, c'est la fen\xeatre de d\xe9marrage. Pour une application ",(0,s.jsx)(n.strong,{children:"WPF"}),", la classe ",(0,s.jsx)(n.strong,{children:"App"})," est le conteneur des fen\xeatres. Une fen\xeatre est l'\xe9quivalent d'une page."]}),"\n",(0,s.jsxs)(n.p,{children:["L'application ",(0,s.jsx)(n.strong,{children:"WPF"})," de ce projet sera comme un ",(0,s.jsx)(n.strong,{children:"SPA"})," ou une ",(0,s.jsx)(n.strong,{children:"Application \xe0 page unique"}),". Dans le cas d'une application native, il serait possible de dire un ",(0,s.jsx)(n.strong,{children:"SWA"})," pour une ",(0,s.jsx)(n.strong,{children:"Application \xe0 fen\xeatre unique"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Les applications ",(0,s.jsx)(n.strong,{children:"\xe0 fen\xeatres multiples"})," sont de plus en plus rares, car de nombreux appareils ne sont pas en mesure de les g\xe9rer correctement. C'est une approche pour les syst\xe8mes d'exploitation ordinateur, comme ",(0,s.jsx)(n.strong,{children:"Windows"})," ou ",(0,s.jsx)(n.strong,{children:"macOS"}),", car ils sont en mesure de g\xe9rer le ",(0,s.jsx)(n.strong,{children:"multifen\xeatre"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["L'application aura seulement une seule fen\xeatre, le classe ",(0,s.jsx)(n.strong,{children:"MainWindow.xaml"}),". \xc0 l'int\xe9rieur de cette classe, il y aura un ",(0,s.jsx)(n.strong,{children:"conteneur"})," qui aura un ",(0,s.jsx)(n.strong,{children:"contr\xf4le utilisateur (user contr\xf4le)"})," qui s'occupera d'une vue sp\xe9cifique. Ce conteneur changera de ",(0,s.jsx)(n.strong,{children:"contr\xf4le utilisateur"})," lorsqu'une nouvelle vue devra \xeatre affich\xe9e. Il s'agit de la m\xeame m\xe9ganique que Blazor ou Angular, mais pour une application native."]}),"\n",(0,s.jsx)(n.h3,{id:"classes-dextension-de-m\xe9thodes",children:"Classes d'extension de m\xe9thodes"}),"\n",(0,s.jsxs)(n.p,{children:["Comme pour le projet de ",(0,s.jsx)(n.strong,{children:"GestionPersonnage"}),", des extensions seront utilis\xe9es pour g\xe9rer l'enregistrement des d\xe9pendances."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez les dossiers ",(0,s.jsx)(n.strong,{children:"Extensions\\ServiceCollections"})," \xe0 la racine du projet ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"SCRepositories.cs"})," dans le dossier."]}),"\n",(0,s.jsxs)(n.p,{children:["Les ",(0,s.jsx)(n.strong,{children:"Repositories"})," sont d\xe9j\xe0 cr\xe9\xe9s, alors il faut les ajouter dans l'enregistrement. Remarquez que la cr\xe9ation est maintenant en ",(0,s.jsx)(n.strong,{children:"Scoped"}),". L'instance du ",(0,s.jsx)(n.strong,{children:"Repo"})," sera partag\xe9e entre les diff\xe9rents services qui l'utilisent."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Repository\r\n/// </summary>\r\npublic static class SCRepositoryExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les repositories de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerRepositories(this IServiceCollection services)\r\n    {\r\n        services.AddScoped<IRoleRepo, RoleRepo>();\r\n        services.AddScoped<IEnsembleRepo, EnsembleRepo>();\r\n        services.AddScoped<ICategorieRepo, CategorieRepo>();\r\n        services.AddScoped<IUtilisateurRepo, UtilisateurRepo>();\r\n        services.AddScoped<ICarteRepo, CarteRepo>();\r\n        services.AddScoped<IUtilisateurCarteRepo, UtilisateurCarteRepo>();\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"SCServiceExtensions.cs"})," dans le dossier ."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Service\r\n/// </summary>\r\npublic static class SCServiceExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les services de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerServices(this IServiceCollection services)\r\n    {\r\n                \r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"SCValidateurExtensions.cs"})," dans le dossier . Cette classe s'occupera de l'enregistrement des ",(0,s.jsx)(n.strong,{children:"Validateurs"}),". Ce concept sera pr\xe9sent\xe9 dansun autre document."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Validateur\r\n/// </summary>\r\npublic static class SCValidateurExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les validateurs de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerValidateurs(this IServiceCollection services)\r\n    {\r\n\r\n    }\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cr\xe9ez la classe ",(0,s.jsx)(n.strong,{children:"SCViewModelExtensions.cs"})," dans le dossier . Cette classe s'occupera de l'enregistrement des ",(0,s.jsx)(n.strong,{children:"ViewModel"}),". Ce concept sera pr\xe9sent\xe9 dans le prochain document."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"using Microsoft.Extensions.DependencyInjection;\r\n\r\nnamespace SuperCarte.WPF.Extensions.ServiceCollections;\r\n\r\n/// <summary>\r\n/// Classe d'extension qui permet d'enregistrer les classes de la cat\xe9gorie Service\r\n/// </summary>\r\npublic static class SCViewModelExtensions\r\n{\r\n    /// <summary>\r\n    /// M\xe9thode qui permet d'enregistrer les ViewModels de l'application\r\n    /// </summary>\r\n    /// <param name=\"services\">La collection de services</param>\r\n    public static void EnregistrerViewModels(this IServiceCollection services)\r\n    {\r\n\r\n    }\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cr\xe9ation-du-host---appxamlcs",children:"Cr\xe9ation du Host - App.xaml.cs"}),"\n",(0,s.jsxs)(n.p,{children:["Dans la ",(0,s.jsx)(n.strong,{children:"Console du Gestionnaire de package"}),", inscrivez cette ligne. Il est important que le ",(0,s.jsx)(n.strong,{children:"Projet par d\xe9faut"})," soit ",(0,s.jsx)(n.strong,{children:"SuperCarte.WPF"})," dans la console. La librairie s'installera dans le projet indiqu\xe9 dans le champ ",(0,s.jsx)(n.strong,{children:"Projet par d\xe9faut"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Install-Package Microsoft.Extensions.Hosting\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Avec cette librairie, il sera possible de configurer l'application ",(0,s.jsx)(n.strong,{children:"WPF"})," avec le ",(0,s.jsx)(n.strong,{children:"hosting"})," d'application de ",(0,s.jsx)(n.strong,{children:".NET Core"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Copiez ce code dans le fichier ",(0,s.jsx)(n.strong,{children:"App.xaml.cs"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'using Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\nusing SuperCarte.WPF.Extensions.ServiceCollections;\r\nusing System.Windows;\r\n\r\nnamespace SuperCarte.WPF;\r\n/// <summary>\r\n/// Interaction logic for App.xaml\r\n/// </summary>\r\npublic partial class App : Application\r\n{\r\n    private IHost? _host;\r\n\r\n\tpublic App()\r\n\t{\r\n        var builder = Host.CreateDefaultBuilder();\r\n\r\n        //Enregistrement des services\r\n        builder.ConfigureServices((context, services) =>\r\n        {            \r\n            services.AddSingleton<MainWindow>(); //Fen\xeatre principale\r\n\r\n            //Enregistrement du contexte    \r\n            services.AddDbContext<SuperCarteContext>(options => options.UseSqlServer(context.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n            //Appel des m\xe9thodes d\'extension                        \r\n            services.EnregistrerRepositories();\r\n            services.EnregistrerServices();            \r\n            services.EnregistrerValidateurs();\r\n            services.EnregistrerViewModels();\r\n        });\r\n\r\n        _host = builder.Build();\r\n    }\r\n\r\n    /// <summary>\r\n    /// D\xe9marrage de l\'application\r\n    /// </summary>\r\n    /// <param name="e"></param>\r\n    protected override async void OnStartup(StartupEventArgs e)\r\n    {\r\n        await _host!.StartAsync();\r\n\r\n        var fenetreInitiale = _host.Services.GetRequiredService<MainWindow>();\r\n        fenetreInitiale.Show(); //Affiche la fen\xeatre initiale\r\n        base.OnStartup(e);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Fermeture de l\'application\r\n    /// </summary>\r\n    /// <param name="e"></param>\r\n    protected override async void OnExit(ExitEventArgs e)\r\n    {\r\n        await _host!.StopAsync();\r\n        base.OnExit(e);\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Voici le d\xe9tail de la classe."}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 1 du bloc de code ci-dessous, il y a un attribut pour le ",(0,s.jsx)(n.strong,{children:"host"})," de l'application. Le ",(0,s.jsx)(n.strong,{children:"host"}),"  doit \xeatre en attribut, car il sera utilis\xe9 dans plusieurs m\xe9thodes de la classe."]}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, le constructeur de la classe s'occupe de configurer le ",(0,s.jsx)(n.strong,{children:"host"})," comme il a \xe9t\xe9 fait dans le fichier ",(0,s.jsx)(n.strong,{children:"Program.cs"})," de l'application console."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 5, le constructeur par d\xe9faut du ",(0,s.jsx)(n.strong,{children:"host"})," est cr\xe9\xe9."]}),"\n",(0,s.jsx)(n.p,{children:"\xc0 la ligne 10, il faut enregistrer la fen\xeatre principale dans les d\xe9pendances de l'application."}),"\n",(0,s.jsx)(n.p,{children:"\xc0 la ligne 13, le contexte est enregistr\xe9 avec le fichier de configuration."}),"\n",(0,s.jsx)(n.p,{children:"Aux lignes 16 \xe0 18, le service utilise les m\xe9thodes d'extension pour enregistrer les diff\xe9rents concepts."}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 21, le ",(0,s.jsx)(n.strong,{children:"host"})," est construit en fonction de la configuration initiale."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:'private IHost? _host;\r\n\r\npublic App()\r\n{\r\n    var builder = Host.CreateDefaultBuilder();\r\n\r\n    //Enregistrement des services\r\n    builder.ConfigureServices((context, services) =>\r\n    {            \r\n        services.AddSingleton<MainWindow>(); //Fen\xeatre principale\r\n\r\n        //Enregistrement du contexte    \r\n        services.AddDbContext<SuperCarteContext>(options => options.UseSqlServer(context.Configuration.GetConnectionString("DefaultConnection")));\r\n\r\n        //Appel des m\xe9thodes d\'extension                        \r\n        services.EnregistrerRepositories();\r\n        services.EnregistrerServices();            \r\n        services.EnregistrerValidateurs();\r\n        services.EnregistrerViewModels();\r\n    });\r\n\r\n    _host = builder.Build();\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["La m\xe9thode ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"OnStartup()"})})," est appel\xe9 au d\xe9marrage de l'application, apr\xe8s le constructeur. Elle d\xe9marre le ",(0,s.jsx)(n.strong,{children:"host"})," et ensuite indique au programme d'afficher la fen\xeatre principale de l'application."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c#",children:"protected override async void OnStartup(StartupEventArgs e)\r\n{\r\n    await _host!.StartAsync();\r\n\r\n    var fenetreInitiale = _host.Services.GetRequiredService<MainWindow>();\r\n    fenetreInitiale.Show(); //Affiche la fen\xeatre initiale\r\n    base.OnStartup(e);\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"D\xe9marrez l'application. Il y a 2 fen\xeatres."}),"\n",(0,s.jsxs)(n.p,{children:["Ouvrez le fichier ",(0,s.jsx)(n.strong,{children:"App.xaml"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",children:'<Application x:Class="SuperCarte.WPF.App"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:local="clr-namespace:SuperCarte.WPF"\r\n             StartupUri="MainWindow.xaml">\r\n    <Application.Resources>\r\n         \r\n    </Application.Resources>\r\n</Application>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 5, il y a la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"StartupUri"}),". Cette propri\xe9t\xe9 indique \xe9galement la fen\xeatre de d\xe9marrage. Il faut retirer cette propri\xe9t\xe9 pour ne pas interf\xe9rer avec l'injection de d\xe9pendances."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",children:'<Application x:Class="SuperCarte.WPF.App"\r\n             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n             xmlns:local="clr-namespace:SuperCarte.WPF">\r\n    <Application.Resources>\r\n         \r\n    </Application.Resources>\r\n</Application>\n'})}),"\n",(0,s.jsx)(n.p,{children:"D\xe9marrez de nouveau l'application et il aura seulement une fen\xeatre."}),"\n",(0,s.jsx)(n.h2,{id:"hello-world",children:"Hello World"}),"\n",(0,s.jsxs)(n.p,{children:["Pour avoir un premier contenu visuel, il faut modifier le fichier ",(0,s.jsx)(n.strong,{children:"MainWindows.xaml"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xaml",children:'<Window x:Class="SuperCarte.WPF.MainWindow"\r\n        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"\r\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\r\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\r\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\r\n        xmlns:local="clr-namespace:SuperCarte.WPF"\r\n        mc:Ignorable="d"\r\n        Title="Super Carte App" Height="450" Width="800">\r\n    <Grid>\r\n        <Label Content="Hello World!!!"></Label>\r\n    </Grid>\r\n</Window>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 8, la propri\xe9t\xe9 ",(0,s.jsx)(n.strong,{children:"Title"})," de la balise ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<Window>"})})," permet de mettre le titre de la fen\xeatre."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 la ligne 10, il y a un ",(0,s.jsx)(n.strong,{children:"Label"})," pour afficher du texte statique.  L'int\xe9rieur de la balise ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"<Grid>"})}),", c'est le contenu de la fen\xeatre."]}),"\n",(0,s.jsx)(n.h1,{id:"annexe---remove-migration",children:"Annexe - Remove-Migration"}),"\n",(0,s.jsx)(n.p,{children:"Pour \xeatre en mesure de supprimer des migrations, il faut remettre la base de donn\xe9es \xe0 l'\xe9tat correct."}),"\n",(0,s.jsx)(n.p,{children:"Par exemple, voici 4 migrations."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"CreationBD\r\nAjoutTableUtilisateur\r\nAjoutTableEnsemble -- Probl\xe9matique\r\nAjoutTableCategorie -- Correct\r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Il faut remettre la base de donn\xe9es \xe0 un \xe9tat valide. Le dernier \xe9tat valide est ",(0,s.jsx)(n.strong,{children:"AjoutTableUtilisateur"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Update-Database -StartupProject SuperCarte.EF -Migration AjoutTableUtilisateur\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Ensuite, il faut utiliser la commande ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"Remove-Migration"})}),". Cette commande enl\xe8ve seulement la derni\xe8re migration. Il faudra l'ex\xe9cuter 2 fois pour retirer la migration probl\xe9matique."]}),"\n",(0,s.jsxs)(n.p,{children:["Pour effacer ",(0,s.jsx)(n.strong,{children:"AjoutTableCategorie"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Remove-Migration -StartupProject SuperCarte.EF \n"})}),"\n",(0,s.jsxs)(n.p,{children:["Pour effacer ",(0,s.jsx)(n.strong,{children:"AjoutTableEnsemble"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Remove-Migration -StartupProject SuperCarte.EF \n"})}),"\n",(0,s.jsxs)(n.p,{children:["Malheureusement, la partie de ",(0,s.jsx)(n.strong,{children:"AjoutTableCategorie"})," doit \xeatre effac\xe9e, m\xeame si elle est valide."]})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var s=r(7294);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);